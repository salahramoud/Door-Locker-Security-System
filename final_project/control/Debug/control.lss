
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000269a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000269a  0000272e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080007c  0080007c  0000274a  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  0000274c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c0  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000064b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000083ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a048  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a435  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__vector_4>
      14:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__vector_9>
      28:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__vector_10>
      2c:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/***************************************************************************
 *                              Functions Definitions
 **************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6a 97       	sbiw	r28, 0x1a	; 26
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	SREG |=(1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	UART_ConfigType UART_config={9600,USART_8_BIT,ONE_BIT,DISABLED};
     b68:	9e 01       	movw	r18, r28
     b6a:	2e 5f       	subi	r18, 0xFE	; 254
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	3a 8b       	std	Y+18, r19	; 0x12
     b70:	29 8b       	std	Y+17, r18	; 0x11
     b72:	8e e6       	ldi	r24, 0x6E	; 110
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9c 8b       	std	Y+20, r25	; 0x14
     b78:	8b 8b       	std	Y+19, r24	; 0x13
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	9d 8b       	std	Y+21, r25	; 0x15
     b7e:	eb 89       	ldd	r30, Y+19	; 0x13
     b80:	fc 89       	ldd	r31, Y+20	; 0x14
     b82:	00 80       	ld	r0, Z
     b84:	2b 89       	ldd	r18, Y+19	; 0x13
     b86:	3c 89       	ldd	r19, Y+20	; 0x14
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	3c 8b       	std	Y+20, r19	; 0x14
     b8e:	2b 8b       	std	Y+19, r18	; 0x13
     b90:	e9 89       	ldd	r30, Y+17	; 0x11
     b92:	fa 89       	ldd	r31, Y+18	; 0x12
     b94:	00 82       	st	Z, r0
     b96:	29 89       	ldd	r18, Y+17	; 0x11
     b98:	3a 89       	ldd	r19, Y+18	; 0x12
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	3a 8b       	std	Y+18, r19	; 0x12
     ba0:	29 8b       	std	Y+17, r18	; 0x11
     ba2:	3d 89       	ldd	r19, Y+21	; 0x15
     ba4:	31 50       	subi	r19, 0x01	; 1
     ba6:	3d 8b       	std	Y+21, r19	; 0x15
     ba8:	8d 89       	ldd	r24, Y+21	; 0x15
     baa:	88 23       	and	r24, r24
     bac:	41 f7       	brne	.-48     	; 0xb7e <main+0x38>
	UART_init(&UART_config);
     bae:	ce 01       	movw	r24, r28
     bb0:	02 96       	adiw	r24, 0x02	; 2
     bb2:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_init>

	TWI_ConfigType twi_config={Prescalar_1,FastMode_400Kb,TWI_ADDRESS};
     bb6:	fe 01       	movw	r30, r28
     bb8:	39 96       	adiw	r30, 0x09	; 9
     bba:	ff 8b       	std	Y+23, r31	; 0x17
     bbc:	ee 8b       	std	Y+22, r30	; 0x16
     bbe:	28 e6       	ldi	r18, 0x68	; 104
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	39 8f       	std	Y+25, r19	; 0x19
     bc4:	28 8f       	std	Y+24, r18	; 0x18
     bc6:	36 e0       	ldi	r19, 0x06	; 6
     bc8:	3a 8f       	std	Y+26, r19	; 0x1a
     bca:	e8 8d       	ldd	r30, Y+24	; 0x18
     bcc:	f9 8d       	ldd	r31, Y+25	; 0x19
     bce:	00 80       	ld	r0, Z
     bd0:	28 8d       	ldd	r18, Y+24	; 0x18
     bd2:	39 8d       	ldd	r19, Y+25	; 0x19
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	39 8f       	std	Y+25, r19	; 0x19
     bda:	28 8f       	std	Y+24, r18	; 0x18
     bdc:	ee 89       	ldd	r30, Y+22	; 0x16
     bde:	ff 89       	ldd	r31, Y+23	; 0x17
     be0:	00 82       	st	Z, r0
     be2:	2e 89       	ldd	r18, Y+22	; 0x16
     be4:	3f 89       	ldd	r19, Y+23	; 0x17
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	3f 8b       	std	Y+23, r19	; 0x17
     bec:	2e 8b       	std	Y+22, r18	; 0x16
     bee:	3a 8d       	ldd	r19, Y+26	; 0x1a
     bf0:	31 50       	subi	r19, 0x01	; 1
     bf2:	3a 8f       	std	Y+26, r19	; 0x1a
     bf4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bf6:	88 23       	and	r24, r24
     bf8:	41 f7       	brne	.-48     	; 0xbca <main+0x84>
	TWI_init(&twi_config);
     bfa:	ce 01       	movw	r24, r28
     bfc:	09 96       	adiw	r24, 0x09	; 9
     bfe:	0e 94 04 11 	call	0x2208	; 0x2208 <TWI_init>

	DcMotor_Init();
     c02:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DcMotor_Init>
	Buzzer_init();
     c06:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Buzzer_init>
	CONTROL_newPassword();
     c0a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <CONTROL_newPassword>

	while(1)
	{
		while(CONTROL_receiveCommand()!=SEND_CHECK_PASSWORD);
     c0e:	0e 94 65 09 	call	0x12ca	; 0x12ca <CONTROL_receiveCommand>
     c12:	88 3f       	cpi	r24, 0xF8	; 248
     c14:	e1 f7       	brne	.-8      	; 0xc0e <main+0xc8>
		CONTROL_receivePassword(g_receivedPassword);
     c16:	8a e8       	ldi	r24, 0x8A	; 138
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 e7 06 	call	0xdce	; 0xdce <CONTROL_receivePassword>
		key=CONTROL_receiveCommand();
     c1e:	0e 94 65 09 	call	0x12ca	; 0x12ca <CONTROL_receiveCommand>
     c22:	89 83       	std	Y+1, r24	; 0x01

		switch(key)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	e8 2f       	mov	r30, r24
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	f8 8b       	std	Y+16, r31	; 0x10
     c2c:	ef 87       	std	Y+15, r30	; 0x0f
     c2e:	2f 85       	ldd	r18, Y+15	; 0x0f
     c30:	38 89       	ldd	r19, Y+16	; 0x10
     c32:	2b 32       	cpi	r18, 0x2B	; 43
     c34:	31 05       	cpc	r19, r1
     c36:	31 f0       	breq	.+12     	; 0xc44 <main+0xfe>
     c38:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3a:	98 89       	ldd	r25, Y+16	; 0x10
     c3c:	8d 32       	cpi	r24, 0x2D	; 45
     c3e:	91 05       	cpc	r25, r1
     c40:	11 f1       	breq	.+68     	; 0xc86 <main+0x140>
     c42:	e5 cf       	rjmp	.-54     	; 0xc0e <main+0xc8>
		{
		case OPEN_DOOR:

			CONTROL_readPassword(g_storedPassword);
     c44:	8f e8       	ldi	r24, 0x8F	; 143
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 5f 08 	call	0x10be	; 0x10be <CONTROL_readPassword>
			g_matchStatus=CONTROL_comparePasswords(g_storedPassword,g_receivedPassword);
     c4c:	8f e8       	ldi	r24, 0x8F	; 143
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	2a e8       	ldi	r18, 0x8A	; 138
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	b9 01       	movw	r22, r18
     c56:	0e 94 87 07 	call	0xf0e	; 0xf0e <CONTROL_comparePasswords>
     c5a:	80 93 7d 00 	sts	0x007D, r24
			if(g_matchStatus==PASS_MATCHED)
     c5e:	80 91 7d 00 	lds	r24, 0x007D
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	31 f4       	brne	.+12     	; 0xc72 <main+0x12c>
			{

		        CONTROL_sendCommand(OPENING_DOOR);
     c66:	80 ef       	ldi	r24, 0xF0	; 240
     c68:	0e 94 4d 09 	call	0x129a	; 0x129a <CONTROL_sendCommand>

		        CONTROL_openingDoor();
     c6c:	0e 94 00 09 	call	0x1200	; 0x1200 <CONTROL_openingDoor>
     c70:	ce cf       	rjmp	.-100    	; 0xc0e <main+0xc8>

			}
			else if(g_matchStatus==PASS_MIS_MATCHED)
     c72:	80 91 7d 00 	lds	r24, 0x007D
     c76:	88 23       	and	r24, r24
     c78:	51 f6       	brne	.-108    	; 0xc0e <main+0xc8>
			{
				CONTROL_sendCommand(WRONG_PASSWORD);
     c7a:	81 ef       	ldi	r24, 0xF1	; 241
     c7c:	0e 94 4d 09 	call	0x129a	; 0x129a <CONTROL_sendCommand>

				CONTROL_wrongPassword();
     c80:	0e 94 2b 09 	call	0x1256	; 0x1256 <CONTROL_wrongPassword>
     c84:	c4 cf       	rjmp	.-120    	; 0xc0e <main+0xc8>
			}
			break;

		case CHANGE_PASSWORD:

			CONTROL_readPassword(g_storedPassword);
     c86:	8f e8       	ldi	r24, 0x8F	; 143
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 5f 08 	call	0x10be	; 0x10be <CONTROL_readPassword>

			g_matchStatus = CONTROL_comparePasswords(g_receivedPassword, g_storedPassword);
     c8e:	8a e8       	ldi	r24, 0x8A	; 138
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	2f e8       	ldi	r18, 0x8F	; 143
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	b9 01       	movw	r22, r18
     c98:	0e 94 87 07 	call	0xf0e	; 0xf0e <CONTROL_comparePasswords>
     c9c:	80 93 7d 00 	sts	0x007D, r24

			if(g_matchStatus == PASS_MATCHED)
     ca0:	80 91 7d 00 	lds	r24, 0x007D
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <main+0x16e>
			{
				CONTROL_sendCommand(CHANGING_PASSWORD);
     ca8:	82 ef       	ldi	r24, 0xF2	; 242
     caa:	0e 94 4d 09 	call	0x129a	; 0x129a <CONTROL_sendCommand>

				CONTROL_newPassword();
     cae:	0e 94 ad 06 	call	0xd5a	; 0xd5a <CONTROL_newPassword>
     cb2:	ad cf       	rjmp	.-166    	; 0xc0e <main+0xc8>


			}
			else if(g_matchStatus == PASS_MIS_MATCHED)
     cb4:	80 91 7d 00 	lds	r24, 0x007D
     cb8:	88 23       	and	r24, r24
     cba:	09 f0       	breq	.+2      	; 0xcbe <main+0x178>
     cbc:	a8 cf       	rjmp	.-176    	; 0xc0e <main+0xc8>
			{
				CONTROL_sendCommand(WRONG_PASSWORD);
     cbe:	81 ef       	ldi	r24, 0xF1	; 241
     cc0:	0e 94 4d 09 	call	0x129a	; 0x129a <CONTROL_sendCommand>

				CONTROL_wrongPassword();
     cc4:	0e 94 2b 09 	call	0x1256	; 0x1256 <CONTROL_wrongPassword>
     cc8:	a2 cf       	rjmp	.-188    	; 0xc0e <main+0xc8>

00000cca <CONTROL_TimerCallBackProcessing>:


}

void CONTROL_TimerCallBackProcessing(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     cd2:	80 91 7c 00 	lds	r24, 0x007C
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
     cd8:	80 93 7c 00 	sts	0x007C, r24
}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <CONTROL_startTimer>:

void CONTROL_startTimer(void)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	2c 97       	sbiw	r28, 0x0c	; 12
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
	TIMER_ConfigType Timer_config={TIMER1_ID,COMPARE,0,F_CPU_1024,7813};
     cf6:	ce 01       	movw	r24, r28
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	99 87       	std	Y+9, r25	; 0x09
     cfc:	88 87       	std	Y+8, r24	; 0x08
     cfe:	e5 e7       	ldi	r30, 0x75	; 117
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	fb 87       	std	Y+11, r31	; 0x0b
     d04:	ea 87       	std	Y+10, r30	; 0x0a
     d06:	f7 e0       	ldi	r31, 0x07	; 7
     d08:	fc 87       	std	Y+12, r31	; 0x0c
     d0a:	ea 85       	ldd	r30, Y+10	; 0x0a
     d0c:	fb 85       	ldd	r31, Y+11	; 0x0b
     d0e:	00 80       	ld	r0, Z
     d10:	8a 85       	ldd	r24, Y+10	; 0x0a
     d12:	9b 85       	ldd	r25, Y+11	; 0x0b
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	9b 87       	std	Y+11, r25	; 0x0b
     d18:	8a 87       	std	Y+10, r24	; 0x0a
     d1a:	e8 85       	ldd	r30, Y+8	; 0x08
     d1c:	f9 85       	ldd	r31, Y+9	; 0x09
     d1e:	00 82       	st	Z, r0
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	99 87       	std	Y+9, r25	; 0x09
     d28:	88 87       	std	Y+8, r24	; 0x08
     d2a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d2c:	91 50       	subi	r25, 0x01	; 1
     d2e:	9c 87       	std	Y+12, r25	; 0x0c
     d30:	ec 85       	ldd	r30, Y+12	; 0x0c
     d32:	ee 23       	and	r30, r30
     d34:	51 f7       	brne	.-44     	; 0xd0a <CONTROL_startTimer+0x28>

	Timer_init(&Timer_config);
     d36:	ce 01       	movw	r24, r28
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Timer_init>
	Timer_setCallBack(CONTROL_TimerCallBackProcessing,TIMER1_ID);
     d3e:	85 e6       	ldi	r24, 0x65	; 101
     d40:	96 e0       	ldi	r25, 0x06	; 6
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	0e 94 2f 10 	call	0x205e	; 0x205e <Timer_setCallBack>
}
     d48:	2c 96       	adiw	r28, 0x0c	; 12
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <CONTROL_newPassword>:


void CONTROL_newPassword(void)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	g_matchStatus=PASS_MIS_MATCHED;
     d62:	10 92 7d 00 	sts	0x007D, r1
     d66:	2c c0       	rjmp	.+88     	; 0xdc0 <CONTROL_newPassword+0x66>

	while(g_matchStatus==PASS_MIS_MATCHED)
	{
		while(CONTROL_receiveCommand()!=SEND_FIRST_PASSWORD);
     d68:	0e 94 65 09 	call	0x12ca	; 0x12ca <CONTROL_receiveCommand>
     d6c:	86 3f       	cpi	r24, 0xF6	; 246
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <CONTROL_newPassword+0xe>

		CONTROL_receivePassword(g_receivedPassword);
     d70:	8a e8       	ldi	r24, 0x8A	; 138
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 e7 06 	call	0xdce	; 0xdce <CONTROL_receivePassword>

		while(CONTROL_receiveCommand()!=SEND_SECOND_PASSWORD);
     d78:	0e 94 65 09 	call	0x12ca	; 0x12ca <CONTROL_receiveCommand>
     d7c:	87 3f       	cpi	r24, 0xF7	; 247
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <CONTROL_newPassword+0x1e>


		CONTROL_receivePassword(g_confirmPassword);
     d80:	85 e8       	ldi	r24, 0x85	; 133
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 e7 06 	call	0xdce	; 0xdce <CONTROL_receivePassword>


		g_matchStatus=CONTROL_comparePasswords(g_receivedPassword,g_confirmPassword);
     d88:	8a e8       	ldi	r24, 0x8A	; 138
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	25 e8       	ldi	r18, 0x85	; 133
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	b9 01       	movw	r22, r18
     d92:	0e 94 87 07 	call	0xf0e	; 0xf0e <CONTROL_comparePasswords>
     d96:	80 93 7d 00 	sts	0x007D, r24

		if(g_matchStatus==PASS_MIS_MATCHED)
     d9a:	80 91 7d 00 	lds	r24, 0x007D
     d9e:	88 23       	and	r24, r24
     da0:	21 f4       	brne	.+8      	; 0xdaa <CONTROL_newPassword+0x50>
		{
			CONTROL_sendCommand(PASS_MIS_MATCHED);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 4d 09 	call	0x129a	; 0x129a <CONTROL_sendCommand>
     da8:	0b c0       	rjmp	.+22     	; 0xdc0 <CONTROL_newPassword+0x66>

		}
		else if(g_matchStatus==PASS_MATCHED)
     daa:	80 91 7d 00 	lds	r24, 0x007D
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	39 f4       	brne	.+14     	; 0xdc0 <CONTROL_newPassword+0x66>
		{
			CONTROL_savePassword(g_receivedPassword);
     db2:	8a e8       	ldi	r24, 0x8A	; 138
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 bc 07 	call	0xf78	; 0xf78 <CONTROL_savePassword>
			CONTROL_sendCommand(PASS_MATCHED);
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	0e 94 4d 09 	call	0x129a	; 0x129a <CONTROL_sendCommand>

void CONTROL_newPassword(void)
{
	g_matchStatus=PASS_MIS_MATCHED;

	while(g_matchStatus==PASS_MIS_MATCHED)
     dc0:	80 91 7d 00 	lds	r24, 0x007D
     dc4:	88 23       	and	r24, r24
     dc6:	81 f2       	breq	.-96     	; 0xd68 <CONTROL_newPassword+0xe>
			CONTROL_sendCommand(PASS_MATCHED);

		}

	}
}
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <CONTROL_receivePassword>:
 * Description :
 * Takes the Password which received from UART
 * and Store it in an array for later use
 */
void CONTROL_receivePassword(uint8 a_Password[])
{
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	61 97       	sbiw	r28, 0x11	; 17
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	99 8b       	std	Y+17, r25	; 0x11
     de8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     dea:	1f 86       	std	Y+15, r1	; 0x0f
     dec:	81 c0       	rjmp	.+258    	; 0xef0 <CONTROL_receivePassword+0x122>
	{
		a_Password[counter]=UART_recieveByte();
     dee:	8f 85       	ldd	r24, Y+15	; 0x0f
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	88 89       	ldd	r24, Y+16	; 0x10
     df6:	99 89       	ldd	r25, Y+17	; 0x11
     df8:	8c 01       	movw	r16, r24
     dfa:	02 0f       	add	r16, r18
     dfc:	13 1f       	adc	r17, r19
     dfe:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_recieveByte>
     e02:	f8 01       	movw	r30, r16
     e04:	80 83       	st	Z, r24
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 e2       	ldi	r26, 0x20	; 32
     e0c:	b1 e4       	ldi	r27, 0x41	; 65
     e0e:	8b 87       	std	Y+11, r24	; 0x0b
     e10:	9c 87       	std	Y+12, r25	; 0x0c
     e12:	ad 87       	std	Y+13, r26	; 0x0d
     e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e16:	6b 85       	ldd	r22, Y+11	; 0x0b
     e18:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a ef       	ldi	r20, 0xFA	; 250
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8f 83       	std	Y+7, r24	; 0x07
     e30:	98 87       	std	Y+8, r25	; 0x08
     e32:	a9 87       	std	Y+9, r26	; 0x09
     e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e36:	6f 81       	ldd	r22, Y+7	; 0x07
     e38:	78 85       	ldd	r23, Y+8	; 0x08
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <CONTROL_receivePassword+0x8a>
		__ticks = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <CONTROL_receivePassword+0x108>
	else if (__tmp > 65535)
     e58:	6f 81       	ldd	r22, Y+7	; 0x07
     e5a:	78 85       	ldd	r23, Y+8	; 0x08
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <CONTROL_receivePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <CONTROL_receivePassword+0xea>
     e9a:	88 ec       	ldi	r24, 0xC8	; 200
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <CONTROL_receivePassword+0xd8>
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f7       	brne	.-38     	; 0xe9a <CONTROL_receivePassword+0xcc>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <CONTROL_receivePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	6f 81       	ldd	r22, Y+7	; 0x07
     ec4:	78 85       	ldd	r23, Y+8	; 0x08
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <CONTROL_receivePassword+0x114>
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
 */
void CONTROL_receivePassword(uint8 a_Password[])
{
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     eea:	8f 85       	ldd	r24, Y+15	; 0x0f
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	8f 87       	std	Y+15, r24	; 0x0f
     ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef2:	85 30       	cpi	r24, 0x05	; 5
     ef4:	08 f4       	brcc	.+2      	; 0xef8 <CONTROL_receivePassword+0x12a>
     ef6:	7b cf       	rjmp	.-266    	; 0xdee <CONTROL_receivePassword+0x20>
	{
		a_Password[counter]=UART_recieveByte();

		_delay_ms(SEND_RECEIVE_TIME);
	}
}
     ef8:	61 96       	adiw	r28, 0x11	; 17
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <CONTROL_comparePasswords>:

uint8 CONTROL_comparePasswords(uint8 a_password1[], uint8 a_password2[])
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <CONTROL_comparePasswords+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <CONTROL_comparePasswords+0x8>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <CONTROL_comparePasswords+0xa>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9b 83       	std	Y+3, r25	; 0x03
     f1e:	8a 83       	std	Y+2, r24	; 0x02
     f20:	7d 83       	std	Y+5, r23	; 0x05
     f22:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter;

	for(counter=0;counter<PASSWORD_LENGTH;counter++)
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	19 c0       	rjmp	.+50     	; 0xf5a <CONTROL_comparePasswords+0x4c>
	{
		if(a_password1[counter]!= a_password2[counter])
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	9b 81       	ldd	r25, Y+3	; 0x03
     f32:	fc 01       	movw	r30, r24
     f34:	e2 0f       	add	r30, r18
     f36:	f3 1f       	adc	r31, r19
     f38:	40 81       	ld	r20, Z
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	fc 01       	movw	r30, r24
     f46:	e2 0f       	add	r30, r18
     f48:	f3 1f       	adc	r31, r19
     f4a:	80 81       	ld	r24, Z
     f4c:	48 17       	cp	r20, r24
     f4e:	11 f0       	breq	.+4      	; 0xf54 <CONTROL_comparePasswords+0x46>

		{
			return PASS_MIS_MATCHED;
     f50:	1e 82       	std	Y+6, r1	; 0x06
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <CONTROL_comparePasswords+0x56>

uint8 CONTROL_comparePasswords(uint8 a_password1[], uint8 a_password2[])
{
	uint8 counter;

	for(counter=0;counter<PASSWORD_LENGTH;counter++)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	85 30       	cpi	r24, 0x05	; 5
     f5e:	20 f3       	brcs	.-56     	; 0xf28 <CONTROL_comparePasswords+0x1a>

		{
			return PASS_MIS_MATCHED;
		}
	}
	return PASS_MATCHED;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	8e 83       	std	Y+6, r24	; 0x06
     f64:	8e 81       	ldd	r24, Y+6	; 0x06


}
     f66:	26 96       	adiw	r28, 0x06	; 6
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <CONTROL_savePassword>:


void CONTROL_savePassword(uint8 a_receivedPassword[])
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	61 97       	sbiw	r28, 0x11	; 17
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	99 8b       	std	Y+17, r25	; 0x11
     f8e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     f90:	1f 86       	std	Y+15, r1	; 0x0f
     f92:	88 c0       	rjmp	.+272    	; 0x10a4 <CONTROL_savePassword+0x12c>
	{
		 EEPROM_writeByte((0x0311+counter),a_receivedPassword[counter]);
     f94:	8f 85       	ldd	r24, Y+15	; 0x0f
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	8f 5e       	subi	r24, 0xEF	; 239
     f9c:	9c 4f       	sbci	r25, 0xFC	; 252
     f9e:	ac 01       	movw	r20, r24
     fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	88 89       	ldd	r24, Y+16	; 0x10
     fa8:	99 89       	ldd	r25, Y+17	; 0x11
     faa:	fc 01       	movw	r30, r24
     fac:	e2 0f       	add	r30, r18
     fae:	f3 1f       	adc	r31, r19
     fb0:	20 81       	ld	r18, Z
     fb2:	ca 01       	movw	r24, r20
     fb4:	62 2f       	mov	r22, r18
     fb6:	0e 94 00 0a 	call	0x1400	; 0x1400 <EEPROM_writeByte>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 ea       	ldi	r26, 0xA0	; 160
     fc0:	b2 e4       	ldi	r27, 0x42	; 66
     fc2:	8b 87       	std	Y+11, r24	; 0x0b
     fc4:	9c 87       	std	Y+12, r25	; 0x0c
     fc6:	ad 87       	std	Y+13, r26	; 0x0d
     fc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a ef       	ldi	r20, 0xFA	; 250
     fd8:	54 e4       	ldi	r21, 0x44	; 68
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8f 83       	std	Y+7, r24	; 0x07
     fe4:	98 87       	std	Y+8, r25	; 0x08
     fe6:	a9 87       	std	Y+9, r26	; 0x09
     fe8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fea:	6f 81       	ldd	r22, Y+7	; 0x07
     fec:	78 85       	ldd	r23, Y+8	; 0x08
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffe:	88 23       	and	r24, r24
    1000:	2c f4       	brge	.+10     	; 0x100c <CONTROL_savePassword+0x94>
		__ticks = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
    100a:	3f c0       	rjmp	.+126    	; 0x108a <CONTROL_savePassword+0x112>
	else if (__tmp > 65535)
    100c:	6f 81       	ldd	r22, Y+7	; 0x07
    100e:	78 85       	ldd	r23, Y+8	; 0x08
    1010:	89 85       	ldd	r24, Y+9	; 0x09
    1012:	9a 85       	ldd	r25, Y+10	; 0x0a
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	4c f5       	brge	.+82     	; 0x1076 <CONTROL_savePassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1024:	6b 85       	ldd	r22, Y+11	; 0x0b
    1026:	7c 85       	ldd	r23, Y+12	; 0x0c
    1028:	8d 85       	ldd	r24, Y+13	; 0x0d
    102a:	9e 85       	ldd	r25, Y+14	; 0x0e
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	0f c0       	rjmp	.+30     	; 0x106c <CONTROL_savePassword+0xf4>
    104e:	88 ec       	ldi	r24, 0xC8	; 200
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <CONTROL_savePassword+0xe2>
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	69 f7       	brne	.-38     	; 0x104e <CONTROL_savePassword+0xd6>
    1074:	14 c0       	rjmp	.+40     	; 0x109e <CONTROL_savePassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1076:	6f 81       	ldd	r22, Y+7	; 0x07
    1078:	78 85       	ldd	r23, Y+8	; 0x08
    107a:	89 85       	ldd	r24, Y+9	; 0x09
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 83       	std	Y+5, r24	; 0x05
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <CONTROL_savePassword+0x11e>
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01


void CONTROL_savePassword(uint8 a_receivedPassword[])
{
	uint8 counter;
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    109e:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	8f 87       	std	Y+15, r24	; 0x0f
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	85 30       	cpi	r24, 0x05	; 5
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <CONTROL_savePassword+0x134>
    10aa:	74 cf       	rjmp	.-280    	; 0xf94 <CONTROL_savePassword+0x1c>
		 EEPROM_writeByte((0x0311+counter),a_receivedPassword[counter]);
			_delay_ms(STORING_TIME);
	}


}
    10ac:	61 96       	adiw	r28, 0x11	; 17
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <CONTROL_readPassword>:
 * Description :
 * Load the Password from EEPROM
 * and Store it in an array
 */
void CONTROL_readPassword(uint8 a_storedPassword[])
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	61 97       	sbiw	r28, 0x11	; 17
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	99 8b       	std	Y+17, r25	; 0x11
    10d4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    10d6:	1f 86       	std	Y+15, r1	; 0x0f
    10d8:	86 c0       	rjmp	.+268    	; 0x11e6 <CONTROL_readPassword+0x128>
	{
		EEPROM_readByte((0x0311+counter),&a_storedPassword[counter]);
    10da:	8f 85       	ldd	r24, Y+15	; 0x0f
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	8f 5e       	subi	r24, 0xEF	; 239
    10e2:	9c 4f       	sbci	r25, 0xFC	; 252
    10e4:	ac 01       	movw	r20, r24
    10e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	88 89       	ldd	r24, Y+16	; 0x10
    10ee:	99 89       	ldd	r25, Y+17	; 0x11
    10f0:	28 0f       	add	r18, r24
    10f2:	39 1f       	adc	r19, r25
    10f4:	ca 01       	movw	r24, r20
    10f6:	b9 01       	movw	r22, r18
    10f8:	0e 94 41 0a 	call	0x1482	; 0x1482 <EEPROM_readByte>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a0 ea       	ldi	r26, 0xA0	; 160
    1102:	b2 e4       	ldi	r27, 0x42	; 66
    1104:	8b 87       	std	Y+11, r24	; 0x0b
    1106:	9c 87       	std	Y+12, r25	; 0x0c
    1108:	ad 87       	std	Y+13, r26	; 0x0d
    110a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110c:	6b 85       	ldd	r22, Y+11	; 0x0b
    110e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1110:	8d 85       	ldd	r24, Y+13	; 0x0d
    1112:	9e 85       	ldd	r25, Y+14	; 0x0e
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	4a ef       	ldi	r20, 0xFA	; 250
    111a:	54 e4       	ldi	r21, 0x44	; 68
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8f 83       	std	Y+7, r24	; 0x07
    1126:	98 87       	std	Y+8, r25	; 0x08
    1128:	a9 87       	std	Y+9, r26	; 0x09
    112a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112c:	6f 81       	ldd	r22, Y+7	; 0x07
    112e:	78 85       	ldd	r23, Y+8	; 0x08
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <CONTROL_readPassword+0x90>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <CONTROL_readPassword+0x10e>
	else if (__tmp > 65535)
    114e:	6f 81       	ldd	r22, Y+7	; 0x07
    1150:	78 85       	ldd	r23, Y+8	; 0x08
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <CONTROL_readPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	6b 85       	ldd	r22, Y+11	; 0x0b
    1168:	7c 85       	ldd	r23, Y+12	; 0x0c
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <CONTROL_readPassword+0xf0>
    1190:	88 ec       	ldi	r24, 0xC8	; 200
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <CONTROL_readPassword+0xde>
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <CONTROL_readPassword+0xd2>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <CONTROL_readPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ba:	78 85       	ldd	r23, Y+8	; 0x08
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <CONTROL_readPassword+0x11a>
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
 * and Store it in an array
 */
void CONTROL_readPassword(uint8 a_storedPassword[])
{
	uint8 counter;
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    11e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	8f 87       	std	Y+15, r24	; 0x0f
    11e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e8:	85 30       	cpi	r24, 0x05	; 5
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <CONTROL_readPassword+0x130>
    11ec:	76 cf       	rjmp	.-276    	; 0x10da <CONTROL_readPassword+0x1c>

	}



}
    11ee:	61 96       	adiw	r28, 0x11	; 17
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <CONTROL_openingDoor>:


void CONTROL_openingDoor(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	CONTROL_startTimer();
    1208:	0e 94 71 06 	call	0xce2	; 0xce2 <CONTROL_startTimer>
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <CONTROL_openingDoor+0x14>
	while(g_tick!=OPEN_DOOR_TIME)
	{
		DcMotor_Rotate(CLOCKWISE);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 97 09 	call	0x132e	; 0x132e <DcMotor_Rotate>


void CONTROL_openingDoor(void)
{
	CONTROL_startTimer();
	while(g_tick!=OPEN_DOOR_TIME)
    1214:	80 91 7c 00 	lds	r24, 0x007C
    1218:	8f 30       	cpi	r24, 0x0F	; 15
    121a:	c9 f7       	brne	.-14     	; 0x120e <CONTROL_openingDoor+0xe>
	{
		DcMotor_Rotate(CLOCKWISE);
	}
	g_tick=0;
    121c:	10 92 7c 00 	sts	0x007C, r1
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <CONTROL_openingDoor+0x28>

	while(g_tick != HOLD_DOOR_TIME)
	{
		DcMotor_Rotate(STOP);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	0e 94 97 09 	call	0x132e	; 0x132e <DcMotor_Rotate>
	{
		DcMotor_Rotate(CLOCKWISE);
	}
	g_tick=0;

	while(g_tick != HOLD_DOOR_TIME)
    1228:	80 91 7c 00 	lds	r24, 0x007C
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	c9 f7       	brne	.-14     	; 0x1222 <CONTROL_openingDoor+0x22>
	{
		DcMotor_Rotate(STOP);
	}
	g_tick=0;
    1230:	10 92 7c 00 	sts	0x007C, r1
    1234:	03 c0       	rjmp	.+6      	; 0x123c <CONTROL_openingDoor+0x3c>
	while(g_tick!=CLOSE_DOOR_TIME)
	{
		DcMotor_Rotate(ANTI_CLOCKWISE);
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	0e 94 97 09 	call	0x132e	; 0x132e <DcMotor_Rotate>
	while(g_tick != HOLD_DOOR_TIME)
	{
		DcMotor_Rotate(STOP);
	}
	g_tick=0;
	while(g_tick!=CLOSE_DOOR_TIME)
    123c:	80 91 7c 00 	lds	r24, 0x007C
    1240:	8f 30       	cpi	r24, 0x0F	; 15
    1242:	c9 f7       	brne	.-14     	; 0x1236 <CONTROL_openingDoor+0x36>
	{
		DcMotor_Rotate(ANTI_CLOCKWISE);
	}

	DcMotor_Rotate(STOP);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	0e 94 97 09 	call	0x132e	; 0x132e <DcMotor_Rotate>
    Timer_DeInit(TIMER1_ID); /* Stop the timer */
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <Timer_DeInit>
}
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <CONTROL_wrongPassword>:



void CONTROL_wrongPassword(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	g_passwordMistakes++;
    125e:	80 91 7e 00 	lds	r24, 0x007E
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 7e 00 	sts	0x007E, r24
	if(g_passwordMistakes==MAX_NUM_OF_MISTAKES)
    1268:	80 91 7e 00 	lds	r24, 0x007E
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	81 f4       	brne	.+32     	; 0x1290 <CONTROL_wrongPassword+0x3a>
	{
		CONTROL_startTimer();
    1270:	0e 94 71 06 	call	0xce2	; 0xce2 <CONTROL_startTimer>
    1274:	02 c0       	rjmp	.+4      	; 0x127a <CONTROL_wrongPassword+0x24>
		while(g_tick !=WARNING_TIME)
		{
			Buzzer_on();
    1276:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <Buzzer_on>
{
	g_passwordMistakes++;
	if(g_passwordMistakes==MAX_NUM_OF_MISTAKES)
	{
		CONTROL_startTimer();
		while(g_tick !=WARNING_TIME)
    127a:	80 91 7c 00 	lds	r24, 0x007C
    127e:	8c 33       	cpi	r24, 0x3C	; 60
    1280:	d1 f7       	brne	.-12     	; 0x1276 <CONTROL_wrongPassword+0x20>
		{
			Buzzer_on();

		}
		g_tick=0;
    1282:	10 92 7c 00 	sts	0x007C, r1
		g_passwordMistakes=0;
    1286:	10 92 7e 00 	sts	0x007E, r1


	    Timer_DeInit(TIMER1_ID); /* Stop the timer */
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <Timer_DeInit>



	}
	Buzzer_off();
    1290:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Buzzer_off>


}
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <CONTROL_sendCommand>:

void CONTROL_sendCommand(uint8 g_command)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY_TO_SEND);
    12a6:	83 ef       	ldi	r24, 0xF3	; 243
    12a8:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_sendByte>
	while(UART_recieveByte()!= READY_TO_RECEIVE);
    12ac:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_recieveByte>
    12b0:	84 3f       	cpi	r24, 0xF4	; 244
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <CONTROL_sendCommand+0x12>
	UART_sendByte(g_command);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_sendByte>
	while(UART_recieveByte()!=RECEIVE_DONE);
    12ba:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_recieveByte>
    12be:	85 3f       	cpi	r24, 0xF5	; 245
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <CONTROL_sendCommand+0x20>

}
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <CONTROL_receiveCommand>:
uint8 CONTROL_receiveCommand(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=READY_TO_SEND);
    12d2:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_recieveByte>
    12d6:	83 3f       	cpi	r24, 0xF3	; 243
    12d8:	e1 f7       	brne	.-8      	; 0x12d2 <CONTROL_receiveCommand+0x8>
	UART_sendByte(READY_TO_RECEIVE);
    12da:	84 ef       	ldi	r24, 0xF4	; 244
    12dc:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_sendByte>
	g_command=UART_recieveByte();
    12e0:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_recieveByte>
    12e4:	80 93 94 00 	sts	0x0094, r24
	UART_sendByte(RECEIVE_DONE);
    12e8:	85 ef       	ldi	r24, 0xF5	; 245
    12ea:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_sendByte>
	return g_command;
    12ee:	80 91 94 00 	lds	r24, 0x0094


}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DcMotor_Init>:
#include "gpio.h"
#include "common_macros.h"


void DcMotor_Init(void)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT); //PB0 output pin for motor
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);//PB1 output pin for motor
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	41 e0       	ldi	r20, 0x01	; 1
    1310:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_setupPinDirection>

	//GPIO_writePin(PORTB_ID,PIN3_ID,LOGIC_HIGH);

	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);  //stop motor at beginning
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>

}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DcMotor_Rotate+0x6>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3b 83       	std	Y+3, r19	; 0x03
    1344:	2a 83       	std	Y+2, r18	; 0x02
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	a1 f0       	breq	.+40     	; 0x1378 <DcMotor_Rotate+0x4a>
    1350:	2a 81       	ldd	r18, Y+2	; 0x02
    1352:	3b 81       	ldd	r19, Y+3	; 0x03
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	d1 f0       	breq	.+52     	; 0x138e <DcMotor_Rotate+0x60>
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	01 f5       	brne	.+64     	; 0x13a2 <DcMotor_Rotate+0x74>
	{
	case 0:
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>
    1376:	15 c0       	rjmp	.+42     	; 0x13a2 <DcMotor_Rotate+0x74>
		break;
	case 1:
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>
    138c:	0a c0       	rjmp	.+20     	; 0x13a2 <DcMotor_Rotate+0x74>
		break;
	case 2:
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>
		break;

	}


}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <Buzzer_init>:
/**************************************************************************
 *                      Functions Definition
 **************************************************************************/

void Buzzer_init()
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	//make buzzer output
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_setupPinDirection>

	//set buzzer off
	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>



}
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <Buzzer_on>:
void Buzzer_on(void)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>


}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <Buzzer_off>:
void Buzzer_off(void)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <GPIO_writePin>


}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"

// single message
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <EEPROM_writeByte+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <EEPROM_writeByte+0x8>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1412:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1416:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    141a:	88 30       	cpi	r24, 0x08	; 8
    141c:	11 f0       	breq	.+4      	; 0x1422 <EEPROM_writeByte+0x22>
        return ERROR;
    141e:	1c 82       	std	Y+4, r1	; 0x04
    1420:	28 c0       	rjmp	.+80     	; 0x1472 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	80 70       	andi	r24, 0x00	; 0
    1428:	97 70       	andi	r25, 0x07	; 7
    142a:	88 0f       	add	r24, r24
    142c:	89 2f       	mov	r24, r25
    142e:	88 1f       	adc	r24, r24
    1430:	99 0b       	sbc	r25, r25
    1432:	91 95       	neg	r25
    1434:	80 6a       	ori	r24, 0xA0	; 160
    1436:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    143a:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    143e:	88 31       	cpi	r24, 0x18	; 24
    1440:	11 f0       	breq	.+4      	; 0x1446 <EEPROM_writeByte+0x46>
        return ERROR; 
    1442:	1c 82       	std	Y+4, r1	; 0x04
    1444:	16 c0       	rjmp	.+44     	; 0x1472 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    144c:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    1450:	88 32       	cpi	r24, 0x28	; 40
    1452:	11 f0       	breq	.+4      	; 0x1458 <EEPROM_writeByte+0x58>
        return ERROR;
    1454:	1c 82       	std	Y+4, r1	; 0x04
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    145e:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    1462:	88 32       	cpi	r24, 0x28	; 40
    1464:	11 f0       	breq	.+4      	; 0x146a <EEPROM_writeByte+0x6a>
        return ERROR;
    1466:	1c 82       	std	Y+4, r1	; 0x04
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    146a:	0e 94 75 11 	call	0x22ea	; 0x22ea <TWI_stop>
	
    return SUCCESS;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	8c 83       	std	Y+4, r24	; 0x04
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <EEPROM_readByte+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <EEPROM_readByte+0x8>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	7c 83       	std	Y+4, r23	; 0x04
    1496:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1498:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_start>
    if (TWI_getStatus() != TWI_START)
    149c:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <EEPROM_readByte+0x26>
        return ERROR;
    14a4:	1d 82       	std	Y+5, r1	; 0x05
    14a6:	44 c0       	rjmp	.+136    	; 0x1530 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	80 70       	andi	r24, 0x00	; 0
    14ae:	97 70       	andi	r25, 0x07	; 7
    14b0:	88 0f       	add	r24, r24
    14b2:	89 2f       	mov	r24, r25
    14b4:	88 1f       	adc	r24, r24
    14b6:	99 0b       	sbc	r25, r25
    14b8:	91 95       	neg	r25
    14ba:	80 6a       	ori	r24, 0xA0	; 160
    14bc:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14c0:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    14c4:	88 31       	cpi	r24, 0x18	; 24
    14c6:	11 f0       	breq	.+4      	; 0x14cc <EEPROM_readByte+0x4a>
        return ERROR;
    14c8:	1d 82       	std	Y+5, r1	; 0x05
    14ca:	32 c0       	rjmp	.+100    	; 0x1530 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14d2:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    14d6:	88 32       	cpi	r24, 0x28	; 40
    14d8:	11 f0       	breq	.+4      	; 0x14de <EEPROM_readByte+0x5c>
        return ERROR;
    14da:	1d 82       	std	Y+5, r1	; 0x05
    14dc:	29 c0       	rjmp	.+82     	; 0x1530 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    14de:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    14e2:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    14e6:	80 31       	cpi	r24, 0x10	; 16
    14e8:	11 f0       	breq	.+4      	; 0x14ee <EEPROM_readByte+0x6c>
        return ERROR;
    14ea:	1d 82       	std	Y+5, r1	; 0x05
    14ec:	21 c0       	rjmp	.+66     	; 0x1530 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	80 70       	andi	r24, 0x00	; 0
    14f4:	97 70       	andi	r25, 0x07	; 7
    14f6:	88 0f       	add	r24, r24
    14f8:	89 2f       	mov	r24, r25
    14fa:	88 1f       	adc	r24, r24
    14fc:	99 0b       	sbc	r25, r25
    14fe:	91 95       	neg	r25
    1500:	81 6a       	ori	r24, 0xA1	; 161
    1502:	0e 94 80 11 	call	0x2300	; 0x2300 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1506:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    150a:	80 34       	cpi	r24, 0x40	; 64
    150c:	11 f0       	breq	.+4      	; 0x1512 <EEPROM_readByte+0x90>
        return ERROR;
    150e:	1d 82       	std	Y+5, r1	; 0x05
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1512:	0e 94 aa 11 	call	0x2354	; 0x2354 <TWI_readByteWithNACK>
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    151c:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_getStatus>
    1520:	88 35       	cpi	r24, 0x58	; 88
    1522:	11 f0       	breq	.+4      	; 0x1528 <EEPROM_readByte+0xa6>
        return ERROR;
    1524:	1d 82       	std	Y+5, r1	; 0x05
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1528:	0e 94 75 11 	call	0x22ea	; 0x22ea <TWI_stop>

    return SUCCESS;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <GPIO_setupPinDirection+0x6>
    1548:	00 d0       	rcall	.+0      	; 0x154a <GPIO_setupPinDirection+0x8>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	6a 83       	std	Y+2, r22	; 0x02
    1554:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 30       	cpi	r24, 0x08	; 8
    155a:	08 f0       	brcs	.+2      	; 0x155e <GPIO_setupPinDirection+0x1c>
    155c:	d5 c0       	rjmp	.+426    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	84 30       	cpi	r24, 0x04	; 4
    1562:	08 f0       	brcs	.+2      	; 0x1566 <GPIO_setupPinDirection+0x24>
    1564:	d1 c0       	rjmp	.+418    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3d 83       	std	Y+5, r19	; 0x05
    156e:	2c 83       	std	Y+4, r18	; 0x04
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <GPIO_setupPinDirection+0x3a>
    157a:	43 c0       	rjmp	.+134    	; 0x1602 <GPIO_setupPinDirection+0xc0>
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	2c f4       	brge	.+10     	; 0x1590 <GPIO_setupPinDirection+0x4e>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	71 f0       	breq	.+28     	; 0x15aa <GPIO_setupPinDirection+0x68>
    158e:	bc c0       	rjmp	.+376    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
    1590:	2c 81       	ldd	r18, Y+4	; 0x04
    1592:	3d 81       	ldd	r19, Y+5	; 0x05
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <GPIO_setupPinDirection+0x5a>
    159a:	5f c0       	rjmp	.+190    	; 0x165a <GPIO_setupPinDirection+0x118>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <GPIO_setupPinDirection+0x66>
    15a6:	85 c0       	rjmp	.+266    	; 0x16b2 <GPIO_setupPinDirection+0x170>
    15a8:	af c0       	rjmp	.+350    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	a1 f4       	brne	.+40     	; 0x15d8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15b0:	aa e3       	ldi	r26, 0x3A	; 58
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ea e3       	ldi	r30, 0x3A	; 58
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <GPIO_setupPinDirection+0x8c>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <GPIO_setupPinDirection+0x88>
    15d2:	84 2b       	or	r24, r20
    15d4:	8c 93       	st	X, r24
    15d6:	98 c0       	rjmp	.+304    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15d8:	aa e3       	ldi	r26, 0x3A	; 58
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ea e3       	ldi	r30, 0x3A	; 58
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_setupPinDirection+0xb4>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_setupPinDirection+0xb0>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	83 c0       	rjmp	.+262    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	a1 f4       	brne	.+40     	; 0x1630 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1608:	a7 e3       	ldi	r26, 0x37	; 55
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e7 e3       	ldi	r30, 0x37	; 55
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <GPIO_setupPinDirection+0xe4>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <GPIO_setupPinDirection+0xe0>
    162a:	84 2b       	or	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	6c c0       	rjmp	.+216    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1630:	a7 e3       	ldi	r26, 0x37	; 55
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e7 e3       	ldi	r30, 0x37	; 55
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <GPIO_setupPinDirection+0x10c>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <GPIO_setupPinDirection+0x108>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	57 c0       	rjmp	.+174    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	a1 f4       	brne	.+40     	; 0x1688 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1660:	a4 e3       	ldi	r26, 0x34	; 52
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e4 e3       	ldi	r30, 0x34	; 52
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <GPIO_setupPinDirection+0x13c>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <GPIO_setupPinDirection+0x138>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	40 c0       	rjmp	.+128    	; 0x1708 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1688:	a4 e3       	ldi	r26, 0x34	; 52
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_setupPinDirection+0x164>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_setupPinDirection+0x160>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	2b c0       	rjmp	.+86     	; 0x1708 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	a1 f4       	brne	.+40     	; 0x16e0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16b8:	a1 e3       	ldi	r26, 0x31	; 49
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e1 e3       	ldi	r30, 0x31	; 49
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <GPIO_setupPinDirection+0x194>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <GPIO_setupPinDirection+0x190>
    16da:	84 2b       	or	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16e0:	a1 e3       	ldi	r26, 0x31	; 49
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e1 e3       	ldi	r30, 0x31	; 49
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <GPIO_setupPinDirection+0x1bc>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <GPIO_setupPinDirection+0x1b8>
    1702:	80 95       	com	r24
    1704:	84 23       	and	r24, r20
    1706:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <GPIO_writePin+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <GPIO_writePin+0x8>
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	6a 83       	std	Y+2, r22	; 0x02
    172a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	88 30       	cpi	r24, 0x08	; 8
    1730:	08 f0       	brcs	.+2      	; 0x1734 <GPIO_writePin+0x1c>
    1732:	d5 c0       	rjmp	.+426    	; 0x18de <GPIO_writePin+0x1c6>
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	84 30       	cpi	r24, 0x04	; 4
    1738:	08 f0       	brcs	.+2      	; 0x173c <GPIO_writePin+0x24>
    173a:	d1 c0       	rjmp	.+418    	; 0x18de <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3d 83       	std	Y+5, r19	; 0x05
    1744:	2c 83       	std	Y+4, r18	; 0x04
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <GPIO_writePin+0x3a>
    1750:	43 c0       	rjmp	.+134    	; 0x17d8 <GPIO_writePin+0xc0>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	2c f4       	brge	.+10     	; 0x1766 <GPIO_writePin+0x4e>
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	9d 81       	ldd	r25, Y+5	; 0x05
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	71 f0       	breq	.+28     	; 0x1780 <GPIO_writePin+0x68>
    1764:	bc c0       	rjmp	.+376    	; 0x18de <GPIO_writePin+0x1c6>
    1766:	2c 81       	ldd	r18, Y+4	; 0x04
    1768:	3d 81       	ldd	r19, Y+5	; 0x05
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <GPIO_writePin+0x5a>
    1770:	5f c0       	rjmp	.+190    	; 0x1830 <GPIO_writePin+0x118>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <GPIO_writePin+0x66>
    177c:	85 c0       	rjmp	.+266    	; 0x1888 <GPIO_writePin+0x170>
    177e:	af c0       	rjmp	.+350    	; 0x18de <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	a1 f4       	brne	.+40     	; 0x17ae <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1786:	ab e3       	ldi	r26, 0x3B	; 59
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	eb e3       	ldi	r30, 0x3B	; 59
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <GPIO_writePin+0x8c>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <GPIO_writePin+0x88>
    17a8:	84 2b       	or	r24, r20
    17aa:	8c 93       	st	X, r24
    17ac:	98 c0       	rjmp	.+304    	; 0x18de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17ae:	ab e3       	ldi	r26, 0x3B	; 59
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	eb e3       	ldi	r30, 0x3B	; 59
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_writePin+0xb4>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_writePin+0xb0>
    17d0:	80 95       	com	r24
    17d2:	84 23       	and	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	83 c0       	rjmp	.+262    	; 0x18de <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	a1 f4       	brne	.+40     	; 0x1806 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17de:	a8 e3       	ldi	r26, 0x38	; 56
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e8 e3       	ldi	r30, 0x38	; 56
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <GPIO_writePin+0xe4>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <GPIO_writePin+0xe0>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	6c c0       	rjmp	.+216    	; 0x18de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1806:	a8 e3       	ldi	r26, 0x38	; 56
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e8 e3       	ldi	r30, 0x38	; 56
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <GPIO_writePin+0x10c>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <GPIO_writePin+0x108>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	57 c0       	rjmp	.+174    	; 0x18de <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	a1 f4       	brne	.+40     	; 0x185e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1836:	a5 e3       	ldi	r26, 0x35	; 53
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e3       	ldi	r30, 0x35	; 53
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <GPIO_writePin+0x13c>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <GPIO_writePin+0x138>
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	40 c0       	rjmp	.+128    	; 0x18de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    185e:	a5 e3       	ldi	r26, 0x35	; 53
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e3       	ldi	r30, 0x35	; 53
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GPIO_writePin+0x164>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <GPIO_writePin+0x160>
    1880:	80 95       	com	r24
    1882:	84 23       	and	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	2b c0       	rjmp	.+86     	; 0x18de <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	a1 f4       	brne	.+40     	; 0x18b6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    188e:	a2 e3       	ldi	r26, 0x32	; 50
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e2 e3       	ldi	r30, 0x32	; 50
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <GPIO_writePin+0x194>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <GPIO_writePin+0x190>
    18b0:	84 2b       	or	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18b6:	a2 e3       	ldi	r26, 0x32	; 50
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e2 e3       	ldi	r30, 0x32	; 50
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <GPIO_writePin+0x1bc>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <GPIO_writePin+0x1b8>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <GPIO_readPin+0x6>
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <GPIO_readPin+0x8>
    18f6:	0f 92       	push	r0
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	8a 83       	std	Y+2, r24	; 0x02
    18fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1900:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	08 f0       	brcs	.+2      	; 0x190a <GPIO_readPin+0x1c>
    1908:	84 c0       	rjmp	.+264    	; 0x1a12 <GPIO_readPin+0x124>
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	08 f0       	brcs	.+2      	; 0x1912 <GPIO_readPin+0x24>
    1910:	80 c0       	rjmp	.+256    	; 0x1a12 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	3d 83       	std	Y+5, r19	; 0x05
    191a:	2c 83       	std	Y+4, r18	; 0x04
    191c:	4c 81       	ldd	r20, Y+4	; 0x04
    191e:	5d 81       	ldd	r21, Y+5	; 0x05
    1920:	41 30       	cpi	r20, 0x01	; 1
    1922:	51 05       	cpc	r21, r1
    1924:	79 f1       	breq	.+94     	; 0x1984 <GPIO_readPin+0x96>
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	91 05       	cpc	r25, r1
    192e:	34 f4       	brge	.+12     	; 0x193c <GPIO_readPin+0x4e>
    1930:	2c 81       	ldd	r18, Y+4	; 0x04
    1932:	3d 81       	ldd	r19, Y+5	; 0x05
    1934:	21 15       	cp	r18, r1
    1936:	31 05       	cpc	r19, r1
    1938:	69 f0       	breq	.+26     	; 0x1954 <GPIO_readPin+0x66>
    193a:	6b c0       	rjmp	.+214    	; 0x1a12 <GPIO_readPin+0x124>
    193c:	4c 81       	ldd	r20, Y+4	; 0x04
    193e:	5d 81       	ldd	r21, Y+5	; 0x05
    1940:	42 30       	cpi	r20, 0x02	; 2
    1942:	51 05       	cpc	r21, r1
    1944:	b9 f1       	breq	.+110    	; 0x19b4 <GPIO_readPin+0xc6>
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	83 30       	cpi	r24, 0x03	; 3
    194c:	91 05       	cpc	r25, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <GPIO_readPin+0x64>
    1950:	49 c0       	rjmp	.+146    	; 0x19e4 <GPIO_readPin+0xf6>
    1952:	5f c0       	rjmp	.+190    	; 0x1a12 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1954:	e9 e3       	ldi	r30, 0x39	; 57
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a9 01       	movw	r20, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <GPIO_readPin+0x7e>
    1968:	55 95       	asr	r21
    196a:	47 95       	ror	r20
    196c:	8a 95       	dec	r24
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <GPIO_readPin+0x7a>
    1970:	ca 01       	movw	r24, r20
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	88 23       	and	r24, r24
    1978:	19 f0       	breq	.+6      	; 0x1980 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	49 c0       	rjmp	.+146    	; 0x1a12 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1980:	19 82       	std	Y+1, r1	; 0x01
    1982:	47 c0       	rjmp	.+142    	; 0x1a12 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1984:	e6 e3       	ldi	r30, 0x36	; 54
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_readPin+0xae>
    1998:	55 95       	asr	r21
    199a:	47 95       	ror	r20
    199c:	8a 95       	dec	r24
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_readPin+0xaa>
    19a0:	ca 01       	movw	r24, r20
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	88 23       	and	r24, r24
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	31 c0       	rjmp	.+98     	; 0x1a12 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	2f c0       	rjmp	.+94     	; 0x1a12 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19b4:	e3 e3       	ldi	r30, 0x33	; 51
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a9 01       	movw	r20, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <GPIO_readPin+0xde>
    19c8:	55 95       	asr	r21
    19ca:	47 95       	ror	r20
    19cc:	8a 95       	dec	r24
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <GPIO_readPin+0xda>
    19d0:	ca 01       	movw	r24, r20
    19d2:	81 70       	andi	r24, 0x01	; 1
    19d4:	90 70       	andi	r25, 0x00	; 0
    19d6:	88 23       	and	r24, r24
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	19 c0       	rjmp	.+50     	; 0x1a12 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e0:	19 82       	std	Y+1, r1	; 0x01
    19e2:	17 c0       	rjmp	.+46     	; 0x1a12 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19e4:	e0 e3       	ldi	r30, 0x30	; 48
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a9 01       	movw	r20, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <GPIO_readPin+0x10e>
    19f8:	55 95       	asr	r21
    19fa:	47 95       	ror	r20
    19fc:	8a 95       	dec	r24
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <GPIO_readPin+0x10a>
    1a00:	ca 01       	movw	r24, r20
    1a02:	81 70       	andi	r24, 0x01	; 1
    1a04:	90 70       	andi	r25, 0x00	; 0
    1a06:	88 23       	and	r24, r24
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a10:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <GPIO_setupPortDirection+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <GPIO_setupPortDirection+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	84 30       	cpi	r24, 0x04	; 4
    1a38:	90 f5       	brcc	.+100    	; 0x1a9e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3c 83       	std	Y+4, r19	; 0x04
    1a42:	2b 83       	std	Y+3, r18	; 0x03
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	d1 f0       	breq	.+52     	; 0x1a82 <GPIO_setupPortDirection+0x5e>
    1a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a50:	3c 81       	ldd	r19, Y+4	; 0x04
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <GPIO_setupPortDirection+0x3e>
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	61 f0       	breq	.+24     	; 0x1a78 <GPIO_setupPortDirection+0x54>
    1a60:	1e c0       	rjmp	.+60     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	81 f0       	breq	.+32     	; 0x1a8c <GPIO_setupPortDirection+0x68>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	81 f0       	breq	.+32     	; 0x1a96 <GPIO_setupPortDirection+0x72>
    1a76:	13 c0       	rjmp	.+38     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a78:	ea e3       	ldi	r30, 0x3A	; 58
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	80 83       	st	Z, r24
    1a80:	0e c0       	rjmp	.+28     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a82:	e7 e3       	ldi	r30, 0x37	; 55
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a8c:	e4 e3       	ldi	r30, 0x34	; 52
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	80 83       	st	Z, r24
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a96:	e1 e3       	ldi	r30, 0x31	; 49
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <GPIO_writePort+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <GPIO_writePort+0x8>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	90 f5       	brcc	.+100    	; 0x1b26 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	3c 83       	std	Y+4, r19	; 0x04
    1aca:	2b 83       	std	Y+3, r18	; 0x03
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	d1 f0       	breq	.+52     	; 0x1b0a <GPIO_writePort+0x5e>
    1ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	2c f4       	brge	.+10     	; 0x1aea <GPIO_writePort+0x3e>
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <GPIO_writePort+0x54>
    1ae8:	1e c0       	rjmp	.+60     	; 0x1b26 <GPIO_writePort+0x7a>
    1aea:	2b 81       	ldd	r18, Y+3	; 0x03
    1aec:	3c 81       	ldd	r19, Y+4	; 0x04
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <GPIO_writePort+0x68>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	91 05       	cpc	r25, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <GPIO_writePort+0x72>
    1afe:	13 c0       	rjmp	.+38     	; 0x1b26 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b00:	eb e3       	ldi	r30, 0x3B	; 59
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 83       	st	Z, r24
    1b08:	0e c0       	rjmp	.+28     	; 0x1b26 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b0a:	e8 e3       	ldi	r30, 0x38	; 56
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 83       	st	Z, r24
    1b12:	09 c0       	rjmp	.+18     	; 0x1b26 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b14:	e5 e3       	ldi	r30, 0x35	; 53
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	80 83       	st	Z, r24
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <GPIO_readPort+0x6>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <GPIO_readPort+0x8>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b42:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	84 30       	cpi	r24, 0x04	; 4
    1b48:	90 f5       	brcc	.+100    	; 0x1bae <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3c 83       	std	Y+4, r19	; 0x04
    1b52:	2b 83       	std	Y+3, r18	; 0x03
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	d1 f0       	breq	.+52     	; 0x1b92 <GPIO_readPort+0x5e>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <GPIO_readPort+0x3e>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <GPIO_readPort+0x54>
    1b70:	1e c0       	rjmp	.+60     	; 0x1bae <GPIO_readPort+0x7a>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	81 f0       	breq	.+32     	; 0x1b9c <GPIO_readPort+0x68>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	91 05       	cpc	r25, r1
    1b84:	81 f0       	breq	.+32     	; 0x1ba6 <GPIO_readPort+0x72>
    1b86:	13 c0       	rjmp	.+38     	; 0x1bae <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b88:	e9 e3       	ldi	r30, 0x39	; 57
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	0e c0       	rjmp	.+28     	; 0x1bae <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b92:	e6 e3       	ldi	r30, 0x36	; 54
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	09 c0       	rjmp	.+18     	; 0x1bae <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b9c:	e3 e3       	ldi	r30, 0x33	; 51
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ba6:	e0 e3       	ldi	r30, 0x30	; 48
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <__vector_11>:
 *
 ***************************************************************************/

/*******************************TIMER0************************************/
ISR(TIMER0_OVF_vect)
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	2f 93       	push	r18
    1bca:	3f 93       	push	r19
    1bcc:	4f 93       	push	r20
    1bce:	5f 93       	push	r21
    1bd0:	6f 93       	push	r22
    1bd2:	7f 93       	push	r23
    1bd4:	8f 93       	push	r24
    1bd6:	9f 93       	push	r25
    1bd8:	af 93       	push	r26
    1bda:	bf 93       	push	r27
    1bdc:	ef 93       	push	r30
    1bde:	ff 93       	push	r31
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1be8:	80 91 7f 00 	lds	r24, 0x007F
    1bec:	90 91 80 00 	lds	r25, 0x0080
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	29 f0       	breq	.+10     	; 0x1bfe <__vector_11+0x40>
	{
		(*g_Timer0_callBackPtr)();
    1bf4:	e0 91 7f 00 	lds	r30, 0x007F
    1bf8:	f0 91 80 00 	lds	r31, 0x0080
    1bfc:	09 95       	icall
	}
}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	ff 91       	pop	r31
    1c04:	ef 91       	pop	r30
    1c06:	bf 91       	pop	r27
    1c08:	af 91       	pop	r26
    1c0a:	9f 91       	pop	r25
    1c0c:	8f 91       	pop	r24
    1c0e:	7f 91       	pop	r23
    1c10:	6f 91       	pop	r22
    1c12:	5f 91       	pop	r21
    1c14:	4f 91       	pop	r20
    1c16:	3f 91       	pop	r19
    1c18:	2f 91       	pop	r18
    1c1a:	0f 90       	pop	r0
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	0f 90       	pop	r0
    1c20:	1f 90       	pop	r1
    1c22:	18 95       	reti

00001c24 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1c24:	1f 92       	push	r1
    1c26:	0f 92       	push	r0
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	0f 92       	push	r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	4f 93       	push	r20
    1c34:	5f 93       	push	r21
    1c36:	6f 93       	push	r22
    1c38:	7f 93       	push	r23
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	af 93       	push	r26
    1c40:	bf 93       	push	r27
    1c42:	ef 93       	push	r30
    1c44:	ff 93       	push	r31
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1c4e:	80 91 7f 00 	lds	r24, 0x007F
    1c52:	90 91 80 00 	lds	r25, 0x0080
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	29 f0       	breq	.+10     	; 0x1c64 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c5a:	e0 91 7f 00 	lds	r30, 0x007F
    1c5e:	f0 91 80 00 	lds	r31, 0x0080
    1c62:	09 95       	icall
	}
}
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	4f 91       	pop	r20
    1c7c:	3f 91       	pop	r19
    1c7e:	2f 91       	pop	r18
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti

00001c8a <__vector_9>:

/********************************TIMER1********************************/
ISR(TIMER1_OVF_vect)
{
    1c8a:	1f 92       	push	r1
    1c8c:	0f 92       	push	r0
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	0f 92       	push	r0
    1c92:	11 24       	eor	r1, r1
    1c94:	2f 93       	push	r18
    1c96:	3f 93       	push	r19
    1c98:	4f 93       	push	r20
    1c9a:	5f 93       	push	r21
    1c9c:	6f 93       	push	r22
    1c9e:	7f 93       	push	r23
    1ca0:	8f 93       	push	r24
    1ca2:	9f 93       	push	r25
    1ca4:	af 93       	push	r26
    1ca6:	bf 93       	push	r27
    1ca8:	ef 93       	push	r30
    1caa:	ff 93       	push	r31
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1cb4:	80 91 81 00 	lds	r24, 0x0081
    1cb8:	90 91 82 00 	lds	r25, 0x0082
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1cc0:	e0 91 81 00 	lds	r30, 0x0081
    1cc4:	f0 91 82 00 	lds	r31, 0x0082
    1cc8:	09 95       	icall
	}
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	ff 91       	pop	r31
    1cd0:	ef 91       	pop	r30
    1cd2:	bf 91       	pop	r27
    1cd4:	af 91       	pop	r26
    1cd6:	9f 91       	pop	r25
    1cd8:	8f 91       	pop	r24
    1cda:	7f 91       	pop	r23
    1cdc:	6f 91       	pop	r22
    1cde:	5f 91       	pop	r21
    1ce0:	4f 91       	pop	r20
    1ce2:	3f 91       	pop	r19
    1ce4:	2f 91       	pop	r18
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	0f 90       	pop	r0
    1cec:	1f 90       	pop	r1
    1cee:	18 95       	reti

00001cf0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1cf0:	1f 92       	push	r1
    1cf2:	0f 92       	push	r0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	0f 92       	push	r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	2f 93       	push	r18
    1cfc:	3f 93       	push	r19
    1cfe:	4f 93       	push	r20
    1d00:	5f 93       	push	r21
    1d02:	6f 93       	push	r22
    1d04:	7f 93       	push	r23
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
    1d0e:	ef 93       	push	r30
    1d10:	ff 93       	push	r31
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1d1a:	80 91 81 00 	lds	r24, 0x0081
    1d1e:	90 91 82 00 	lds	r25, 0x0082
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d26:	e0 91 81 00 	lds	r30, 0x0081
    1d2a:	f0 91 82 00 	lds	r31, 0x0082
    1d2e:	09 95       	icall
	}
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	ff 91       	pop	r31
    1d36:	ef 91       	pop	r30
    1d38:	bf 91       	pop	r27
    1d3a:	af 91       	pop	r26
    1d3c:	9f 91       	pop	r25
    1d3e:	8f 91       	pop	r24
    1d40:	7f 91       	pop	r23
    1d42:	6f 91       	pop	r22
    1d44:	5f 91       	pop	r21
    1d46:	4f 91       	pop	r20
    1d48:	3f 91       	pop	r19
    1d4a:	2f 91       	pop	r18
    1d4c:	0f 90       	pop	r0
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	0f 90       	pop	r0
    1d52:	1f 90       	pop	r1
    1d54:	18 95       	reti

00001d56 <__vector_5>:

/********************************TIMER2***********************************/
ISR(TIMER2_OVF_vect)
{
    1d56:	1f 92       	push	r1
    1d58:	0f 92       	push	r0
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	0f 92       	push	r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	2f 93       	push	r18
    1d62:	3f 93       	push	r19
    1d64:	4f 93       	push	r20
    1d66:	5f 93       	push	r21
    1d68:	6f 93       	push	r22
    1d6a:	7f 93       	push	r23
    1d6c:	8f 93       	push	r24
    1d6e:	9f 93       	push	r25
    1d70:	af 93       	push	r26
    1d72:	bf 93       	push	r27
    1d74:	ef 93       	push	r30
    1d76:	ff 93       	push	r31
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    1d80:	80 91 83 00 	lds	r24, 0x0083
    1d84:	90 91 84 00 	lds	r25, 0x0084
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	29 f0       	breq	.+10     	; 0x1d96 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d8c:	e0 91 83 00 	lds	r30, 0x0083
    1d90:	f0 91 84 00 	lds	r31, 0x0084
    1d94:	09 95       	icall
	}
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	ff 91       	pop	r31
    1d9c:	ef 91       	pop	r30
    1d9e:	bf 91       	pop	r27
    1da0:	af 91       	pop	r26
    1da2:	9f 91       	pop	r25
    1da4:	8f 91       	pop	r24
    1da6:	7f 91       	pop	r23
    1da8:	6f 91       	pop	r22
    1daa:	5f 91       	pop	r21
    1dac:	4f 91       	pop	r20
    1dae:	3f 91       	pop	r19
    1db0:	2f 91       	pop	r18
    1db2:	0f 90       	pop	r0
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	0f 90       	pop	r0
    1db8:	1f 90       	pop	r1
    1dba:	18 95       	reti

00001dbc <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    1dbc:	1f 92       	push	r1
    1dbe:	0f 92       	push	r0
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	0f 92       	push	r0
    1dc4:	11 24       	eor	r1, r1
    1dc6:	2f 93       	push	r18
    1dc8:	3f 93       	push	r19
    1dca:	4f 93       	push	r20
    1dcc:	5f 93       	push	r21
    1dce:	6f 93       	push	r22
    1dd0:	7f 93       	push	r23
    1dd2:	8f 93       	push	r24
    1dd4:	9f 93       	push	r25
    1dd6:	af 93       	push	r26
    1dd8:	bf 93       	push	r27
    1dda:	ef 93       	push	r30
    1ddc:	ff 93       	push	r31
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    1de6:	80 91 83 00 	lds	r24, 0x0083
    1dea:	90 91 84 00 	lds	r25, 0x0084
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	29 f0       	breq	.+10     	; 0x1dfc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1df2:	e0 91 83 00 	lds	r30, 0x0083
    1df6:	f0 91 84 00 	lds	r31, 0x0084
    1dfa:	09 95       	icall
	}
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	ff 91       	pop	r31
    1e02:	ef 91       	pop	r30
    1e04:	bf 91       	pop	r27
    1e06:	af 91       	pop	r26
    1e08:	9f 91       	pop	r25
    1e0a:	8f 91       	pop	r24
    1e0c:	7f 91       	pop	r23
    1e0e:	6f 91       	pop	r22
    1e10:	5f 91       	pop	r21
    1e12:	4f 91       	pop	r20
    1e14:	3f 91       	pop	r19
    1e16:	2f 91       	pop	r18
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <Timer_init>:
 *
 ****************************************************************************/


void Timer_init(const TIMER_ConfigType * Config_Ptr)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <Timer_init+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <Timer_init+0x8>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_id)
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	80 81       	ld	r24, Z
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	3c 83       	std	Y+4, r19	; 0x04
    1e3e:	2b 83       	std	Y+3, r18	; 0x03
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <Timer_init+0x2a>
    1e4a:	63 c0       	rjmp	.+198    	; 0x1f12 <Timer_init+0xf0>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <Timer_init+0x36>
    1e56:	ae c0       	rjmp	.+348    	; 0x1fb4 <Timer_init+0x192>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <Timer_init+0x40>
    1e60:	f7 c0       	rjmp	.+494    	; 0x2050 <Timer_init+0x22e>
	{
	/**********************************TIMER0*******************************/
	case TIMER0_ID:

		//non PWM MODE
		TCCR0 |=(1<<FOC0);
    1e62:	a3 e5       	ldi	r26, 0x53	; 83
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e3 e5       	ldi	r30, 0x53	; 83
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	8c 93       	st	X, r24


		/*
		 * configure timer wave generation
		 */
		TCCR0 = (TCCR0 &0XF7)|((Config_Ptr->timer_mode)<<3 );
    1e70:	a3 e5       	ldi	r26, 0x53	; 83
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e3 e5       	ldi	r30, 0x53	; 83
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	27 7f       	andi	r18, 0xF7	; 247
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	81 81       	ldd	r24, Z+1	; 0x01
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	82 2b       	or	r24, r18
    1e96:	8c 93       	st	X, r24

		/*
		 *  CLOCK SELCET
		 */

		TCCR0=(TCCR0 &0XF8) |(Config_Ptr->timer_clock);
    1e98:	a3 e5       	ldi	r26, 0x53	; 83
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e3 e5       	ldi	r30, 0x53	; 83
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	98 7f       	andi	r25, 0xF8	; 248
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	84 81       	ldd	r24, Z+4	; 0x04
    1eac:	89 2b       	or	r24, r25
    1eae:	8c 93       	st	X, r24

		/*
		 *  overflow or compare
		 */

		TIMSK |=(1<<Config_Ptr->timer_mode);
    1eb0:	a9 e5       	ldi	r26, 0x59	; 89
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e9 e5       	ldi	r30, 0x59	; 89
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	81 81       	ldd	r24, Z+1	; 0x01
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <Timer_init+0xb0>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <Timer_init+0xac>
    1ed6:	84 2b       	or	r24, r20
    1ed8:	8c 93       	st	X, r24

		/*
		 * load TCNT0 with intial value
		 */
		TCNT0=(Config_Ptr->intial_value);
    1eda:	a2 e5       	ldi	r26, 0x52	; 82
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	8c 93       	st	X, r24
		/*
		 *LOAD OCR0 with compare value
		 */


		if ( Config_Ptr->timer_mode == COMPARE )
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	81 81       	ldd	r24, Z+1	; 0x01
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <Timer_init+0xd2>
    1ef2:	ae c0       	rjmp	.+348    	; 0x2050 <Timer_init+0x22e>
				{
					/* Insert the required compare value in OCR0 register */
			OCR0=(Config_Ptr->compare_value);
    1ef4:	ac e5       	ldi	r26, 0x5C	; 92
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	85 81       	ldd	r24, Z+5	; 0x05
    1efe:	96 81       	ldd	r25, Z+6	; 0x06
    1f00:	8c 93       	st	X, r24
					/* Enable Compare Mode flag */
					TIMSK |= (1<<OCIE0);
    1f02:	a9 e5       	ldi	r26, 0x59	; 89
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e9 e5       	ldi	r30, 0x59	; 89
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	82 60       	ori	r24, 0x02	; 2
    1f0e:	8c 93       	st	X, r24
    1f10:	9f c0       	rjmp	.+318    	; 0x2050 <Timer_init+0x22e>
		/**************************TIMER1*************************************/

	case TIMER1_ID:

		//non pwm
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1f12:	ef e4       	ldi	r30, 0x4F	; 79
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	8c e0       	ldi	r24, 0x0C	; 12
    1f18:	80 83       	st	Z, r24

		/*
		 * clock selcet
		 *
		 */
		TCCR1B =(TCCR1B &0XF8) |(Config_Ptr->timer_clock);
    1f1a:	ae e4       	ldi	r26, 0x4E	; 78
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	ee e4       	ldi	r30, 0x4E	; 78
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	98 2f       	mov	r25, r24
    1f26:	98 7f       	andi	r25, 0xF8	; 248
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	84 81       	ldd	r24, Z+4	; 0x04
    1f2e:	89 2b       	or	r24, r25
    1f30:	8c 93       	st	X, r24

		/*
		 * timer mode
		 *
		 */
		TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->timer_mode)<<3);
    1f32:	ae e4       	ldi	r26, 0x4E	; 78
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ee e4       	ldi	r30, 0x4E	; 78
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	27 7f       	andi	r18, 0xF7	; 247
    1f40:	e9 81       	ldd	r30, Y+1	; 0x01
    1f42:	fa 81       	ldd	r31, Y+2	; 0x02
    1f44:	81 81       	ldd	r24, Z+1	; 0x01
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	82 2b       	or	r24, r18
    1f58:	8c 93       	st	X, r24


		TCNT1=Config_Ptr->intial_value;
    1f5a:	ac e4       	ldi	r26, 0x4C	; 76
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f60:	fa 81       	ldd	r31, Y+2	; 0x02
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	9c 93       	st	X, r25
    1f6a:	8e 93       	st	-X, r24


		if ( Config_Ptr->timer_mode == COMPARE )
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	81 81       	ldd	r24, Z+1	; 0x01
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	89 f4       	brne	.+34     	; 0x1f98 <Timer_init+0x176>
			{
			/* Insert the required compare value in OCR1A register */
				OCR1A = Config_Ptr->compare_value;
    1f76:	aa e4       	ldi	r26, 0x4A	; 74
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	85 81       	ldd	r24, Z+5	; 0x05
    1f80:	96 81       	ldd	r25, Z+6	; 0x06
    1f82:	11 96       	adiw	r26, 0x01	; 1
    1f84:	9c 93       	st	X, r25
    1f86:	8e 93       	st	-X, r24
					/* Enable Compare Mode flag */
				TIMSK |= (1<<OCIE1A);
    1f88:	a9 e5       	ldi	r26, 0x59	; 89
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e9 e5       	ldi	r30, 0x59	; 89
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 61       	ori	r24, 0x10	; 16
    1f94:	8c 93       	st	X, r24
    1f96:	5c c0       	rjmp	.+184    	; 0x2050 <Timer_init+0x22e>
			}
		 else if ( Config_Ptr->timer_mode == OVERFLOW )
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	81 81       	ldd	r24, Z+1	; 0x01
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <Timer_init+0x182>
    1fa2:	56 c0       	rjmp	.+172    	; 0x2050 <Timer_init+0x22e>
			{
					/* Enable overflow Mode flag */
				TIMSK |= (1<<TOIE1);
    1fa4:	a9 e5       	ldi	r26, 0x59	; 89
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e9 e5       	ldi	r30, 0x59	; 89
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	84 60       	ori	r24, 0x04	; 4
    1fb0:	8c 93       	st	X, r24
    1fb2:	4e c0       	rjmp	.+156    	; 0x2050 <Timer_init+0x22e>
		break; /* End Timer1 */

		/***********************TIMER2****************************************/
	case TIMER2_ID:

		TCCR0 |= ( 1 << FOC2 );
    1fb4:	a3 e5       	ldi	r26, 0x53	; 83
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e3 e5       	ldi	r30, 0x53	; 83
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 68       	ori	r24, 0x80	; 128
    1fc0:	8c 93       	st	X, r24

		TCCR2 = ( TCCR2 & 0xF7 ) | ( ( Config_Ptr->timer_mode ) << 3 );
    1fc2:	a5 e4       	ldi	r26, 0x45	; 69
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e5 e4       	ldi	r30, 0x45	; 69
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	27 7f       	andi	r18, 0xF7	; 247
    1fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd4:	81 81       	ldd	r24, Z+1	; 0x01
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	82 2b       	or	r24, r18
    1fe8:	8c 93       	st	X, r24

		TCCR2 = ( TCCR2 & 0xF8 ) | ( Config_Ptr->timer_clock );
    1fea:	a5 e4       	ldi	r26, 0x45	; 69
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e5 e4       	ldi	r30, 0x45	; 69
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	98 7f       	andi	r25, 0xF8	; 248
    1ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffc:	84 81       	ldd	r24, Z+4	; 0x04
    1ffe:	89 2b       	or	r24, r25
    2000:	8c 93       	st	X, r24

		TCNT2 = (Config_Ptr->intial_value);
    2002:	a4 e4       	ldi	r26, 0x44	; 68
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	8c 93       	st	X, r24

		if ( Config_Ptr->timer_mode == COMPARE )
    2010:	e9 81       	ldd	r30, Y+1	; 0x01
    2012:	fa 81       	ldd	r31, Y+2	; 0x02
    2014:	81 81       	ldd	r24, Z+1	; 0x01
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	79 f4       	brne	.+30     	; 0x2038 <Timer_init+0x216>

		{
					/* Insert the required compare value in OCR0 register */
				OCR0 = Config_Ptr->compare_value;
    201a:	ac e5       	ldi	r26, 0x5C	; 92
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	85 81       	ldd	r24, Z+5	; 0x05
    2024:	96 81       	ldd	r25, Z+6	; 0x06
    2026:	8c 93       	st	X, r24
					/* Enable Compare Mode flag */
				TIMSK |= (1<<OCIE2);
    2028:	a9 e5       	ldi	r26, 0x59	; 89
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e9 e5       	ldi	r30, 0x59	; 89
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 68       	ori	r24, 0x80	; 128
    2034:	8c 93       	st	X, r24
    2036:	0c c0       	rjmp	.+24     	; 0x2050 <Timer_init+0x22e>
		}
		else if ( Config_Ptr->timer_mode == OVERFLOW )
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	81 81       	ldd	r24, Z+1	; 0x01
    203e:	88 23       	and	r24, r24
    2040:	39 f4       	brne	.+14     	; 0x2050 <Timer_init+0x22e>

		{
					/* Enable overflow Mode flag */
				TIMSK |= (1<<TOIE2);
    2042:	a9 e5       	ldi	r26, 0x59	; 89
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e9 e5       	ldi	r30, 0x59	; 89
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	80 64       	ori	r24, 0x40	; 64
    204e:	8c 93       	st	X, r24

		break; /* End Timer2 */

	}

}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void),TIMER_ID timer_number)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <Timer_setCallBack+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <Timer_setCallBack+0x8>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_number)
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	3d 83       	std	Y+5, r19	; 0x05
    207a:	2c 83       	std	Y+4, r18	; 0x04
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	9d 81       	ldd	r25, Y+5	; 0x05
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	91 05       	cpc	r25, r1
    2084:	81 f0       	breq	.+32     	; 0x20a6 <Timer_setCallBack+0x48>
    2086:	2c 81       	ldd	r18, Y+4	; 0x04
    2088:	3d 81       	ldd	r19, Y+5	; 0x05
    208a:	22 30       	cpi	r18, 0x02	; 2
    208c:	31 05       	cpc	r19, r1
    208e:	91 f0       	breq	.+36     	; 0x20b4 <Timer_setCallBack+0x56>
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	a1 f4       	brne	.+40     	; 0x20c0 <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:

		g_Timer0_callBackPtr=a_ptr;
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	90 93 80 00 	sts	0x0080, r25
    20a0:	80 93 7f 00 	sts	0x007F, r24
    20a4:	0d c0       	rjmp	.+26     	; 0x20c0 <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_Timer1_callBackPtr=a_ptr;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	90 93 82 00 	sts	0x0082, r25
    20ae:	80 93 81 00 	sts	0x0081, r24
    20b2:	06 c0       	rjmp	.+12     	; 0x20c0 <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_Timer1_callBackPtr=a_ptr;
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	90 93 82 00 	sts	0x0082, r25
    20bc:	80 93 81 00 	sts	0x0081, r24
		break;

	}
}
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <Timer_DeInit>:


void Timer_DeInit(TIMER_ID timer_number)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	2f 97       	sbiw	r28, 0x0f	; 15
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_number)
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	3f 87       	std	Y+15, r19	; 0x0f
    20ee:	2e 87       	std	Y+14, r18	; 0x0e
    20f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	91 05       	cpc	r25, r1
    20f8:	61 f1       	breq	.+88     	; 0x2152 <Timer_DeInit+0x82>
    20fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    20fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    20fe:	22 30       	cpi	r18, 0x02	; 2
    2100:	31 05       	cpc	r19, r1
    2102:	09 f4       	brne	.+2      	; 0x2106 <Timer_DeInit+0x36>
    2104:	58 c0       	rjmp	.+176    	; 0x21b6 <Timer_DeInit+0xe6>
    2106:	8e 85       	ldd	r24, Y+14	; 0x0e
    2108:	9f 85       	ldd	r25, Y+15	; 0x0f
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	09 f0       	breq	.+2      	; 0x2110 <Timer_DeInit+0x40>
    210e:	73 c0       	rjmp	.+230    	; 0x21f6 <Timer_DeInit+0x126>
	{
	case TIMER0_ID:
		TCCR0 &= 0x00;
    2110:	e3 e5       	ldi	r30, 0x53	; 83
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	90 81       	ld	r25, Z
    2116:	e3 e5       	ldi	r30, 0x53	; 83
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	10 82       	st	Z, r1
		TCNT0 &= 0x00;
    211c:	e2 e5       	ldi	r30, 0x52	; 82
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	20 81       	ld	r18, Z
    2122:	e2 e5       	ldi	r30, 0x52	; 82
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	10 82       	st	Z, r1
		OCR0 &= 0x00;
    2128:	ec e5       	ldi	r30, 0x5C	; 92
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	30 81       	ld	r19, Z
    212e:	ec e5       	ldi	r30, 0x5C	; 92
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	10 82       	st	Z, r1
		TIMSK &= ( 1 << OCIE0 ); /* Disable Output Compare Match Interrupt */
    2134:	a9 e5       	ldi	r26, 0x59	; 89
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e9 e5       	ldi	r30, 0x59	; 89
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	82 70       	andi	r24, 0x02	; 2
    2140:	8c 93       	st	X, r24
		TIMSK &= ( 1 << TOIE0 ); /* Disable Overflow Interrupt */
    2142:	a9 e5       	ldi	r26, 0x59	; 89
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e9 e5       	ldi	r30, 0x59	; 89
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	81 70       	andi	r24, 0x01	; 1
    214e:	8c 93       	st	X, r24
    2150:	52 c0       	rjmp	.+164    	; 0x21f6 <Timer_DeInit+0x126>
		break;

	case TIMER1_ID:
		TCCR1A &= 0x00;
    2152:	ef e4       	ldi	r30, 0x4F	; 79
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	ef e4       	ldi	r30, 0x4F	; 79
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	10 82       	st	Z, r1
		TCCR1B &= 0x00;
    215e:	ee e4       	ldi	r30, 0x4E	; 78
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	90 81       	ld	r25, Z
    2164:	ee e4       	ldi	r30, 0x4E	; 78
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	10 82       	st	Z, r1
		TCNT1 &= 0x0000;
    216a:	ec e4       	ldi	r30, 0x4C	; 76
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	20 81       	ld	r18, Z
    2170:	31 81       	ldd	r19, Z+1	; 0x01
    2172:	ec e4       	ldi	r30, 0x4C	; 76
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	11 82       	std	Z+1, r1	; 0x01
    2178:	10 82       	st	Z, r1
		OCR1A &= 0x0000;
    217a:	ea e4       	ldi	r30, 0x4A	; 74
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	ea e4       	ldi	r30, 0x4A	; 74
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	11 82       	std	Z+1, r1	; 0x01
    2188:	10 82       	st	Z, r1
		TIMSK &= ( 1 << OCIE1A ); /* Disable Output Compare Match Interrupt --> Channel A */
    218a:	a9 e5       	ldi	r26, 0x59	; 89
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e9 e5       	ldi	r30, 0x59	; 89
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	80 71       	andi	r24, 0x10	; 16
    2196:	8c 93       	st	X, r24
		TIMSK &= ( 1 << OCIE1B ); /* Disable Output Compare Match Interrupt --> Channel B */
    2198:	a9 e5       	ldi	r26, 0x59	; 89
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e9 e5       	ldi	r30, 0x59	; 89
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	88 70       	andi	r24, 0x08	; 8
    21a4:	8c 93       	st	X, r24
		TIMSK &= ( 1 << TOIE1 ); /* Disable Overflow Interrupt */
    21a6:	a9 e5       	ldi	r26, 0x59	; 89
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e9 e5       	ldi	r30, 0x59	; 89
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	84 70       	andi	r24, 0x04	; 4
    21b2:	8c 93       	st	X, r24
    21b4:	20 c0       	rjmp	.+64     	; 0x21f6 <Timer_DeInit+0x126>
		break;
	case TIMER2_ID:
		TCCR2 &= 0x00;
    21b6:	e5 e4       	ldi	r30, 0x45	; 69
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	90 81       	ld	r25, Z
    21bc:	e5 e4       	ldi	r30, 0x45	; 69
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
		TCNT2 &= 0x00;
    21c2:	e4 e4       	ldi	r30, 0x44	; 68
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	20 81       	ld	r18, Z
    21c8:	e4 e4       	ldi	r30, 0x44	; 68
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	10 82       	st	Z, r1
		OCR2 &= 0x00;
    21ce:	e3 e4       	ldi	r30, 0x43	; 67
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	30 81       	ld	r19, Z
    21d4:	e3 e4       	ldi	r30, 0x43	; 67
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	10 82       	st	Z, r1
		TIMSK &= ( 1 << OCIE2 ); /* Disable Output Compare Match Interrupt */
    21da:	a9 e5       	ldi	r26, 0x59	; 89
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e9 e5       	ldi	r30, 0x59	; 89
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	80 78       	andi	r24, 0x80	; 128
    21e6:	8c 93       	st	X, r24
		TIMSK &= ( 1 << TOIE2 ); /* Disable Overflow Interrupt */
    21e8:	a9 e5       	ldi	r26, 0x59	; 89
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 e5       	ldi	r30, 0x59	; 89
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	80 74       	andi	r24, 0x40	; 64
    21f4:	8c 93       	st	X, r24
		break;
	}

}
    21f6:	2f 96       	adiw	r28, 0x0f	; 15
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <TWI_init+0x12>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = ((8000000/Config_Ptr->bit_rate)-16)/(2*(4^Config_Ptr->prescalar));
    2222:	cc 24       	eor	r12, r12
    2224:	dd 24       	eor	r13, r13
    2226:	68 94       	set
    2228:	c5 f8       	bld	r12, 5
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	21 81       	ldd	r18, Z+1	; 0x01
    2230:	32 81       	ldd	r19, Z+2	; 0x02
    2232:	43 81       	ldd	r20, Z+3	; 0x03
    2234:	54 81       	ldd	r21, Z+4	; 0x04
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	92 e1       	ldi	r25, 0x12	; 18
    223a:	aa e7       	ldi	r26, 0x7A	; 122
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__udivmodsi4>
    2246:	da 01       	movw	r26, r20
    2248:	c9 01       	movw	r24, r18
    224a:	0f 2e       	mov	r0, r31
    224c:	f0 ef       	ldi	r31, 0xF0	; 240
    224e:	ef 2e       	mov	r14, r31
    2250:	ff ef       	ldi	r31, 0xFF	; 255
    2252:	ff 2e       	mov	r15, r31
    2254:	ff ef       	ldi	r31, 0xFF	; 255
    2256:	0f 2f       	mov	r16, r31
    2258:	ff ef       	ldi	r31, 0xFF	; 255
    225a:	1f 2f       	mov	r17, r31
    225c:	f0 2d       	mov	r31, r0
    225e:	e8 0e       	add	r14, r24
    2260:	f9 1e       	adc	r15, r25
    2262:	0a 1f       	adc	r16, r26
    2264:	1b 1f       	adc	r17, r27
    2266:	e9 81       	ldd	r30, Y+1	; 0x01
    2268:	fa 81       	ldd	r31, Y+2	; 0x02
    226a:	90 81       	ld	r25, Z
    226c:	84 e0       	ldi	r24, 0x04	; 4
    226e:	89 27       	eor	r24, r25
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	9c 01       	movw	r18, r24
    227a:	44 27       	eor	r20, r20
    227c:	37 fd       	sbrc	r19, 7
    227e:	40 95       	com	r20
    2280:	54 2f       	mov	r21, r20
    2282:	c8 01       	movw	r24, r16
    2284:	b7 01       	movw	r22, r14
    2286:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__udivmodsi4>
    228a:	da 01       	movw	r26, r20
    228c:	c9 01       	movw	r24, r18
    228e:	f6 01       	movw	r30, r12
    2290:	80 83       	st	Z, r24
	TWSR =Config_Ptr->prescalar;
    2292:	a1 e2       	ldi	r26, 0x21	; 33
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	80 81       	ld	r24, Z
    229c:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR =(Config_Ptr->address)<<1; // my address = 0x01 :)
    229e:	a2 e2       	ldi	r26, 0x22	; 34
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e9 81       	ldd	r30, Y+1	; 0x01
    22a4:	fa 81       	ldd	r31, Y+2	; 0x02
    22a6:	85 81       	ldd	r24, Z+5	; 0x05
    22a8:	88 0f       	add	r24, r24
    22aa:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    22ac:	e6 e5       	ldi	r30, 0x56	; 86
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	84 e0       	ldi	r24, 0x04	; 4
    22b2:	80 83       	st	Z, r24
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	ff 90       	pop	r15
    22c2:	ef 90       	pop	r14
    22c4:	df 90       	pop	r13
    22c6:	cf 90       	pop	r12
    22c8:	08 95       	ret

000022ca <TWI_start>:

void TWI_start(void)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    22d2:	e6 e5       	ldi	r30, 0x56	; 86
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	84 ea       	ldi	r24, 0xA4	; 164
    22d8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22da:	e6 e5       	ldi	r30, 0x56	; 86
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	88 23       	and	r24, r24
    22e2:	dc f7       	brge	.-10     	; 0x22da <TWI_start+0x10>
}
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <TWI_stop>:

void TWI_stop(void)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    22f2:	e6 e5       	ldi	r30, 0x56	; 86
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	84 e9       	ldi	r24, 0x94	; 148
    22f8:	80 83       	st	Z, r24
}
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    230c:	e3 e2       	ldi	r30, 0x23	; 35
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2314:	e6 e5       	ldi	r30, 0x56	; 86
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	84 e8       	ldi	r24, 0x84	; 132
    231a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    231c:	e6 e5       	ldi	r30, 0x56	; 86
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	88 23       	and	r24, r24
    2324:	dc f7       	brge	.-10     	; 0x231c <TWI_writeByte+0x1c>
}
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2336:	e6 e5       	ldi	r30, 0x56	; 86
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	84 ec       	ldi	r24, 0xC4	; 196
    233c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    233e:	e6 e5       	ldi	r30, 0x56	; 86
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	88 23       	and	r24, r24
    2346:	dc f7       	brge	.-10     	; 0x233e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2348:	e3 e2       	ldi	r30, 0x23	; 35
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
}
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    235c:	e6 e5       	ldi	r30, 0x56	; 86
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	84 e8       	ldi	r24, 0x84	; 132
    2362:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2364:	e6 e5       	ldi	r30, 0x56	; 86
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 23       	and	r24, r24
    236c:	dc f7       	brge	.-10     	; 0x2364 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    236e:	e3 e2       	ldi	r30, 0x23	; 35
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	0f 92       	push	r0
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2384:	e1 e2       	ldi	r30, 0x21	; 33
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	88 7f       	andi	r24, 0xF8	; 248
    238c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <UART_init+0x6>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <UART_init+0x8>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    23a8:	1a 82       	std	Y+2, r1	; 0x02
    23aa:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    23ac:	eb e2       	ldi	r30, 0x2B	; 43
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23b4:	ea e2       	ldi	r30, 0x2A	; 42
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	88 e1       	ldi	r24, 0x18	; 24
    23ba:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0);
    23bc:	e0 e4       	ldi	r30, 0x40	; 64
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	82 e8       	ldi	r24, 0x82	; 130
    23c2:	80 83       	st	Z, r24
		 * Insert Required Parity Mode
		 * in (UCSRC) Register
		 * in the bits ( UPM0, UPM1 )
		 */

	UCSRC=(UCSRC &0XCF) |((Config_Ptr->parity)<<4);
    23c4:	a0 e4       	ldi	r26, 0x40	; 64
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e0 e4       	ldi	r30, 0x40	; 64
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	28 2f       	mov	r18, r24
    23d0:	2f 7c       	andi	r18, 0xCF	; 207
    23d2:	eb 81       	ldd	r30, Y+3	; 0x03
    23d4:	fc 81       	ldd	r31, Y+4	; 0x04
    23d6:	86 81       	ldd	r24, Z+6	; 0x06
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	82 95       	swap	r24
    23de:	92 95       	swap	r25
    23e0:	90 7f       	andi	r25, 0xF0	; 240
    23e2:	98 27       	eor	r25, r24
    23e4:	80 7f       	andi	r24, 0xF0	; 240
    23e6:	98 27       	eor	r25, r24
    23e8:	82 2b       	or	r24, r18
    23ea:	8c 93       	st	X, r24
	/*
	 *
	 * insert required stop bit
	 * in the bit (USBS
	 */
	UCSRC=(UCSRC &0XF7)|((Config_Ptr->stop_bit)<<3);
    23ec:	a0 e4       	ldi	r26, 0x40	; 64
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e0 e4       	ldi	r30, 0x40	; 64
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	28 2f       	mov	r18, r24
    23f8:	27 7f       	andi	r18, 0xF7	; 247
    23fa:	eb 81       	ldd	r30, Y+3	; 0x03
    23fc:	fc 81       	ldd	r31, Y+4	; 0x04
    23fe:	85 81       	ldd	r24, Z+5	; 0x05
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	82 2b       	or	r24, r18
    2412:	8c 93       	st	X, r24

	/*
	 *
	 *  inser bit_data
	 */
	if (Config_Ptr->bit_data == 9)
    2414:	eb 81       	ldd	r30, Y+3	; 0x03
    2416:	fc 81       	ldd	r31, Y+4	; 0x04
    2418:	84 81       	ldd	r24, Z+4	; 0x04
    241a:	89 30       	cpi	r24, 0x09	; 9
    241c:	79 f4       	brne	.+30     	; 0x243c <UART_init+0xa4>
		{
			UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    241e:	a0 e4       	ldi	r26, 0x40	; 64
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e0 e4       	ldi	r30, 0x40	; 64
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	86 60       	ori	r24, 0x06	; 6
    242a:	8c 93       	st	X, r24
			UCSRB |= (1<<UCSZ2);
    242c:	aa e2       	ldi	r26, 0x2A	; 42
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ea e2       	ldi	r30, 0x2A	; 42
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	84 60       	ori	r24, 0x04	; 4
    2438:	8c 93       	st	X, r24
    243a:	0f c0       	rjmp	.+30     	; 0x245a <UART_init+0xc2>
		}
		else
		{
			UCSRC |= ( ( Config_Ptr->bit_data ) << 1 );
    243c:	a0 e4       	ldi	r26, 0x40	; 64
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e0 e4       	ldi	r30, 0x40	; 64
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	28 2f       	mov	r18, r24
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	84 81       	ldd	r24, Z+4	; 0x04
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	82 2b       	or	r24, r18
    2458:	8c 93       	st	X, r24
		}


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    245a:	eb 81       	ldd	r30, Y+3	; 0x03
    245c:	fc 81       	ldd	r31, Y+4	; 0x04
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	a2 81       	ldd	r26, Z+2	; 0x02
    2464:	b3 81       	ldd	r27, Z+3	; 0x03
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	aa 1f       	adc	r26, r26
    246c:	bb 1f       	adc	r27, r27
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	aa 1f       	adc	r26, r26
    2474:	bb 1f       	adc	r27, r27
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	aa 1f       	adc	r26, r26
    247c:	bb 1f       	adc	r27, r27
    247e:	9c 01       	movw	r18, r24
    2480:	ad 01       	movw	r20, r26
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	92 e1       	ldi	r25, 0x12	; 18
    2486:	aa e7       	ldi	r26, 0x7A	; 122
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__udivmodsi4>
    2492:	da 01       	movw	r26, r20
    2494:	c9 01       	movw	r24, r18
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    249c:	e0 e4       	ldi	r30, 0x40	; 64
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	89 2f       	mov	r24, r25
    24a6:	99 27       	eor	r25, r25
    24a8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    24aa:	e9 e2       	ldi	r30, 0x29	; 41
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	80 83       	st	Z, r24
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24cc:	eb e2       	ldi	r30, 0x2B	; 43
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	80 72       	andi	r24, 0x20	; 32
    24d8:	90 70       	andi	r25, 0x00	; 0
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	b9 f3       	breq	.-18     	; 0x24cc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24de:	ec e2       	ldi	r30, 0x2C	; 44
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24f6:	eb e2       	ldi	r30, 0x2B	; 43
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	88 23       	and	r24, r24
    24fe:	dc f7       	brge	.-10     	; 0x24f6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2500:	ec e2       	ldi	r30, 0x2C	; 44
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
}
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <UART_sendString+0x6>
    2512:	0f 92       	push	r0
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	9b 83       	std	Y+3, r25	; 0x03
    251a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    251c:	19 82       	std	Y+1, r1	; 0x01
    251e:	0e c0       	rjmp	.+28     	; 0x253c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	9b 81       	ldd	r25, Y+3	; 0x03
    252a:	fc 01       	movw	r30, r24
    252c:	e2 0f       	add	r30, r18
    252e:	f3 1f       	adc	r31, r19
    2530:	80 81       	ld	r24, Z
    2532:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_sendByte>
		i++;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	8f 5f       	subi	r24, 0xFF	; 255
    253a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	9b 81       	ldd	r25, Y+3	; 0x03
    2546:	fc 01       	movw	r30, r24
    2548:	e2 0f       	add	r30, r18
    254a:	f3 1f       	adc	r31, r19
    254c:	80 81       	ld	r24, Z
    254e:	88 23       	and	r24, r24
    2550:	39 f7       	brne	.-50     	; 0x2520 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <UART_receiveString+0xa>
    2568:	0f 92       	push	r0
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	9b 83       	std	Y+3, r25	; 0x03
    2570:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2572:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	8c 01       	movw	r16, r24
    2580:	02 0f       	add	r16, r18
    2582:	13 1f       	adc	r17, r19
    2584:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_recieveByte>
    2588:	f8 01       	movw	r30, r16
    258a:	80 83       	st	Z, r24
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	9b 81       	ldd	r25, Y+3	; 0x03
    259e:	8c 01       	movw	r16, r24
    25a0:	02 0f       	add	r16, r18
    25a2:	13 1f       	adc	r17, r19
    25a4:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_recieveByte>
    25a8:	f8 01       	movw	r30, r16
    25aa:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	fc 01       	movw	r30, r24
    25b8:	e2 0f       	add	r30, r18
    25ba:	f3 1f       	adc	r31, r19
    25bc:	80 81       	ld	r24, Z
    25be:	83 32       	cpi	r24, 0x23	; 35
    25c0:	31 f7       	brne	.-52     	; 0x258e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	fc 01       	movw	r30, r24
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	10 82       	st	Z, r1
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	1f 91       	pop	r17
    25e0:	0f 91       	pop	r16
    25e2:	08 95       	ret

000025e4 <__udivmodsi4>:
    25e4:	a1 e2       	ldi	r26, 0x21	; 33
    25e6:	1a 2e       	mov	r1, r26
    25e8:	aa 1b       	sub	r26, r26
    25ea:	bb 1b       	sub	r27, r27
    25ec:	fd 01       	movw	r30, r26
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <__udivmodsi4_ep>

000025f0 <__udivmodsi4_loop>:
    25f0:	aa 1f       	adc	r26, r26
    25f2:	bb 1f       	adc	r27, r27
    25f4:	ee 1f       	adc	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	a2 17       	cp	r26, r18
    25fa:	b3 07       	cpc	r27, r19
    25fc:	e4 07       	cpc	r30, r20
    25fe:	f5 07       	cpc	r31, r21
    2600:	20 f0       	brcs	.+8      	; 0x260a <__udivmodsi4_ep>
    2602:	a2 1b       	sub	r26, r18
    2604:	b3 0b       	sbc	r27, r19
    2606:	e4 0b       	sbc	r30, r20
    2608:	f5 0b       	sbc	r31, r21

0000260a <__udivmodsi4_ep>:
    260a:	66 1f       	adc	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	88 1f       	adc	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	1a 94       	dec	r1
    2614:	69 f7       	brne	.-38     	; 0x25f0 <__udivmodsi4_loop>
    2616:	60 95       	com	r22
    2618:	70 95       	com	r23
    261a:	80 95       	com	r24
    261c:	90 95       	com	r25
    261e:	9b 01       	movw	r18, r22
    2620:	ac 01       	movw	r20, r24
    2622:	bd 01       	movw	r22, r26
    2624:	cf 01       	movw	r24, r30
    2626:	08 95       	ret

00002628 <__prologue_saves__>:
    2628:	2f 92       	push	r2
    262a:	3f 92       	push	r3
    262c:	4f 92       	push	r4
    262e:	5f 92       	push	r5
    2630:	6f 92       	push	r6
    2632:	7f 92       	push	r7
    2634:	8f 92       	push	r8
    2636:	9f 92       	push	r9
    2638:	af 92       	push	r10
    263a:	bf 92       	push	r11
    263c:	cf 92       	push	r12
    263e:	df 92       	push	r13
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	ca 1b       	sub	r28, r26
    2652:	db 0b       	sbc	r29, r27
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	09 94       	ijmp

00002660 <__epilogue_restores__>:
    2660:	2a 88       	ldd	r2, Y+18	; 0x12
    2662:	39 88       	ldd	r3, Y+17	; 0x11
    2664:	48 88       	ldd	r4, Y+16	; 0x10
    2666:	5f 84       	ldd	r5, Y+15	; 0x0f
    2668:	6e 84       	ldd	r6, Y+14	; 0x0e
    266a:	7d 84       	ldd	r7, Y+13	; 0x0d
    266c:	8c 84       	ldd	r8, Y+12	; 0x0c
    266e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2670:	aa 84       	ldd	r10, Y+10	; 0x0a
    2672:	b9 84       	ldd	r11, Y+9	; 0x09
    2674:	c8 84       	ldd	r12, Y+8	; 0x08
    2676:	df 80       	ldd	r13, Y+7	; 0x07
    2678:	ee 80       	ldd	r14, Y+6	; 0x06
    267a:	fd 80       	ldd	r15, Y+5	; 0x05
    267c:	0c 81       	ldd	r16, Y+4	; 0x04
    267e:	1b 81       	ldd	r17, Y+3	; 0x03
    2680:	aa 81       	ldd	r26, Y+2	; 0x02
    2682:	b9 81       	ldd	r27, Y+1	; 0x01
    2684:	ce 0f       	add	r28, r30
    2686:	d1 1d       	adc	r29, r1
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	ed 01       	movw	r28, r26
    2694:	08 95       	ret

00002696 <_exit>:
    2696:	f8 94       	cli

00002698 <__stop_program>:
    2698:	ff cf       	rjmp	.-2      	; 0x2698 <__stop_program>
