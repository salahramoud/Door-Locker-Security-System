
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00003262  000032f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800150  00800150  000033e6  2**0
                  ALLOC
  3 .stab         00002ec8  00000000  00000000  000033e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000138f  00000000  00000000  000062b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000763f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000777f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a423  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__vector_4>
      14:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 df 14 	jmp	0x29be	; 0x29be <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__vector_9>
      28:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__vector_10>
      2c:	0c 94 46 14 	jmp	0x288c	; 0x288c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 35       	cpi	r26, 0x5F	; 95
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e3       	ldi	r26, 0x3A	; 58
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e3       	ldi	r24, 0x3A	; 58
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 g_passwordMistakes = 0;



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6d 97       	sbiw	r28, 0x1d	; 29
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 key;

	SREG  |= ( 1 << 7 );
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

   UART_ConfigType UART_Config={9600,USART_8_BIT,ONE_BIT,DISABLED};
     b68:	9e 01       	movw	r18, r28
     b6a:	20 5f       	subi	r18, 0xF0	; 240
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	3a 8f       	std	Y+26, r19	; 0x1a
     b70:	29 8f       	std	Y+25, r18	; 0x19
     b72:	82 e4       	ldi	r24, 0x42	; 66
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	9c 8f       	std	Y+28, r25	; 0x1c
     b78:	8b 8f       	std	Y+27, r24	; 0x1b
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	9d 8f       	std	Y+29, r25	; 0x1d
     b7e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b80:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b82:	00 80       	ld	r0, Z
     b84:	2b 8d       	ldd	r18, Y+27	; 0x1b
     b86:	3c 8d       	ldd	r19, Y+28	; 0x1c
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	3c 8f       	std	Y+28, r19	; 0x1c
     b8e:	2b 8f       	std	Y+27, r18	; 0x1b
     b90:	e9 8d       	ldd	r30, Y+25	; 0x19
     b92:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b94:	00 82       	st	Z, r0
     b96:	29 8d       	ldd	r18, Y+25	; 0x19
     b98:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	3a 8f       	std	Y+26, r19	; 0x1a
     ba0:	29 8f       	std	Y+25, r18	; 0x19
     ba2:	3d 8d       	ldd	r19, Y+29	; 0x1d
     ba4:	31 50       	subi	r19, 0x01	; 1
     ba6:	3d 8f       	std	Y+29, r19	; 0x1d
     ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     baa:	88 23       	and	r24, r24
     bac:	41 f7       	brne	.-48     	; 0xb7e <main+0x38>
   UART_init(&UART_Config);
     bae:	ce 01       	movw	r24, r28
     bb0:	40 96       	adiw	r24, 0x10	; 16
     bb2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <UART_init>

   LCD_init();
     bb6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_init>
   /* Welcome message and Important note */
   	LCD_moveCursor(0, 4);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	64 e0       	ldi	r22, 0x04	; 4
     bbe:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_moveCursor>
   	LCD_displayString("Welcome");
     bc2:	80 e6       	ldi	r24, 0x60	; 96
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
   	LCD_moveCursor(1, 0);
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_moveCursor>
   	LCD_displayString("Use (=) as Enter");
     bd2:	88 e6       	ldi	r24, 0x68	; 104
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e8       	ldi	r25, 0x80	; 128
     bde:	ab eb       	ldi	r26, 0xBB	; 187
     be0:	b4 e4       	ldi	r27, 0x44	; 68
     be2:	8b 87       	std	Y+11, r24	; 0x0b
     be4:	9c 87       	std	Y+12, r25	; 0x0c
     be6:	ad 87       	std	Y+13, r26	; 0x0d
     be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bea:	6b 85       	ldd	r22, Y+11	; 0x0b
     bec:	7c 85       	ldd	r23, Y+12	; 0x0c
     bee:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	4a ef       	ldi	r20, 0xFA	; 250
     bf8:	54 e4       	ldi	r21, 0x44	; 68
     bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	8f 83       	std	Y+7, r24	; 0x07
     c04:	98 87       	std	Y+8, r25	; 0x08
     c06:	a9 87       	std	Y+9, r26	; 0x09
     c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c0a:	6f 81       	ldd	r22, Y+7	; 0x07
     c0c:	78 85       	ldd	r23, Y+8	; 0x08
     c0e:	89 85       	ldd	r24, Y+9	; 0x09
     c10:	9a 85       	ldd	r25, Y+10	; 0x0a
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e8       	ldi	r20, 0x80	; 128
     c18:	5f e3       	ldi	r21, 0x3F	; 63
     c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c1e:	88 23       	and	r24, r24
     c20:	2c f4       	brge	.+10     	; 0xc2c <main+0xe6>
		__ticks = 1;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
     c2a:	3f c0       	rjmp	.+126    	; 0xcaa <main+0x164>
	else if (__tmp > 65535)
     c2c:	6f 81       	ldd	r22, Y+7	; 0x07
     c2e:	78 85       	ldd	r23, Y+8	; 0x08
     c30:	89 85       	ldd	r24, Y+9	; 0x09
     c32:	9a 85       	ldd	r25, Y+10	; 0x0a
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	3f ef       	ldi	r19, 0xFF	; 255
     c38:	4f e7       	ldi	r20, 0x7F	; 127
     c3a:	57 e4       	ldi	r21, 0x47	; 71
     c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c40:	18 16       	cp	r1, r24
     c42:	4c f5       	brge	.+82     	; 0xc96 <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c44:	6b 85       	ldd	r22, Y+11	; 0x0b
     c46:	7c 85       	ldd	r23, Y+12	; 0x0c
     c48:	8d 85       	ldd	r24, Y+13	; 0x0d
     c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e2       	ldi	r20, 0x20	; 32
     c52:	51 e4       	ldi	r21, 0x41	; 65
     c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	bc 01       	movw	r22, r24
     c5e:	cd 01       	movw	r24, r26
     c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <main+0x146>
     c6e:	88 ec       	ldi	r24, 0xC8	; 200
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9c 83       	std	Y+4, r25	; 0x04
     c74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <main+0x134>
     c7e:	9c 83       	std	Y+4, r25	; 0x04
     c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	9e 83       	std	Y+6, r25	; 0x06
     c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	69 f7       	brne	.-38     	; 0xc6e <main+0x128>
     c94:	14 c0       	rjmp	.+40     	; 0xcbe <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c96:	6f 81       	ldd	r22, Y+7	; 0x07
     c98:	78 85       	ldd	r23, Y+8	; 0x08
     c9a:	89 85       	ldd	r24, Y+9	; 0x09
     c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	9e 83       	std	Y+6, r25	; 0x06
     ca8:	8d 83       	std	Y+5, r24	; 0x05
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	9a 83       	std	Y+2, r25	; 0x02
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <main+0x170>
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
   	_delay_ms(STAND_PRESENTATION_TIME);
   	LCD_clearScreen();
     cbe:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>

   	/* Set the Password for the first time */


   HMI_newPassword();
     cc2:	0e 94 2c 07 	call	0xe58	; 0xe58 <HMI_newPassword>

   for(;;)
   {
	   HMI_mainOptions();
     cc6:	0e 94 b1 09 	call	0x1362	; 0x1362 <HMI_mainOptions>

	   key=KEYPAD_getPressedKey();
     cca:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KEYPAD_getPressedKey>
     cce:	8f 87       	std	Y+15, r24	; 0x0f

	   switch(key)
     cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd2:	e8 2f       	mov	r30, r24
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	f8 8f       	std	Y+24, r31	; 0x18
     cd8:	ef 8b       	std	Y+23, r30	; 0x17
     cda:	2f 89       	ldd	r18, Y+23	; 0x17
     cdc:	38 8d       	ldd	r19, Y+24	; 0x18
     cde:	2b 32       	cpi	r18, 0x2B	; 43
     ce0:	31 05       	cpc	r19, r1
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <main+0x1aa>
     ce4:	8f 89       	ldd	r24, Y+23	; 0x17
     ce6:	98 8d       	ldd	r25, Y+24	; 0x18
     ce8:	8d 32       	cpi	r24, 0x2D	; 45
     cea:	91 05       	cpc	r25, r1
     cec:	f9 f0       	breq	.+62     	; 0xd2c <main+0x1e6>
     cee:	eb cf       	rjmp	.-42     	; 0xcc6 <main+0x180>
	   {
	   case '+':  //open door
		   //ask user to enter password
		   HMI_promptPassword();
     cf0:	0e 94 c6 09 	call	0x138c	; 0x138c <HMI_promptPassword>

		   //ask mcu to check the password
		   HMI_sendCommand(SEND_CHECK_PASSWORD);
     cf4:	88 ef       	ldi	r24, 0xF8	; 248
     cf6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <HMI_sendCommand>
		   //send password
		   HMI_sendPassword(g_inputPassword);
     cfa:	8a e5       	ldi	r24, 0x5A	; 90
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <HMI_sendPassword>

			HMI_sendCommand(OPEN_DOOR);
     d02:	8b e2       	ldi	r24, 0x2B	; 43
     d04:	0e 94 fd 06 	call	0xdfa	; 0xdfa <HMI_sendCommand>

			g_match = HMI_receiveCommand();
     d08:	0e 94 15 07 	call	0xe2a	; 0xe2a <HMI_receiveCommand>
     d0c:	80 93 50 01 	sts	0x0150, r24

			if(g_match==OPENING_DOOR)
     d10:	80 91 50 01 	lds	r24, 0x0150
     d14:	80 3f       	cpi	r24, 0xF0	; 240
     d16:	19 f4       	brne	.+6      	; 0xd1e <main+0x1d8>
			{
				HMI_openingDoor();
     d18:	0e 94 d7 09 	call	0x13ae	; 0x13ae <HMI_openingDoor>
     d1c:	d4 cf       	rjmp	.-88     	; 0xcc6 <main+0x180>

			}
			else if(g_match == WRONG_PASSWORD)
     d1e:	80 91 50 01 	lds	r24, 0x0150
     d22:	81 3f       	cpi	r24, 0xF1	; 241
     d24:	81 f6       	brne	.-96     	; 0xcc6 <main+0x180>
			{
				HMI_wrongPassword();
     d26:	0e 94 11 0a 	call	0x1422	; 0x1422 <HMI_wrongPassword>
     d2a:	cd cf       	rjmp	.-102    	; 0xcc6 <main+0x180>

			break;

	   case '-':
		    /* Ask the user to input a password */
			HMI_promptPassword();
     d2c:	0e 94 c6 09 	call	0x138c	; 0x138c <HMI_promptPassword>
			/* Ask CONTROL MCU to check the Password */
			HMI_sendCommand(SEND_CHECK_PASSWORD);
     d30:	88 ef       	ldi	r24, 0xF8	; 248
     d32:	0e 94 fd 06 	call	0xdfa	; 0xdfa <HMI_sendCommand>
			/* Send the inputed password to the CONTROL MCU */
			HMI_sendPassword(g_inputPassword);
     d36:	8a e5       	ldi	r24, 0x5A	; 90
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <HMI_sendPassword>
			/* Inform CONTROL MCU what the user has chosen */
			HMI_sendCommand(CHANGE_PASSWORD);
     d3e:	8d e2       	ldi	r24, 0x2D	; 45
     d40:	0e 94 fd 06 	call	0xdfa	; 0xdfa <HMI_sendCommand>

			/* Receive the order command from CONTROL MCU */
			g_match = HMI_receiveCommand();
     d44:	0e 94 15 07 	call	0xe2a	; 0xe2a <HMI_receiveCommand>
     d48:	80 93 50 01 	sts	0x0150, r24

			/* In case the two passwords matches */
			if(g_match ==  CHANGING_PASSWORD)
     d4c:	80 91 50 01 	lds	r24, 0x0150
     d50:	82 3f       	cpi	r24, 0xF2	; 242
     d52:	19 f4       	brne	.+6      	; 0xd5a <main+0x214>
			{
				/* Set new password for MCU */
				HMI_newPassword();
     d54:	0e 94 2c 07 	call	0xe58	; 0xe58 <HMI_newPassword>
     d58:	b6 cf       	rjmp	.-148    	; 0xcc6 <main+0x180>
		   	}
			/* In case the two passwords did not match */
			else if(g_match == WRONG_PASSWORD)
     d5a:	80 91 50 01 	lds	r24, 0x0150
     d5e:	81 3f       	cpi	r24, 0xF1	; 241
     d60:	09 f0       	breq	.+2      	; 0xd64 <main+0x21e>
     d62:	b1 cf       	rjmp	.-158    	; 0xcc6 <main+0x180>
			{
				/* Begin wrong operation protocol */
		   		HMI_wrongPassword();
     d64:	0e 94 11 0a 	call	0x1422	; 0x1422 <HMI_wrongPassword>
     d68:	ae cf       	rjmp	.-164    	; 0xcc6 <main+0x180>

00000d6a <HMI_TimerCallBackProcessing>:

} /*end main*/


void HMI_TimerCallBackProcessing(void)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     d72:	80 91 51 01 	lds	r24, 0x0151
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 51 01 	sts	0x0151, r24
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <HMI_startTimer>:




void HMI_startTimer(void)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	2c 97       	sbiw	r28, 0x0c	; 12
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
	TIMER_ConfigType Timer_config={TIMER1_ID,COMPARE,0,F_CPU_1024,7813};
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	99 87       	std	Y+9, r25	; 0x09
     d9c:	88 87       	std	Y+8, r24	; 0x08
     d9e:	e9 e4       	ldi	r30, 0x49	; 73
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	fb 87       	std	Y+11, r31	; 0x0b
     da4:	ea 87       	std	Y+10, r30	; 0x0a
     da6:	f7 e0       	ldi	r31, 0x07	; 7
     da8:	fc 87       	std	Y+12, r31	; 0x0c
     daa:	ea 85       	ldd	r30, Y+10	; 0x0a
     dac:	fb 85       	ldd	r31, Y+11	; 0x0b
     dae:	00 80       	ld	r0, Z
     db0:	8a 85       	ldd	r24, Y+10	; 0x0a
     db2:	9b 85       	ldd	r25, Y+11	; 0x0b
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	9b 87       	std	Y+11, r25	; 0x0b
     db8:	8a 87       	std	Y+10, r24	; 0x0a
     dba:	e8 85       	ldd	r30, Y+8	; 0x08
     dbc:	f9 85       	ldd	r31, Y+9	; 0x09
     dbe:	00 82       	st	Z, r0
     dc0:	88 85       	ldd	r24, Y+8	; 0x08
     dc2:	99 85       	ldd	r25, Y+9	; 0x09
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	99 87       	std	Y+9, r25	; 0x09
     dc8:	88 87       	std	Y+8, r24	; 0x08
     dca:	9c 85       	ldd	r25, Y+12	; 0x0c
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	9c 87       	std	Y+12, r25	; 0x0c
     dd0:	ec 85       	ldd	r30, Y+12	; 0x0c
     dd2:	ee 23       	and	r30, r30
     dd4:	51 f7       	brne	.-44     	; 0xdaa <HMI_startTimer+0x28>
	Timer_init(&Timer_config);
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 78 15 	call	0x2af0	; 0x2af0 <Timer_init>
	Timer_setCallBack(HMI_TimerCallBackProcessing,TIMER1_ID);
     dde:	85 eb       	ldi	r24, 0xB5	; 181
     de0:	96 e0       	ldi	r25, 0x06	; 6
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <Timer_setCallBack>

}
     de8:	2c 96       	adiw	r28, 0x0c	; 12
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <HMI_sendCommand>:

void HMI_sendCommand(uint8 g_command)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY_TO_SEND);
     e06:	83 ef       	ldi	r24, 0xF3	; 243
     e08:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <UART_sendByte>

	while(UART_recieveByte() != READY_TO_RECEIVE);
     e0c:	0e 94 16 18 	call	0x302c	; 0x302c <UART_recieveByte>
     e10:	84 3f       	cpi	r24, 0xF4	; 244
     e12:	e1 f7       	brne	.-8      	; 0xe0c <HMI_sendCommand+0x12>
	UART_sendByte(g_command);
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <UART_sendByte>

	while(UART_recieveByte() != RECEIVE_DONE);
     e1a:	0e 94 16 18 	call	0x302c	; 0x302c <UART_recieveByte>
     e1e:	85 3f       	cpi	r24, 0xF5	; 245
     e20:	e1 f7       	brne	.-8      	; 0xe1a <HMI_sendCommand+0x20>
}
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <HMI_receiveCommand>:

uint8 HMI_receiveCommand(void)
 {
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	/* until mcu control to be ready*/
	while(UART_recieveByte() !=READY_TO_SEND);
     e32:	0e 94 16 18 	call	0x302c	; 0x302c <UART_recieveByte>
     e36:	83 3f       	cpi	r24, 0xF3	; 243
     e38:	e1 f7       	brne	.-8      	; 0xe32 <HMI_receiveCommand+0x8>

	UART_sendByte(READY_TO_RECEIVE);
     e3a:	84 ef       	ldi	r24, 0xF4	; 244
     e3c:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <UART_sendByte>

	g_command=UART_recieveByte();
     e40:	0e 94 16 18 	call	0x302c	; 0x302c <UART_recieveByte>
     e44:	80 93 59 01 	sts	0x0159, r24

	UART_sendByte(RECEIVE_DONE);
     e48:	85 ef       	ldi	r24, 0xF5	; 245
     e4a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <UART_sendByte>


	return g_command;
     e4e:	80 91 59 01 	lds	r24, 0x0159
 }
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <HMI_newPassword>:




void HMI_newPassword(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	6c 97       	sbiw	r28, 0x1c	; 28
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
	/* Set its status at first as mis-matched */
	g_match = PASS_MIS_MATCHED;
     e6c:	10 92 50 01 	sts	0x0150, r1
     e70:	23 c1       	rjmp	.+582    	; 0x10b8 <HMI_newPassword+0x260>

	/* Loop until the HMI MCU get the same password */
	while(g_match == PASS_MIS_MATCHED)
	{
		LCD_clearScreen(); /* Clear Screen */
     e72:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
		LCD_displayString("  New Password  "); /* Inform the user that he will input new password */
     e76:	89 e7       	ldi	r24, 0x79	; 121
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e8       	ldi	r25, 0x80	; 128
     e82:	ab eb       	ldi	r26, 0xBB	; 187
     e84:	b4 e4       	ldi	r27, 0x44	; 68
     e86:	89 8f       	std	Y+25, r24	; 0x19
     e88:	9a 8f       	std	Y+26, r25	; 0x1a
     e8a:	ab 8f       	std	Y+27, r26	; 0x1b
     e8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8e:	69 8d       	ldd	r22, Y+25	; 0x19
     e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	4a ef       	ldi	r20, 0xFA	; 250
     e9c:	54 e4       	ldi	r21, 0x44	; 68
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	8d 8b       	std	Y+21, r24	; 0x15
     ea8:	9e 8b       	std	Y+22, r25	; 0x16
     eaa:	af 8b       	std	Y+23, r26	; 0x17
     eac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eae:	6d 89       	ldd	r22, Y+21	; 0x15
     eb0:	7e 89       	ldd	r23, Y+22	; 0x16
     eb2:	8f 89       	ldd	r24, Y+23	; 0x17
     eb4:	98 8d       	ldd	r25, Y+24	; 0x18
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	2c f4       	brge	.+10     	; 0xed0 <HMI_newPassword+0x78>
		__ticks = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9c 8b       	std	Y+20, r25	; 0x14
     ecc:	8b 8b       	std	Y+19, r24	; 0x13
     ece:	3f c0       	rjmp	.+126    	; 0xf4e <HMI_newPassword+0xf6>
	else if (__tmp > 65535)
     ed0:	6d 89       	ldd	r22, Y+21	; 0x15
     ed2:	7e 89       	ldd	r23, Y+22	; 0x16
     ed4:	8f 89       	ldd	r24, Y+23	; 0x17
     ed6:	98 8d       	ldd	r25, Y+24	; 0x18
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	4c f5       	brge	.+82     	; 0xf3a <HMI_newPassword+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	69 8d       	ldd	r22, Y+25	; 0x19
     eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e2       	ldi	r20, 0x20	; 32
     ef6:	51 e4       	ldi	r21, 0x41	; 65
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9c 8b       	std	Y+20, r25	; 0x14
     f0e:	8b 8b       	std	Y+19, r24	; 0x13
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <HMI_newPassword+0xd8>
     f12:	88 ec       	ldi	r24, 0xC8	; 200
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9a 8b       	std	Y+18, r25	; 0x12
     f18:	89 8b       	std	Y+17, r24	; 0x11
     f1a:	89 89       	ldd	r24, Y+17	; 0x11
     f1c:	9a 89       	ldd	r25, Y+18	; 0x12
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <HMI_newPassword+0xc6>
     f22:	9a 8b       	std	Y+18, r25	; 0x12
     f24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	8b 89       	ldd	r24, Y+19	; 0x13
     f28:	9c 89       	ldd	r25, Y+20	; 0x14
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	9c 8b       	std	Y+20, r25	; 0x14
     f2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	8b 89       	ldd	r24, Y+19	; 0x13
     f32:	9c 89       	ldd	r25, Y+20	; 0x14
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	69 f7       	brne	.-38     	; 0xf12 <HMI_newPassword+0xba>
     f38:	14 c0       	rjmp	.+40     	; 0xf62 <HMI_newPassword+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3a:	6d 89       	ldd	r22, Y+21	; 0x15
     f3c:	7e 89       	ldd	r23, Y+22	; 0x16
     f3e:	8f 89       	ldd	r24, Y+23	; 0x17
     f40:	98 8d       	ldd	r25, Y+24	; 0x18
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9c 8b       	std	Y+20, r25	; 0x14
     f4c:	8b 8b       	std	Y+19, r24	; 0x13
     f4e:	8b 89       	ldd	r24, Y+19	; 0x13
     f50:	9c 89       	ldd	r25, Y+20	; 0x14
     f52:	98 8b       	std	Y+16, r25	; 0x10
     f54:	8f 87       	std	Y+15, r24	; 0x0f
     f56:	8f 85       	ldd	r24, Y+15	; 0x0f
     f58:	98 89       	ldd	r25, Y+16	; 0x10
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <HMI_newPassword+0x102>
     f5e:	98 8b       	std	Y+16, r25	; 0x10
     f60:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(STAND_PRESENTATION_TIME); /* Hold for Presentation Time */

		LCD_clearScreen(); /* Clear Screen */
     f62:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
		LCD_displayString("Enter Password"); /* Prompt the user to input the password for the first time */
     f66:	8a e8       	ldi	r24, 0x8A	; 138
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
		LCD_moveCursor(1,0); /* Move Cursor to the second line */
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_moveCursor>
		HMI_getPassword(g_inputPassword); /* Get the password from the user */
     f76:	8a e5       	ldi	r24, 0x5A	; 90
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 05 09 	call	0x120a	; 0x120a <HMI_getPassword>

		HMI_sendCommand(SEND_FIRST_PASSWORD); /* Inform the CONTROL MCU that you will send the first password */
     f7e:	86 ef       	ldi	r24, 0xF6	; 246
     f80:	0e 94 fd 06 	call	0xdfa	; 0xdfa <HMI_sendCommand>
		HMI_sendPassword(g_inputPassword); /* Send the password to the CONTROL MCU */
     f84:	8a e5       	ldi	r24, 0x5A	; 90
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <HMI_sendPassword>


		LCD_clearScreen(); /* Clear Screen */
     f8c:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
		LCD_displayString("ReEnter Password"); /* Prompt the user to input the password for the second time */
     f90:	89 e9       	ldi	r24, 0x99	; 153
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
		LCD_moveCursor(1,0); /* Move Cursor to the second line */
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_moveCursor>
		HMI_getPassword(g_inputPassword); /* Get the password from the user */
     fa0:	8a e5       	ldi	r24, 0x5A	; 90
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 05 09 	call	0x120a	; 0x120a <HMI_getPassword>

		HMI_sendCommand(SEND_SECOND_PASSWORD); /* Inform the CONTROL MCU that you will send the second password */
     fa8:	87 ef       	ldi	r24, 0xF7	; 247
     faa:	0e 94 fd 06 	call	0xdfa	; 0xdfa <HMI_sendCommand>
		HMI_sendPassword(g_inputPassword); /* Send the password to the CONTROL MCU */
     fae:	8a e5       	ldi	r24, 0x5A	; 90
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <HMI_sendPassword>

		/* Wait until the is able to send the confirmation of the second password */
		g_match= HMI_receiveCommand();
     fb6:	0e 94 15 07 	call	0xe2a	; 0xe2a <HMI_receiveCommand>
     fba:	80 93 50 01 	sts	0x0150, r24

		/* In case the Two Passwords did not match */
		if (g_match == PASS_MIS_MATCHED)
     fbe:	80 91 50 01 	lds	r24, 0x0150
     fc2:	88 23       	and	r24, r24
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <HMI_newPassword+0x170>
     fc6:	78 c0       	rjmp	.+240    	; 0x10b8 <HMI_newPassword+0x260>
		{
			LCD_clearScreen(); /* Clear Screen */
     fc8:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
			LCD_displayString("MISMATCHED Pass"); /* Display an Error Message */
     fcc:	8a ea       	ldi	r24, 0xAA	; 170
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e8       	ldi	r25, 0x80	; 128
     fd8:	ab eb       	ldi	r26, 0xBB	; 187
     fda:	b4 e4       	ldi	r27, 0x44	; 68
     fdc:	8b 87       	std	Y+11, r24	; 0x0b
     fde:	9c 87       	std	Y+12, r25	; 0x0c
     fe0:	ad 87       	std	Y+13, r26	; 0x0d
     fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8f 83       	std	Y+7, r24	; 0x07
     ffe:	98 87       	std	Y+8, r25	; 0x08
    1000:	a9 87       	std	Y+9, r26	; 0x09
    1002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <HMI_newPassword+0x1ce>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9e 83       	std	Y+6, r25	; 0x06
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <HMI_newPassword+0x24c>
	else if (__tmp > 65535)
    1026:	6f 81       	ldd	r22, Y+7	; 0x07
    1028:	78 85       	ldd	r23, Y+8	; 0x08
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <HMI_newPassword+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <HMI_newPassword+0x22e>
    1068:	88 ec       	ldi	r24, 0xC8	; 200
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <HMI_newPassword+0x21c>
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <HMI_newPassword+0x210>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <HMI_newPassword+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	6f 81       	ldd	r22, Y+7	; 0x07
    1092:	78 85       	ldd	r23, Y+8	; 0x08
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <HMI_newPassword+0x258>
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
{
	/* Set its status at first as mis-matched */
	g_match = PASS_MIS_MATCHED;

	/* Loop until the HMI MCU get the same password */
	while(g_match == PASS_MIS_MATCHED)
    10b8:	80 91 50 01 	lds	r24, 0x0150
    10bc:	88 23       	and	r24, r24
    10be:	09 f4       	brne	.+2      	; 0x10c2 <HMI_newPassword+0x26a>
    10c0:	d8 ce       	rjmp	.-592    	; 0xe72 <HMI_newPassword+0x1a>
			LCD_clearScreen(); /* Clear Screen */
			LCD_displayString("MISMATCHED Pass"); /* Display an Error Message */
			_delay_ms(STAND_PRESENTATION_TIME); /* Hold for Presentation Time */
		} /* End if */
	} /* End while loop */
} /* End HMI_newPassword Function */
    10c2:	6c 96       	adiw	r28, 0x1c	; 28
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <HMI_sendPassword>:

void HMI_sendPassword(uint8 a_inputPassword[])
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	61 97       	sbiw	r28, 0x11	; 17
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	99 8b       	std	Y+17, r25	; 0x11
    10ea:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    10ec:	1f 86       	std	Y+15, r1	; 0x0f
    10ee:	80 c0       	rjmp	.+256    	; 0x11f0 <HMI_sendPassword+0x11c>
	{
		UART_sendByte(a_inputPassword[counter]); /* Send Password element by element to the CONTROL MCU */
    10f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	88 89       	ldd	r24, Y+16	; 0x10
    10f8:	99 89       	ldd	r25, Y+17	; 0x11
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	80 81       	ld	r24, Z
    1102:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <UART_sendByte>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e2       	ldi	r26, 0x20	; 32
    110c:	b1 e4       	ldi	r27, 0x41	; 65
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	ad 87       	std	Y+13, r26	; 0x0d
    1114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <HMI_sendPassword+0x84>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <HMI_sendPassword+0x102>
	else if (__tmp > 65535)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <HMI_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <HMI_sendPassword+0xe4>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <HMI_sendPassword+0xd2>
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <HMI_sendPassword+0xc6>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <HMI_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <HMI_sendPassword+0x10e>
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
void HMI_sendPassword(uint8 a_inputPassword[])
{
	uint8 counter; /* Variable to work as a counter */

	/* Loop on the passwords elements */
	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    11ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	8f 87       	std	Y+15, r24	; 0x0f
    11f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f2:	85 30       	cpi	r24, 0x05	; 5
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <HMI_sendPassword+0x124>
    11f6:	7c cf       	rjmp	.-264    	; 0x10f0 <HMI_sendPassword+0x1c>
	{
		UART_sendByte(a_inputPassword[counter]); /* Send Password element by element to the CONTROL MCU */
		_delay_ms(SEND_RECEIVE_TIME);      /* Delay for the time gap for sending receiving time between the MCUs */
	} /* End for */
} /* End HMI_sendPassword Function */
    11f8:	61 96       	adiw	r28, 0x11	; 17
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <HMI_getPassword>:



void HMI_getPassword(uint8 a_inputPassword[])
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	62 97       	sbiw	r28, 0x12	; 18
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	9a 8b       	std	Y+18, r25	; 0x12
    1220:	89 8b       	std	Y+17, r24	; 0x11
	LCD_moveCursor(1, 0);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_moveCursor>

	uint8 counter = 0; /* Variable to be used as a counter */
    122a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 password_key = 0; /* Variable to store the pressed key */
    122c:	1f 86       	std	Y+15, r1	; 0x0f
    122e:	88 c0       	rjmp	.+272    	; 0x1340 <HMI_getPassword+0x136>

	/* Stop getting number after you get 5 characters */
	while( counter != PASSWORD_LENGTH )
	{
		password_key = KEYPAD_getPressedKey(); /* Get the get the key pressed and store it in the password array */
    1230:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KEYPAD_getPressedKey>
    1234:	8f 87       	std	Y+15, r24	; 0x0f

		if ( (password_key >= 0) && (password_key <= 9) )
    1236:	8f 85       	ldd	r24, Y+15	; 0x0f
    1238:	8a 30       	cpi	r24, 0x0A	; 10
    123a:	80 f4       	brcc	.+32     	; 0x125c <HMI_getPassword+0x52>
		{
			LCD_displayCharacter('*'); /* Display asterisk for privacy */
    123c:	8a e2       	ldi	r24, 0x2A	; 42
    123e:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
			a_inputPassword[counter] = password_key;
    1242:	88 89       	ldd	r24, Y+16	; 0x10
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	89 89       	ldd	r24, Y+17	; 0x11
    124a:	9a 89       	ldd	r25, Y+18	; 0x12
    124c:	fc 01       	movw	r30, r24
    124e:	e2 0f       	add	r30, r18
    1250:	f3 1f       	adc	r31, r19
    1252:	8f 85       	ldd	r24, Y+15	; 0x0f
    1254:	80 83       	st	Z, r24
			counter++;
    1256:	88 89       	ldd	r24, Y+16	; 0x10
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	88 8b       	std	Y+16, r24	; 0x10
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	aa ef       	ldi	r26, 0xFA	; 250
    1262:	b3 e4       	ldi	r27, 0x43	; 67
    1264:	8b 87       	std	Y+11, r24	; 0x0b
    1266:	9c 87       	std	Y+12, r25	; 0x0c
    1268:	ad 87       	std	Y+13, r26	; 0x0d
    126a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	98 87       	std	Y+8, r25	; 0x08
    1288:	a9 87       	std	Y+9, r26	; 0x09
    128a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <HMI_getPassword+0xa4>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <HMI_getPassword+0x122>
	else if (__tmp > 65535)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <HMI_getPassword+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <HMI_getPassword+0x104>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <HMI_getPassword+0xf2>
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <HMI_getPassword+0xe6>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <HMI_getPassword+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <HMI_getPassword+0x12e>
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01

	uint8 counter = 0; /* Variable to be used as a counter */
	uint8 password_key = 0; /* Variable to store the pressed key */

	/* Stop getting number after you get 5 characters */
	while( counter != PASSWORD_LENGTH )
    1340:	88 89       	ldd	r24, Y+16	; 0x10
    1342:	85 30       	cpi	r24, 0x05	; 5
    1344:	09 f0       	breq	.+2      	; 0x1348 <HMI_getPassword+0x13e>
    1346:	74 cf       	rjmp	.-280    	; 0x1230 <HMI_getPassword+0x26>
		}
		_delay_ms(KEYPAD_CLICK_TIME); /* Delay time for keypad press */
	} /* End while loop */

	/* Don't leave until the user press (=) symbol */
	while ( KEYPAD_getPressedKey() != '=' );
    1348:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KEYPAD_getPressedKey>
    134c:	8d 33       	cpi	r24, 0x3D	; 61
    134e:	e1 f7       	brne	.-8      	; 0x1348 <HMI_getPassword+0x13e>
} /* End HMI_getPassword Function */
    1350:	62 96       	adiw	r28, 0x12	; 18
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <HMI_mainOptions>:


void HMI_mainOptions(void)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	 LCD_clearScreen();
    136a:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
	 LCD_displayString("(+): Open Door"); /* Display the first option */
    136e:	8a eb       	ldi	r24, 0xBA	; 186
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
	 LCD_moveCursor(1,0); /* Move to the next line */
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_moveCursor>
   	LCD_displayString("(-): Change Pass"); /* Display the second option */
    137e:	89 ec       	ldi	r24, 0xC9	; 201
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>


}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <HMI_promptPassword>:


void HMI_promptPassword(void)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	 LCD_clearScreen();
    1394:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
	 LCD_displayString("enter password");
    1398:	8a ed       	ldi	r24, 0xDA	; 218
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
	 HMI_getPassword(g_inputPassword);
    13a0:	8a e5       	ldi	r24, 0x5A	; 90
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 05 09 	call	0x120a	; 0x120a <HMI_getPassword>

}
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <HMI_openingDoor>:


void HMI_openingDoor(void)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	HMI_startTimer();
    13b6:	0e 94 c1 06 	call	0xd82	; 0xd82 <HMI_startTimer>
	LCD_clearScreen(); /* Clear Screen */
    13ba:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
	LCD_displayString("Door is Opening"); /* Display explanation message on LCD */
    13be:	89 ee       	ldi	r24, 0xE9	; 233
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
	while(g_tick<OPEN_DOOR_TIME);
    13c6:	80 91 51 01 	lds	r24, 0x0151
    13ca:	8f 30       	cpi	r24, 0x0F	; 15
    13cc:	e0 f3       	brcs	.-8      	; 0x13c6 <HMI_openingDoor+0x18>
	g_tick=0;
    13ce:	10 92 51 01 	sts	0x0151, r1

	LCD_clearScreen();
    13d2:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
	for(g_tick=0;g_tick<3;g_tick++)
    13d6:	10 92 51 01 	sts	0x0151, r1
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <HMI_openingDoor+0x40>
	{
	LCD_displayString("Door is on hold");
    13dc:	89 ef       	ldi	r24, 0xF9	; 249
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
	LCD_displayString("Door is Opening"); /* Display explanation message on LCD */
	while(g_tick<OPEN_DOOR_TIME);
	g_tick=0;

	LCD_clearScreen();
	for(g_tick=0;g_tick<3;g_tick++)
    13e4:	80 91 51 01 	lds	r24, 0x0151
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 51 01 	sts	0x0151, r24
    13ee:	80 91 51 01 	lds	r24, 0x0151
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	98 f3       	brcs	.-26     	; 0x13dc <HMI_openingDoor+0x2e>
	{
	LCD_displayString("Door is on hold");
	/* Display explanation message on LCD */
	}

	g_tick=0;
    13f6:	10 92 51 01 	sts	0x0151, r1

	LCD_clearScreen();
    13fa:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
	LCD_displayString("Door is Closing"); /* Display explanation message on LCD */
    13fe:	89 e0       	ldi	r24, 0x09	; 9
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
	while(g_tick<15);
    1406:	80 91 51 01 	lds	r24, 0x0151
    140a:	8f 30       	cpi	r24, 0x0F	; 15
    140c:	e0 f3       	brcs	.-8      	; 0x1406 <HMI_openingDoor+0x58>
	g_tick=0;
    140e:	10 92 51 01 	sts	0x0151, r1


	 Timer_DeInit(TIMER1_ID); /* Stop the timer */
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Timer_DeInit>
	  LCD_clearScreen(); /* Clear Screen */
    1418:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>

}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <HMI_wrongPassword>:




void HMI_wrongPassword(void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	2e 97       	sbiw	r28, 0x0e	; 14
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
	g_passwordMistakes++;
    1436:	80 91 52 01 	lds	r24, 0x0152
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	80 93 52 01 	sts	0x0152, r24

	LCD_clearScreen(); /* Clear Screen */
    1440:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
	LCD_displayString(" Wrong Password "); /* Display explanation message on LCD */
    1444:	89 e1       	ldi	r24, 0x19	; 25
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e8       	ldi	r25, 0x80	; 128
    1450:	ab eb       	ldi	r26, 0xBB	; 187
    1452:	b4 e4       	ldi	r27, 0x44	; 68
    1454:	8b 87       	std	Y+11, r24	; 0x0b
    1456:	9c 87       	std	Y+12, r25	; 0x0c
    1458:	ad 87       	std	Y+13, r26	; 0x0d
    145a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145c:	6b 85       	ldd	r22, Y+11	; 0x0b
    145e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1460:	8d 85       	ldd	r24, Y+13	; 0x0d
    1462:	9e 85       	ldd	r25, Y+14	; 0x0e
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	4a ef       	ldi	r20, 0xFA	; 250
    146a:	54 e4       	ldi	r21, 0x44	; 68
    146c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	8f 83       	std	Y+7, r24	; 0x07
    1476:	98 87       	std	Y+8, r25	; 0x08
    1478:	a9 87       	std	Y+9, r26	; 0x09
    147a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1490:	88 23       	and	r24, r24
    1492:	2c f4       	brge	.+10     	; 0x149e <HMI_wrongPassword+0x7c>
		__ticks = 1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9e 83       	std	Y+6, r25	; 0x06
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	3f c0       	rjmp	.+126    	; 0x151c <HMI_wrongPassword+0xfa>
	else if (__tmp > 65535)
    149e:	6f 81       	ldd	r22, Y+7	; 0x07
    14a0:	78 85       	ldd	r23, Y+8	; 0x08
    14a2:	89 85       	ldd	r24, Y+9	; 0x09
    14a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	3f ef       	ldi	r19, 0xFF	; 255
    14aa:	4f e7       	ldi	r20, 0x7F	; 127
    14ac:	57 e4       	ldi	r21, 0x47	; 71
    14ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	4c f5       	brge	.+82     	; 0x1508 <HMI_wrongPassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    14bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e2       	ldi	r20, 0x20	; 32
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	9e 83       	std	Y+6, r25	; 0x06
    14dc:	8d 83       	std	Y+5, r24	; 0x05
    14de:	0f c0       	rjmp	.+30     	; 0x14fe <HMI_wrongPassword+0xdc>
    14e0:	88 ec       	ldi	r24, 0xC8	; 200
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 83       	std	Y+4, r25	; 0x04
    14e6:	8b 83       	std	Y+3, r24	; 0x03
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <HMI_wrongPassword+0xca>
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	69 f7       	brne	.-38     	; 0x14e0 <HMI_wrongPassword+0xbe>
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <HMI_wrongPassword+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1508:	6f 81       	ldd	r22, Y+7	; 0x07
    150a:	78 85       	ldd	r23, Y+8	; 0x08
    150c:	89 85       	ldd	r24, Y+9	; 0x09
    150e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	9e 83       	std	Y+6, r25	; 0x06
    151a:	8d 83       	std	Y+5, r24	; 0x05
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <HMI_wrongPassword+0x106>
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STAND_PRESENTATION_TIME); /* Hold for Presentation Time */

	/* If the user entered the password 3 times wrong */
	if(g_passwordMistakes == MAX_NUM_OF_MISTAKES)
    1530:	80 91 52 01 	lds	r24, 0x0152
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	99 f4       	brne	.+38     	; 0x155e <HMI_wrongPassword+0x13c>
	{
		HMI_startTimer(); /* Start the timer to measure time period */
    1538:	0e 94 c1 06 	call	0xd82	; 0xd82 <HMI_startTimer>

		LCD_clearScreen(); /* Clear Screen */
    153c:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
		LCD_displayString("!!! WARNING !!!"); /* Display warning message on LCD */
    1540:	8a e2       	ldi	r24, 0x2A	; 42
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>

		while(g_tick != WARNING_TIME); /* Display the message for one minute */
    1548:	80 91 51 01 	lds	r24, 0x0151
    154c:	8c 33       	cpi	r24, 0x3C	; 60
    154e:	e1 f7       	brne	.-8      	; 0x1548 <HMI_wrongPassword+0x126>

		/* Reset the counters */
		g_passwordMistakes = 0;
    1550:	10 92 52 01 	sts	0x0152, r1
		g_tick = 0;
    1554:	10 92 51 01 	sts	0x0151, r1

	    Timer_DeInit(TIMER1_ID); /* Stop the timer */
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Timer_DeInit>
	} /* End if */

    LCD_clearScreen(); /* Clear Screen */
    155e:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_clearScreen>
}
    1562:	2e 96       	adiw	r28, 0x0e	; 14
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <GPIO_setupPinDirection+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <GPIO_setupPinDirection+0x8>
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	6a 83       	std	Y+2, r22	; 0x02
    1586:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	08 f0       	brcs	.+2      	; 0x1590 <GPIO_setupPinDirection+0x1c>
    158e:	d5 c0       	rjmp	.+426    	; 0x173a <GPIO_setupPinDirection+0x1c6>
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	08 f0       	brcs	.+2      	; 0x1598 <GPIO_setupPinDirection+0x24>
    1596:	d1 c0       	rjmp	.+418    	; 0x173a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3d 83       	std	Y+5, r19	; 0x05
    15a0:	2c 83       	std	Y+4, r18	; 0x04
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <GPIO_setupPinDirection+0x3a>
    15ac:	43 c0       	rjmp	.+134    	; 0x1634 <GPIO_setupPinDirection+0xc0>
    15ae:	2c 81       	ldd	r18, Y+4	; 0x04
    15b0:	3d 81       	ldd	r19, Y+5	; 0x05
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <GPIO_setupPinDirection+0x4e>
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	71 f0       	breq	.+28     	; 0x15dc <GPIO_setupPinDirection+0x68>
    15c0:	bc c0       	rjmp	.+376    	; 0x173a <GPIO_setupPinDirection+0x1c6>
    15c2:	2c 81       	ldd	r18, Y+4	; 0x04
    15c4:	3d 81       	ldd	r19, Y+5	; 0x05
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <GPIO_setupPinDirection+0x5a>
    15cc:	5f c0       	rjmp	.+190    	; 0x168c <GPIO_setupPinDirection+0x118>
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	91 05       	cpc	r25, r1
    15d6:	09 f4       	brne	.+2      	; 0x15da <GPIO_setupPinDirection+0x66>
    15d8:	85 c0       	rjmp	.+266    	; 0x16e4 <GPIO_setupPinDirection+0x170>
    15da:	af c0       	rjmp	.+350    	; 0x173a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	a1 f4       	brne	.+40     	; 0x160a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15e2:	aa e3       	ldi	r26, 0x3A	; 58
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	ea e3       	ldi	r30, 0x3A	; 58
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <GPIO_setupPinDirection+0x8c>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <GPIO_setupPinDirection+0x88>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	98 c0       	rjmp	.+304    	; 0x173a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    160a:	aa e3       	ldi	r26, 0x3A	; 58
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ea e3       	ldi	r30, 0x3A	; 58
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_setupPinDirection+0xb4>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_setupPinDirection+0xb0>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	83 c0       	rjmp	.+262    	; 0x173a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	a1 f4       	brne	.+40     	; 0x1662 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    163a:	a7 e3       	ldi	r26, 0x37	; 55
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e7 e3       	ldi	r30, 0x37	; 55
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_setupPinDirection+0xe4>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_setupPinDirection+0xe0>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	6c c0       	rjmp	.+216    	; 0x173a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1662:	a7 e3       	ldi	r26, 0x37	; 55
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e7 e3       	ldi	r30, 0x37	; 55
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_setupPinDirection+0x10c>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_setupPinDirection+0x108>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	57 c0       	rjmp	.+174    	; 0x173a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	a1 f4       	brne	.+40     	; 0x16ba <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1692:	a4 e3       	ldi	r26, 0x34	; 52
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e4 e3       	ldi	r30, 0x34	; 52
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_setupPinDirection+0x13c>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_setupPinDirection+0x138>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	40 c0       	rjmp	.+128    	; 0x173a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16ba:	a4 e3       	ldi	r26, 0x34	; 52
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e4 e3       	ldi	r30, 0x34	; 52
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <GPIO_setupPinDirection+0x164>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <GPIO_setupPinDirection+0x160>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	2b c0       	rjmp	.+86     	; 0x173a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	a1 f4       	brne	.+40     	; 0x1712 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16ea:	a1 e3       	ldi	r26, 0x31	; 49
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e1 e3       	ldi	r30, 0x31	; 49
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_setupPinDirection+0x194>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_setupPinDirection+0x190>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	14 c0       	rjmp	.+40     	; 0x173a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1712:	a1 e3       	ldi	r26, 0x31	; 49
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e1 e3       	ldi	r30, 0x31	; 49
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <GPIO_setupPinDirection+0x1bc>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <GPIO_setupPinDirection+0x1b8>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <GPIO_writePin+0x6>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <GPIO_writePin+0x8>
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	6a 83       	std	Y+2, r22	; 0x02
    175c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	88 30       	cpi	r24, 0x08	; 8
    1762:	08 f0       	brcs	.+2      	; 0x1766 <GPIO_writePin+0x1c>
    1764:	d5 c0       	rjmp	.+426    	; 0x1910 <GPIO_writePin+0x1c6>
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	08 f0       	brcs	.+2      	; 0x176e <GPIO_writePin+0x24>
    176c:	d1 c0       	rjmp	.+418    	; 0x1910 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3d 83       	std	Y+5, r19	; 0x05
    1776:	2c 83       	std	Y+4, r18	; 0x04
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <GPIO_writePin+0x3a>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <GPIO_writePin+0xc0>
    1784:	2c 81       	ldd	r18, Y+4	; 0x04
    1786:	3d 81       	ldd	r19, Y+5	; 0x05
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	2c f4       	brge	.+10     	; 0x1798 <GPIO_writePin+0x4e>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	71 f0       	breq	.+28     	; 0x17b2 <GPIO_writePin+0x68>
    1796:	bc c0       	rjmp	.+376    	; 0x1910 <GPIO_writePin+0x1c6>
    1798:	2c 81       	ldd	r18, Y+4	; 0x04
    179a:	3d 81       	ldd	r19, Y+5	; 0x05
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <GPIO_writePin+0x5a>
    17a2:	5f c0       	rjmp	.+190    	; 0x1862 <GPIO_writePin+0x118>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <GPIO_writePin+0x66>
    17ae:	85 c0       	rjmp	.+266    	; 0x18ba <GPIO_writePin+0x170>
    17b0:	af c0       	rjmp	.+350    	; 0x1910 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	a1 f4       	brne	.+40     	; 0x17e0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17b8:	ab e3       	ldi	r26, 0x3B	; 59
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <GPIO_writePin+0x8c>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <GPIO_writePin+0x88>
    17da:	84 2b       	or	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	98 c0       	rjmp	.+304    	; 0x1910 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17e0:	ab e3       	ldi	r26, 0x3B	; 59
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	eb e3       	ldi	r30, 0x3B	; 59
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <GPIO_writePin+0xb4>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <GPIO_writePin+0xb0>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	83 c0       	rjmp	.+262    	; 0x1910 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	a1 f4       	brne	.+40     	; 0x1838 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1810:	a8 e3       	ldi	r26, 0x38	; 56
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e8 e3       	ldi	r30, 0x38	; 56
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_writePin+0xe4>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_writePin+0xe0>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	6c c0       	rjmp	.+216    	; 0x1910 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1838:	a8 e3       	ldi	r26, 0x38	; 56
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e8 e3       	ldi	r30, 0x38	; 56
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_writePin+0x10c>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_writePin+0x108>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	57 c0       	rjmp	.+174    	; 0x1910 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	a1 f4       	brne	.+40     	; 0x1890 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1868:	a5 e3       	ldi	r26, 0x35	; 53
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e3       	ldi	r30, 0x35	; 53
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <GPIO_writePin+0x13c>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <GPIO_writePin+0x138>
    188a:	84 2b       	or	r24, r20
    188c:	8c 93       	st	X, r24
    188e:	40 c0       	rjmp	.+128    	; 0x1910 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1890:	a5 e3       	ldi	r26, 0x35	; 53
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e3       	ldi	r30, 0x35	; 53
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <GPIO_writePin+0x164>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <GPIO_writePin+0x160>
    18b2:	80 95       	com	r24
    18b4:	84 23       	and	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	2b c0       	rjmp	.+86     	; 0x1910 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	a1 f4       	brne	.+40     	; 0x18e8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18c0:	a2 e3       	ldi	r26, 0x32	; 50
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e2 e3       	ldi	r30, 0x32	; 50
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <GPIO_writePin+0x194>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <GPIO_writePin+0x190>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18e8:	a2 e3       	ldi	r26, 0x32	; 50
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e2 e3       	ldi	r30, 0x32	; 50
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <GPIO_writePin+0x1bc>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <GPIO_writePin+0x1b8>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_readPin+0x6>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <GPIO_readPin+0x8>
    1928:	0f 92       	push	r0
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1932:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	88 30       	cpi	r24, 0x08	; 8
    1938:	08 f0       	brcs	.+2      	; 0x193c <GPIO_readPin+0x1c>
    193a:	84 c0       	rjmp	.+264    	; 0x1a44 <GPIO_readPin+0x124>
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	84 30       	cpi	r24, 0x04	; 4
    1940:	08 f0       	brcs	.+2      	; 0x1944 <GPIO_readPin+0x24>
    1942:	80 c0       	rjmp	.+256    	; 0x1a44 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3d 83       	std	Y+5, r19	; 0x05
    194c:	2c 83       	std	Y+4, r18	; 0x04
    194e:	4c 81       	ldd	r20, Y+4	; 0x04
    1950:	5d 81       	ldd	r21, Y+5	; 0x05
    1952:	41 30       	cpi	r20, 0x01	; 1
    1954:	51 05       	cpc	r21, r1
    1956:	79 f1       	breq	.+94     	; 0x19b6 <GPIO_readPin+0x96>
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	91 05       	cpc	r25, r1
    1960:	34 f4       	brge	.+12     	; 0x196e <GPIO_readPin+0x4e>
    1962:	2c 81       	ldd	r18, Y+4	; 0x04
    1964:	3d 81       	ldd	r19, Y+5	; 0x05
    1966:	21 15       	cp	r18, r1
    1968:	31 05       	cpc	r19, r1
    196a:	69 f0       	breq	.+26     	; 0x1986 <GPIO_readPin+0x66>
    196c:	6b c0       	rjmp	.+214    	; 0x1a44 <GPIO_readPin+0x124>
    196e:	4c 81       	ldd	r20, Y+4	; 0x04
    1970:	5d 81       	ldd	r21, Y+5	; 0x05
    1972:	42 30       	cpi	r20, 0x02	; 2
    1974:	51 05       	cpc	r21, r1
    1976:	b9 f1       	breq	.+110    	; 0x19e6 <GPIO_readPin+0xc6>
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9d 81       	ldd	r25, Y+5	; 0x05
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <GPIO_readPin+0x64>
    1982:	49 c0       	rjmp	.+146    	; 0x1a16 <GPIO_readPin+0xf6>
    1984:	5f c0       	rjmp	.+190    	; 0x1a44 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1986:	e9 e3       	ldi	r30, 0x39	; 57
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a9 01       	movw	r20, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_readPin+0x7e>
    199a:	55 95       	asr	r21
    199c:	47 95       	ror	r20
    199e:	8a 95       	dec	r24
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_readPin+0x7a>
    19a2:	ca 01       	movw	r24, r20
    19a4:	81 70       	andi	r24, 0x01	; 1
    19a6:	90 70       	andi	r25, 0x00	; 0
    19a8:	88 23       	and	r24, r24
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	49 c0       	rjmp	.+146    	; 0x1a44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19b2:	19 82       	std	Y+1, r1	; 0x01
    19b4:	47 c0       	rjmp	.+142    	; 0x1a44 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19b6:	e6 e3       	ldi	r30, 0x36	; 54
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_readPin+0xae>
    19ca:	55 95       	asr	r21
    19cc:	47 95       	ror	r20
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_readPin+0xaa>
    19d2:	ca 01       	movw	r24, r20
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	90 70       	andi	r25, 0x00	; 0
    19d8:	88 23       	and	r24, r24
    19da:	19 f0       	breq	.+6      	; 0x19e2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	31 c0       	rjmp	.+98     	; 0x1a44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e2:	19 82       	std	Y+1, r1	; 0x01
    19e4:	2f c0       	rjmp	.+94     	; 0x1a44 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19e6:	e3 e3       	ldi	r30, 0x33	; 51
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_readPin+0xde>
    19fa:	55 95       	asr	r21
    19fc:	47 95       	ror	r20
    19fe:	8a 95       	dec	r24
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_readPin+0xda>
    1a02:	ca 01       	movw	r24, r20
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	90 70       	andi	r25, 0x00	; 0
    1a08:	88 23       	and	r24, r24
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	19 c0       	rjmp	.+50     	; 0x1a44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a12:	19 82       	std	Y+1, r1	; 0x01
    1a14:	17 c0       	rjmp	.+46     	; 0x1a44 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a16:	e0 e3       	ldi	r30, 0x30	; 48
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a9 01       	movw	r20, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_readPin+0x10e>
    1a2a:	55 95       	asr	r21
    1a2c:	47 95       	ror	r20
    1a2e:	8a 95       	dec	r24
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_readPin+0x10a>
    1a32:	ca 01       	movw	r24, r20
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	90 70       	andi	r25, 0x00	; 0
    1a38:	88 23       	and	r24, r24
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a42:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <GPIO_setupPortDirection+0x6>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <GPIO_setupPortDirection+0x8>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	84 30       	cpi	r24, 0x04	; 4
    1a6a:	90 f5       	brcc	.+100    	; 0x1ad0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3c 83       	std	Y+4, r19	; 0x04
    1a74:	2b 83       	std	Y+3, r18	; 0x03
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	d1 f0       	breq	.+52     	; 0x1ab4 <GPIO_setupPortDirection+0x5e>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <GPIO_setupPortDirection+0x3e>
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <GPIO_setupPortDirection+0x54>
    1a92:	1e c0       	rjmp	.+60     	; 0x1ad0 <GPIO_setupPortDirection+0x7a>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	81 f0       	breq	.+32     	; 0x1abe <GPIO_setupPortDirection+0x68>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	81 f0       	breq	.+32     	; 0x1ac8 <GPIO_setupPortDirection+0x72>
    1aa8:	13 c0       	rjmp	.+38     	; 0x1ad0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1aaa:	ea e3       	ldi	r30, 0x3A	; 58
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	80 83       	st	Z, r24
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ab4:	e7 e3       	ldi	r30, 0x37	; 55
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 83       	st	Z, r24
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1abe:	e4 e3       	ldi	r30, 0x34	; 52
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ac8:	e1 e3       	ldi	r30, 0x31	; 49
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPIO_writePort+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <GPIO_writePort+0x8>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	90 f5       	brcc	.+100    	; 0x1b58 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	3c 83       	std	Y+4, r19	; 0x04
    1afc:	2b 83       	std	Y+3, r18	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	d1 f0       	breq	.+52     	; 0x1b3c <GPIO_writePort+0x5e>
    1b08:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <GPIO_writePort+0x3e>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	61 f0       	breq	.+24     	; 0x1b32 <GPIO_writePort+0x54>
    1b1a:	1e c0       	rjmp	.+60     	; 0x1b58 <GPIO_writePort+0x7a>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	81 f0       	breq	.+32     	; 0x1b46 <GPIO_writePort+0x68>
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	81 f0       	breq	.+32     	; 0x1b50 <GPIO_writePort+0x72>
    1b30:	13 c0       	rjmp	.+38     	; 0x1b58 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b32:	eb e3       	ldi	r30, 0x3B	; 59
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	80 83       	st	Z, r24
    1b3a:	0e c0       	rjmp	.+28     	; 0x1b58 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b3c:	e8 e3       	ldi	r30, 0x38	; 56
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	80 83       	st	Z, r24
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b46:	e5 e3       	ldi	r30, 0x35	; 53
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	80 83       	st	Z, r24
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b50:	e2 e3       	ldi	r30, 0x32	; 50
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <GPIO_readPort+0x6>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <GPIO_readPort+0x8>
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b74:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	84 30       	cpi	r24, 0x04	; 4
    1b7a:	90 f5       	brcc	.+100    	; 0x1be0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3c 83       	std	Y+4, r19	; 0x04
    1b84:	2b 83       	std	Y+3, r18	; 0x03
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	d1 f0       	breq	.+52     	; 0x1bc4 <GPIO_readPort+0x5e>
    1b90:	2b 81       	ldd	r18, Y+3	; 0x03
    1b92:	3c 81       	ldd	r19, Y+4	; 0x04
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 05       	cpc	r19, r1
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <GPIO_readPort+0x3e>
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <GPIO_readPort+0x54>
    1ba2:	1e c0       	rjmp	.+60     	; 0x1be0 <GPIO_readPort+0x7a>
    1ba4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	81 f0       	breq	.+32     	; 0x1bce <GPIO_readPort+0x68>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	81 f0       	breq	.+32     	; 0x1bd8 <GPIO_readPort+0x72>
    1bb8:	13 c0       	rjmp	.+38     	; 0x1be0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bba:	e9 e3       	ldi	r30, 0x39	; 57
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	0e c0       	rjmp	.+28     	; 0x1be0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bc4:	e6 e3       	ldi	r30, 0x36	; 54
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	09 c0       	rjmp	.+18     	; 0x1be0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bce:	e3 e3       	ldi	r30, 0x33	; 51
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1bd8:	e0 e3       	ldi	r30, 0x30	; 48
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <KEYPAD_getPressedKey+0x6>
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	41 e0       	ldi	r20, 0x01	; 1
    1c0a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	63 e0       	ldi	r22, 0x03	; 3
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>

	/* Set/Clear the row output pin */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	61 e0       	ldi	r22, 0x01	; 1
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	63 e0       	ldi	r22, 0x03	; 3
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	64 e0       	ldi	r22, 0x04	; 4
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	65 e0       	ldi	r22, 0x05	; 5
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	66 e0       	ldi	r22, 0x06	; 6
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	67 e0       	ldi	r22, 0x07	; 7
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c72:	19 82       	std	Y+1, r1	; 0x01
    1c74:	35 c0       	rjmp	.+106    	; 0x1ce0 <KEYPAD_getPressedKey+0xf0>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	69 81       	ldd	r22, Y+1	; 0x01
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c80:	1a 82       	std	Y+2, r1	; 0x02
    1c82:	23 c0       	rjmp	.+70     	; 0x1cca <KEYPAD_getPressedKey+0xda>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	98 2f       	mov	r25, r24
    1c88:	9c 5f       	subi	r25, 0xFC	; 252
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	69 2f       	mov	r22, r25
    1c8e:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_readPin>
    1c92:	88 23       	and	r24, r24
    1c94:	b9 f4       	brne	.+46     	; 0x1cc4 <KEYPAD_getPressedKey+0xd4>
				{
//					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	69 81       	ldd	r22, Y+1	; 0x01
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	98 2f       	mov	r25, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	89 0f       	add	r24, r25
    1cb4:	8f 5f       	subi	r24, 0xFF	; 255
    1cb6:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <KEYPAD_4x4_adjustKeyNumber>
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	8f 5f       	subi	r24, 0xFF	; 255
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	84 30       	cpi	r24, 0x04	; 4
    1cce:	d0 f2       	brcs	.-76     	; 0x1c84 <KEYPAD_getPressedKey+0x94>
						#endif
					#endif
				}
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	69 81       	ldd	r22, Y+1	; 0x01
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	8f 5f       	subi	r24, 0xFF	; 255
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	84 30       	cpi	r24, 0x04	; 4
    1ce4:	40 f2       	brcs	.-112    	; 0x1c76 <KEYPAD_getPressedKey+0x86>
    1ce6:	c5 cf       	rjmp	.-118    	; 0x1c72 <KEYPAD_getPressedKey+0x82>

00001ce8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <KEYPAD_4x4_adjustKeyNumber+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1cf6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3c 83       	std	Y+4, r19	; 0x04
    1d00:	2b 83       	std	Y+3, r18	; 0x03
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	91 05       	cpc	r25, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d0c:	70 c0       	rjmp	.+224    	; 0x1dee <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d10:	3c 81       	ldd	r19, Y+4	; 0x04
    1d12:	29 30       	cpi	r18, 0x09	; 9
    1d14:	31 05       	cpc	r19, r1
    1d16:	5c f5       	brge	.+86     	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	91 05       	cpc	r25, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d22:	59 c0       	rjmp	.+178    	; 0x1dd6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d24:	2b 81       	ldd	r18, Y+3	; 0x03
    1d26:	3c 81       	ldd	r19, Y+4	; 0x04
    1d28:	25 30       	cpi	r18, 0x05	; 5
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	9c f4       	brge	.+38     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	82 30       	cpi	r24, 0x02	; 2
    1d34:	91 05       	cpc	r25, r1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d38:	48 c0       	rjmp	.+144    	; 0x1dca <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3e:	23 30       	cpi	r18, 0x03	; 3
    1d40:	31 05       	cpc	r19, r1
    1d42:	0c f0       	brlt	.+2      	; 0x1d46 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d44:	45 c0       	rjmp	.+138    	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d50:	39 c0       	rjmp	.+114    	; 0x1dc4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d52:	67 c0       	rjmp	.+206    	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d54:	2b 81       	ldd	r18, Y+3	; 0x03
    1d56:	3c 81       	ldd	r19, Y+4	; 0x04
    1d58:	26 30       	cpi	r18, 0x06	; 6
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d5e:	41 c0       	rjmp	.+130    	; 0x1de2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	87 30       	cpi	r24, 0x07	; 7
    1d66:	91 05       	cpc	r25, r1
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d6a:	3e c0       	rjmp	.+124    	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d6c:	37 c0       	rjmp	.+110    	; 0x1ddc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	2c 30       	cpi	r18, 0x0C	; 12
    1d74:	31 05       	cpc	r19, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d78:	46 c0       	rjmp	.+140    	; 0x1e06 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	8d 30       	cpi	r24, 0x0D	; 13
    1d80:	91 05       	cpc	r25, r1
    1d82:	5c f4       	brge	.+22     	; 0x1d9a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d84:	2b 81       	ldd	r18, Y+3	; 0x03
    1d86:	3c 81       	ldd	r19, Y+4	; 0x04
    1d88:	2a 30       	cpi	r18, 0x0A	; 10
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	b1 f1       	breq	.+108    	; 0x1dfa <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	8b 30       	cpi	r24, 0x0B	; 11
    1d94:	91 05       	cpc	r25, r1
    1d96:	a4 f5       	brge	.+104    	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d98:	2d c0       	rjmp	.+90     	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9e:	2e 30       	cpi	r18, 0x0E	; 14
    1da0:	31 05       	cpc	r19, r1
    1da2:	b9 f1       	breq	.+110    	; 0x1e12 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	8e 30       	cpi	r24, 0x0E	; 14
    1daa:	91 05       	cpc	r25, r1
    1dac:	7c f1       	brlt	.+94     	; 0x1e0c <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dae:	2b 81       	ldd	r18, Y+3	; 0x03
    1db0:	3c 81       	ldd	r19, Y+4	; 0x04
    1db2:	2f 30       	cpi	r18, 0x0F	; 15
    1db4:	31 05       	cpc	r19, r1
    1db6:	79 f1       	breq	.+94     	; 0x1e16 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	80 31       	cpi	r24, 0x10	; 16
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	69 f1       	breq	.+90     	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x134>
    1dc2:	2f c0       	rjmp	.+94     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1dc4:	87 e0       	ldi	r24, 0x07	; 7
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	2e c0       	rjmp	.+92     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1dca:	88 e0       	ldi	r24, 0x08	; 8
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	2b c0       	rjmp	.+86     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1dd0:	89 e0       	ldi	r24, 0x09	; 9
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	28 c0       	rjmp	.+80     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1dd6:	85 e2       	ldi	r24, 0x25	; 37
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	25 c0       	rjmp	.+74     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ddc:	84 e0       	ldi	r24, 0x04	; 4
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	22 c0       	rjmp	.+68     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1de2:	85 e0       	ldi	r24, 0x05	; 5
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	1f c0       	rjmp	.+62     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1de8:	86 e0       	ldi	r24, 0x06	; 6
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	1c c0       	rjmp	.+56     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1dee:	8a e2       	ldi	r24, 0x2A	; 42
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	19 c0       	rjmp	.+50     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	16 c0       	rjmp	.+44     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	13 c0       	rjmp	.+38     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	10 c0       	rjmp	.+32     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e06:	8d e2       	ldi	r24, 0x2D	; 45
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	0d c0       	rjmp	.+26     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e0c:	8d e0       	ldi	r24, 0x0D	; 13
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	0a c0       	rjmp	.+20     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1e12:	19 82       	std	Y+1, r1	; 0x01
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e16:	8d e3       	ldi	r24, 0x3D	; 61
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e1c:	8b e2       	ldi	r24, 0x2B	; 43
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	62 e0       	ldi	r22, 0x02	; 2
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_setupPinDirection>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 ea       	ldi	r26, 0xA0	; 160
    1e64:	b1 e4       	ldi	r27, 0x41	; 65
    1e66:	8b 87       	std	Y+11, r24	; 0x0b
    1e68:	9c 87       	std	Y+12, r25	; 0x0c
    1e6a:	ad 87       	std	Y+13, r26	; 0x0d
    1e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a ef       	ldi	r20, 0xFA	; 250
    1e7c:	54 e4       	ldi	r21, 0x44	; 68
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8f 83       	std	Y+7, r24	; 0x07
    1e88:	98 87       	std	Y+8, r25	; 0x08
    1e8a:	a9 87       	std	Y+9, r26	; 0x09
    1e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <LCD_init+0x7a>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	3f ef       	ldi	r19, 0xFF	; 255
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	57 e4       	ldi	r21, 0x47	; 71
    1ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <LCD_init+0xda>
    1ef2:	88 ec       	ldi	r24, 0xC8	; 200
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_init+0xc8>
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <LCD_init+0xbc>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LCD_init+0x104>
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	6f ef       	ldi	r22, 0xFF	; 255
    1f46:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f4a:	88 e3       	ldi	r24, 0x38	; 56
    1f4c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f50:	8c e0       	ldi	r24, 0x0C	; 12
    1f52:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <LCD_sendCommand>
}
    1f5c:	2e 96       	adiw	r28, 0x0e	; 14
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	e9 97       	sbiw	r28, 0x39	; 57
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e8       	ldi	r26, 0x80	; 128
    1f94:	bf e3       	ldi	r27, 0x3F	; 63
    1f96:	8d ab       	std	Y+53, r24	; 0x35
    1f98:	9e ab       	std	Y+54, r25	; 0x36
    1f9a:	af ab       	std	Y+55, r26	; 0x37
    1f9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	89 ab       	std	Y+49, r24	; 0x31
    1fb8:	9a ab       	std	Y+50, r25	; 0x32
    1fba:	ab ab       	std	Y+51, r26	; 0x33
    1fbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <LCD_sendCommand+0x72>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	98 ab       	std	Y+48, r25	; 0x30
    1fdc:	8f a7       	std	Y+47, r24	; 0x2f
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1fe0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6d a9       	ldd	r22, Y+53	; 0x35
    1ffa:	7e a9       	ldd	r23, Y+54	; 0x36
    1ffc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	98 ab       	std	Y+48, r25	; 0x30
    201e:	8f a7       	std	Y+47, r24	; 0x2f
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <LCD_sendCommand+0xd2>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9e a7       	std	Y+46, r25	; 0x2e
    2028:	8d a7       	std	Y+45, r24	; 0x2d
    202a:	8d a5       	ldd	r24, Y+45	; 0x2d
    202c:	9e a5       	ldd	r25, Y+46	; 0x2e
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_sendCommand+0xc0>
    2032:	9e a7       	std	Y+46, r25	; 0x2e
    2034:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8f a5       	ldd	r24, Y+47	; 0x2f
    2038:	98 a9       	ldd	r25, Y+48	; 0x30
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	98 ab       	std	Y+48, r25	; 0x30
    203e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8f a5       	ldd	r24, Y+47	; 0x2f
    2042:	98 a9       	ldd	r25, Y+48	; 0x30
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <LCD_sendCommand+0xb4>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	69 a9       	ldd	r22, Y+49	; 0x31
    204c:	7a a9       	ldd	r23, Y+50	; 0x32
    204e:	8b a9       	ldd	r24, Y+51	; 0x33
    2050:	9c a9       	ldd	r25, Y+52	; 0x34
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	9c a7       	std	Y+44, r25	; 0x2c
    2064:	8b a7       	std	Y+43, r24	; 0x2b
    2066:	8b a5       	ldd	r24, Y+43	; 0x2b
    2068:	9c a5       	ldd	r25, Y+44	; 0x2c
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_sendCommand+0xfc>
    206e:	9c a7       	std	Y+44, r25	; 0x2c
    2070:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	62 e0       	ldi	r22, 0x02	; 2
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e8       	ldi	r26, 0x80	; 128
    2082:	bf e3       	ldi	r27, 0x3F	; 63
    2084:	8f a3       	std	Y+39, r24	; 0x27
    2086:	98 a7       	std	Y+40, r25	; 0x28
    2088:	a9 a7       	std	Y+41, r26	; 0x29
    208a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6f a1       	ldd	r22, Y+39	; 0x27
    208e:	78 a5       	ldd	r23, Y+40	; 0x28
    2090:	89 a5       	ldd	r24, Y+41	; 0x29
    2092:	9a a5       	ldd	r25, Y+42	; 0x2a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8b a3       	std	Y+35, r24	; 0x23
    20a6:	9c a3       	std	Y+36, r25	; 0x24
    20a8:	ad a3       	std	Y+37, r26	; 0x25
    20aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_sendCommand+0x160>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9a a3       	std	Y+34, r25	; 0x22
    20ca:	89 a3       	std	Y+33, r24	; 0x21
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20ce:	6b a1       	ldd	r22, Y+35	; 0x23
    20d0:	7c a1       	ldd	r23, Y+36	; 0x24
    20d2:	8d a1       	ldd	r24, Y+37	; 0x25
    20d4:	9e a1       	ldd	r25, Y+38	; 0x26
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6f a1       	ldd	r22, Y+39	; 0x27
    20e8:	78 a5       	ldd	r23, Y+40	; 0x28
    20ea:	89 a5       	ldd	r24, Y+41	; 0x29
    20ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9a a3       	std	Y+34, r25	; 0x22
    210c:	89 a3       	std	Y+33, r24	; 0x21
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_sendCommand+0x1c0>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	98 a3       	std	Y+32, r25	; 0x20
    2116:	8f 8f       	std	Y+31, r24	; 0x1f
    2118:	8f 8d       	ldd	r24, Y+31	; 0x1f
    211a:	98 a1       	ldd	r25, Y+32	; 0x20
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCommand+0x1ae>
    2120:	98 a3       	std	Y+32, r25	; 0x20
    2122:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	89 a1       	ldd	r24, Y+33	; 0x21
    2126:	9a a1       	ldd	r25, Y+34	; 0x22
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_sendCommand+0x1a2>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	6b a1       	ldd	r22, Y+35	; 0x23
    213a:	7c a1       	ldd	r23, Y+36	; 0x24
    213c:	8d a1       	ldd	r24, Y+37	; 0x25
    213e:	9e a1       	ldd	r25, Y+38	; 0x26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	9e 8f       	std	Y+30, r25	; 0x1e
    2152:	8d 8f       	std	Y+29, r24	; 0x1d
    2154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2156:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_sendCommand+0x1ea>
    215c:	9e 8f       	std	Y+30, r25	; 0x1e
    215e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	69 ad       	ldd	r22, Y+57	; 0x39
    2164:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePort>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a0 e8       	ldi	r26, 0x80	; 128
    216e:	bf e3       	ldi	r27, 0x3F	; 63
    2170:	89 8f       	std	Y+25, r24	; 0x19
    2172:	9a 8f       	std	Y+26, r25	; 0x1a
    2174:	ab 8f       	std	Y+27, r26	; 0x1b
    2176:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	69 8d       	ldd	r22, Y+25	; 0x19
    217a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    217c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a ef       	ldi	r20, 0xFA	; 250
    2186:	54 e4       	ldi	r21, 0x44	; 68
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8d 8b       	std	Y+21, r24	; 0x15
    2192:	9e 8b       	std	Y+22, r25	; 0x16
    2194:	af 8b       	std	Y+23, r26	; 0x17
    2196:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2198:	6d 89       	ldd	r22, Y+21	; 0x15
    219a:	7e 89       	ldd	r23, Y+22	; 0x16
    219c:	8f 89       	ldd	r24, Y+23	; 0x17
    219e:	98 8d       	ldd	r25, Y+24	; 0x18
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <LCD_sendCommand+0x24c>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    21ba:	6d 89       	ldd	r22, Y+21	; 0x15
    21bc:	7e 89       	ldd	r23, Y+22	; 0x16
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	98 8d       	ldd	r25, Y+24	; 0x18
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	69 8d       	ldd	r22, Y+25	; 0x19
    21d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9c 8b       	std	Y+20, r25	; 0x14
    21f8:	8b 8b       	std	Y+19, r24	; 0x13
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <LCD_sendCommand+0x2ac>
    21fc:	88 ec       	ldi	r24, 0xC8	; 200
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9a 8b       	std	Y+18, r25	; 0x12
    2202:	89 8b       	std	Y+17, r24	; 0x11
    2204:	89 89       	ldd	r24, Y+17	; 0x11
    2206:	9a 89       	ldd	r25, Y+18	; 0x12
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_sendCommand+0x29a>
    220c:	9a 8b       	std	Y+18, r25	; 0x12
    220e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8b 89       	ldd	r24, Y+19	; 0x13
    2212:	9c 89       	ldd	r25, Y+20	; 0x14
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	9c 89       	ldd	r25, Y+20	; 0x14
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <LCD_sendCommand+0x28e>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	6d 89       	ldd	r22, Y+21	; 0x15
    2226:	7e 89       	ldd	r23, Y+22	; 0x16
    2228:	8f 89       	ldd	r24, Y+23	; 0x17
    222a:	98 8d       	ldd	r25, Y+24	; 0x18
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	98 8b       	std	Y+16, r25	; 0x10
    223e:	8f 87       	std	Y+15, r24	; 0x0f
    2240:	8f 85       	ldd	r24, Y+15	; 0x0f
    2242:	98 89       	ldd	r25, Y+16	; 0x10
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_sendCommand+0x2d6>
    2248:	98 8b       	std	Y+16, r25	; 0x10
    224a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	62 e0       	ldi	r22, 0x02	; 2
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e8       	ldi	r26, 0x80	; 128
    225c:	bf e3       	ldi	r27, 0x3F	; 63
    225e:	8b 87       	std	Y+11, r24	; 0x0b
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	ad 87       	std	Y+13, r26	; 0x0d
    2264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f 83       	std	Y+7, r24	; 0x07
    2280:	98 87       	std	Y+8, r25	; 0x08
    2282:	a9 87       	std	Y+9, r26	; 0x09
    2284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_sendCommand+0x39a>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_sendCommand+0x388>
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_sendCommand+0x37c>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_sendCommand+0x3c4>
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    233a:	e9 96       	adiw	r28, 0x39	; 57
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	e9 97       	sbiw	r28, 0x39	; 57
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 e8       	ldi	r26, 0x80	; 128
    2372:	bf e3       	ldi	r27, 0x3F	; 63
    2374:	8d ab       	std	Y+53, r24	; 0x35
    2376:	9e ab       	std	Y+54, r25	; 0x36
    2378:	af ab       	std	Y+55, r26	; 0x37
    237a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	6d a9       	ldd	r22, Y+53	; 0x35
    237e:	7e a9       	ldd	r23, Y+54	; 0x36
    2380:	8f a9       	ldd	r24, Y+55	; 0x37
    2382:	98 ad       	ldd	r25, Y+56	; 0x38
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a ef       	ldi	r20, 0xFA	; 250
    238a:	54 e4       	ldi	r21, 0x44	; 68
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	89 ab       	std	Y+49, r24	; 0x31
    2396:	9a ab       	std	Y+50, r25	; 0x32
    2398:	ab ab       	std	Y+51, r26	; 0x33
    239a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    239c:	69 a9       	ldd	r22, Y+49	; 0x31
    239e:	7a a9       	ldd	r23, Y+50	; 0x32
    23a0:	8b a9       	ldd	r24, Y+51	; 0x33
    23a2:	9c a9       	ldd	r25, Y+52	; 0x34
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	2c f4       	brge	.+10     	; 0x23be <LCD_displayCharacter+0x72>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	98 ab       	std	Y+48, r25	; 0x30
    23ba:	8f a7       	std	Y+47, r24	; 0x2f
    23bc:	3f c0       	rjmp	.+126    	; 0x243c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    23be:	69 a9       	ldd	r22, Y+49	; 0x31
    23c0:	7a a9       	ldd	r23, Y+50	; 0x32
    23c2:	8b a9       	ldd	r24, Y+51	; 0x33
    23c4:	9c a9       	ldd	r25, Y+52	; 0x34
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	57 e4       	ldi	r21, 0x47	; 71
    23ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	4c f5       	brge	.+82     	; 0x2428 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d6:	6d a9       	ldd	r22, Y+53	; 0x35
    23d8:	7e a9       	ldd	r23, Y+54	; 0x36
    23da:	8f a9       	ldd	r24, Y+55	; 0x37
    23dc:	98 ad       	ldd	r25, Y+56	; 0x38
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	98 ab       	std	Y+48, r25	; 0x30
    23fc:	8f a7       	std	Y+47, r24	; 0x2f
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <LCD_displayCharacter+0xd2>
    2400:	88 ec       	ldi	r24, 0xC8	; 200
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9e a7       	std	Y+46, r25	; 0x2e
    2406:	8d a7       	std	Y+45, r24	; 0x2d
    2408:	8d a5       	ldd	r24, Y+45	; 0x2d
    240a:	9e a5       	ldd	r25, Y+46	; 0x2e
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <LCD_displayCharacter+0xc0>
    2410:	9e a7       	std	Y+46, r25	; 0x2e
    2412:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2414:	8f a5       	ldd	r24, Y+47	; 0x2f
    2416:	98 a9       	ldd	r25, Y+48	; 0x30
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	98 ab       	std	Y+48, r25	; 0x30
    241c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2420:	98 a9       	ldd	r25, Y+48	; 0x30
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	69 f7       	brne	.-38     	; 0x2400 <LCD_displayCharacter+0xb4>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2428:	69 a9       	ldd	r22, Y+49	; 0x31
    242a:	7a a9       	ldd	r23, Y+50	; 0x32
    242c:	8b a9       	ldd	r24, Y+51	; 0x33
    242e:	9c a9       	ldd	r25, Y+52	; 0x34
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	98 ab       	std	Y+48, r25	; 0x30
    243a:	8f a7       	std	Y+47, r24	; 0x2f
    243c:	8f a5       	ldd	r24, Y+47	; 0x2f
    243e:	98 a9       	ldd	r25, Y+48	; 0x30
    2440:	9c a7       	std	Y+44, r25	; 0x2c
    2442:	8b a7       	std	Y+43, r24	; 0x2b
    2444:	8b a5       	ldd	r24, Y+43	; 0x2b
    2446:	9c a5       	ldd	r25, Y+44	; 0x2c
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_displayCharacter+0xfc>
    244c:	9c a7       	std	Y+44, r25	; 0x2c
    244e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	62 e0       	ldi	r22, 0x02	; 2
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 e8       	ldi	r26, 0x80	; 128
    2460:	bf e3       	ldi	r27, 0x3F	; 63
    2462:	8f a3       	std	Y+39, r24	; 0x27
    2464:	98 a7       	std	Y+40, r25	; 0x28
    2466:	a9 a7       	std	Y+41, r26	; 0x29
    2468:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6f a1       	ldd	r22, Y+39	; 0x27
    246c:	78 a5       	ldd	r23, Y+40	; 0x28
    246e:	89 a5       	ldd	r24, Y+41	; 0x29
    2470:	9a a5       	ldd	r25, Y+42	; 0x2a
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8b a3       	std	Y+35, r24	; 0x23
    2484:	9c a3       	std	Y+36, r25	; 0x24
    2486:	ad a3       	std	Y+37, r26	; 0x25
    2488:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    248a:	6b a1       	ldd	r22, Y+35	; 0x23
    248c:	7c a1       	ldd	r23, Y+36	; 0x24
    248e:	8d a1       	ldd	r24, Y+37	; 0x25
    2490:	9e a1       	ldd	r25, Y+38	; 0x26
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <LCD_displayCharacter+0x160>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9a a3       	std	Y+34, r25	; 0x22
    24a8:	89 a3       	std	Y+33, r24	; 0x21
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    24ac:	6b a1       	ldd	r22, Y+35	; 0x23
    24ae:	7c a1       	ldd	r23, Y+36	; 0x24
    24b0:	8d a1       	ldd	r24, Y+37	; 0x25
    24b2:	9e a1       	ldd	r25, Y+38	; 0x26
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6f a1       	ldd	r22, Y+39	; 0x27
    24c6:	78 a5       	ldd	r23, Y+40	; 0x28
    24c8:	89 a5       	ldd	r24, Y+41	; 0x29
    24ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9a a3       	std	Y+34, r25	; 0x22
    24ea:	89 a3       	std	Y+33, r24	; 0x21
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <LCD_displayCharacter+0x1c0>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	98 a3       	std	Y+32, r25	; 0x20
    24f4:	8f 8f       	std	Y+31, r24	; 0x1f
    24f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24f8:	98 a1       	ldd	r25, Y+32	; 0x20
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_displayCharacter+0x1ae>
    24fe:	98 a3       	std	Y+32, r25	; 0x20
    2500:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	89 a1       	ldd	r24, Y+33	; 0x21
    2504:	9a a1       	ldd	r25, Y+34	; 0x22
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9a a3       	std	Y+34, r25	; 0x22
    250a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	89 a1       	ldd	r24, Y+33	; 0x21
    250e:	9a a1       	ldd	r25, Y+34	; 0x22
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <LCD_displayCharacter+0x1a2>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6b a1       	ldd	r22, Y+35	; 0x23
    2518:	7c a1       	ldd	r23, Y+36	; 0x24
    251a:	8d a1       	ldd	r24, Y+37	; 0x25
    251c:	9e a1       	ldd	r25, Y+38	; 0x26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	9e 8f       	std	Y+30, r25	; 0x1e
    2530:	8d 8f       	std	Y+29, r24	; 0x1d
    2532:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2534:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_displayCharacter+0x1ea>
    253a:	9e 8f       	std	Y+30, r25	; 0x1e
    253c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	69 ad       	ldd	r22, Y+57	; 0x39
    2542:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePort>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e8       	ldi	r26, 0x80	; 128
    254c:	bf e3       	ldi	r27, 0x3F	; 63
    254e:	89 8f       	std	Y+25, r24	; 0x19
    2550:	9a 8f       	std	Y+26, r25	; 0x1a
    2552:	ab 8f       	std	Y+27, r26	; 0x1b
    2554:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2556:	69 8d       	ldd	r22, Y+25	; 0x19
    2558:	7a 8d       	ldd	r23, Y+26	; 0x1a
    255a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4a ef       	ldi	r20, 0xFA	; 250
    2564:	54 e4       	ldi	r21, 0x44	; 68
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8d 8b       	std	Y+21, r24	; 0x15
    2570:	9e 8b       	std	Y+22, r25	; 0x16
    2572:	af 8b       	std	Y+23, r26	; 0x17
    2574:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	2c f4       	brge	.+10     	; 0x2598 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9c 8b       	std	Y+20, r25	; 0x14
    2594:	8b 8b       	std	Y+19, r24	; 0x13
    2596:	3f c0       	rjmp	.+126    	; 0x2616 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2598:	6d 89       	ldd	r22, Y+21	; 0x15
    259a:	7e 89       	ldd	r23, Y+22	; 0x16
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	57 e4       	ldi	r21, 0x47	; 71
    25a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	4c f5       	brge	.+82     	; 0x2602 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	69 8d       	ldd	r22, Y+25	; 0x19
    25b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9c 8b       	std	Y+20, r25	; 0x14
    25d6:	8b 8b       	std	Y+19, r24	; 0x13
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <LCD_displayCharacter+0x2ac>
    25da:	88 ec       	ldi	r24, 0xC8	; 200
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9a 8b       	std	Y+18, r25	; 0x12
    25e0:	89 8b       	std	Y+17, r24	; 0x11
    25e2:	89 89       	ldd	r24, Y+17	; 0x11
    25e4:	9a 89       	ldd	r25, Y+18	; 0x12
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_displayCharacter+0x29a>
    25ea:	9a 8b       	std	Y+18, r25	; 0x12
    25ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	69 f7       	brne	.-38     	; 0x25da <LCD_displayCharacter+0x28e>
    2600:	14 c0       	rjmp	.+40     	; 0x262a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2602:	6d 89       	ldd	r22, Y+21	; 0x15
    2604:	7e 89       	ldd	r23, Y+22	; 0x16
    2606:	8f 89       	ldd	r24, Y+23	; 0x17
    2608:	98 8d       	ldd	r25, Y+24	; 0x18
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	98 8b       	std	Y+16, r25	; 0x10
    261c:	8f 87       	std	Y+15, r24	; 0x0f
    261e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2620:	98 89       	ldd	r25, Y+16	; 0x10
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_displayCharacter+0x2d6>
    2626:	98 8b       	std	Y+16, r25	; 0x10
    2628:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	62 e0       	ldi	r22, 0x02	; 2
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_writePin>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e8       	ldi	r26, 0x80	; 128
    263a:	bf e3       	ldi	r27, 0x3F	; 63
    263c:	8b 87       	std	Y+11, r24	; 0x0b
    263e:	9c 87       	std	Y+12, r25	; 0x0c
    2640:	ad 87       	std	Y+13, r26	; 0x0d
    2642:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2644:	6b 85       	ldd	r22, Y+11	; 0x0b
    2646:	7c 85       	ldd	r23, Y+12	; 0x0c
    2648:	8d 85       	ldd	r24, Y+13	; 0x0d
    264a:	9e 85       	ldd	r25, Y+14	; 0x0e
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4a ef       	ldi	r20, 0xFA	; 250
    2652:	54 e4       	ldi	r21, 0x44	; 68
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	8f 83       	std	Y+7, r24	; 0x07
    265e:	98 87       	std	Y+8, r25	; 0x08
    2660:	a9 87       	std	Y+9, r26	; 0x09
    2662:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e8       	ldi	r20, 0x80	; 128
    2672:	5f e3       	ldi	r21, 0x3F	; 63
    2674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2678:	88 23       	and	r24, r24
    267a:	2c f4       	brge	.+10     	; 0x2686 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	3f c0       	rjmp	.+126    	; 0x2704 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2686:	6f 81       	ldd	r22, Y+7	; 0x07
    2688:	78 85       	ldd	r23, Y+8	; 0x08
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	9a 85       	ldd	r25, Y+10	; 0x0a
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	4f e7       	ldi	r20, 0x7F	; 127
    2694:	57 e4       	ldi	r21, 0x47	; 71
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269a:	18 16       	cp	r1, r24
    269c:	4c f5       	brge	.+82     	; 0x26f0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269e:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <LCD_displayCharacter+0x39a>
    26c8:	88 ec       	ldi	r24, 0xC8	; 200
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_displayCharacter+0x388>
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	69 f7       	brne	.-38     	; 0x26c8 <LCD_displayCharacter+0x37c>
    26ee:	14 c0       	rjmp	.+40     	; 0x2718 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	78 85       	ldd	r23, Y+8	; 0x08
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <LCD_displayCharacter+0x3c4>
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2718:	e9 96       	adiw	r28, 0x39	; 57
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	00 d0       	rcall	.+0      	; 0x2730 <LCD_displayString+0x6>
    2730:	0f 92       	push	r0
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	9b 83       	std	Y+3, r25	; 0x03
    2738:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    273a:	19 82       	std	Y+1, r1	; 0x01
    273c:	0e c0       	rjmp	.+28     	; 0x275a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	9b 81       	ldd	r25, Y+3	; 0x03
    2748:	fc 01       	movw	r30, r24
    274a:	e2 0f       	add	r30, r18
    274c:	f3 1f       	adc	r31, r19
    274e:	80 81       	ld	r24, Z
    2750:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
		i++;
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	8f 5f       	subi	r24, 0xFF	; 255
    2758:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	9b 81       	ldd	r25, Y+3	; 0x03
    2764:	fc 01       	movw	r30, r24
    2766:	e2 0f       	add	r30, r18
    2768:	f3 1f       	adc	r31, r19
    276a:	80 81       	ld	r24, Z
    276c:	88 23       	and	r24, r24
    276e:	39 f7       	brne	.-50     	; 0x273e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <LCD_moveCursor+0x6>
    2782:	00 d0       	rcall	.+0      	; 0x2784 <LCD_moveCursor+0x8>
    2784:	0f 92       	push	r0
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	8a 83       	std	Y+2, r24	; 0x02
    278c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	3d 83       	std	Y+5, r19	; 0x05
    2796:	2c 83       	std	Y+4, r18	; 0x04
    2798:	8c 81       	ldd	r24, Y+4	; 0x04
    279a:	9d 81       	ldd	r25, Y+5	; 0x05
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	91 05       	cpc	r25, r1
    27a0:	c1 f0       	breq	.+48     	; 0x27d2 <LCD_moveCursor+0x56>
    27a2:	2c 81       	ldd	r18, Y+4	; 0x04
    27a4:	3d 81       	ldd	r19, Y+5	; 0x05
    27a6:	22 30       	cpi	r18, 0x02	; 2
    27a8:	31 05       	cpc	r19, r1
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <LCD_moveCursor+0x3a>
    27ac:	8c 81       	ldd	r24, Y+4	; 0x04
    27ae:	9d 81       	ldd	r25, Y+5	; 0x05
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	61 f0       	breq	.+24     	; 0x27cc <LCD_moveCursor+0x50>
    27b4:	19 c0       	rjmp	.+50     	; 0x27e8 <LCD_moveCursor+0x6c>
    27b6:	2c 81       	ldd	r18, Y+4	; 0x04
    27b8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ba:	22 30       	cpi	r18, 0x02	; 2
    27bc:	31 05       	cpc	r19, r1
    27be:	69 f0       	breq	.+26     	; 0x27da <LCD_moveCursor+0x5e>
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	83 30       	cpi	r24, 0x03	; 3
    27c6:	91 05       	cpc	r25, r1
    27c8:	61 f0       	breq	.+24     	; 0x27e2 <LCD_moveCursor+0x66>
    27ca:	0e c0       	rjmp	.+28     	; 0x27e8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	0b c0       	rjmp	.+22     	; 0x27e8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	80 5c       	subi	r24, 0xC0	; 192
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	07 c0       	rjmp	.+14     	; 0x27e8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	80 5f       	subi	r24, 0xF0	; 240
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	80 5b       	subi	r24, 0xB0	; 176
    27e6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	80 68       	ori	r24, 0x80	; 128
    27ec:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <LCD_sendCommand>
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <LCD_displayStringRowColumn+0x6>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <LCD_displayStringRowColumn+0x8>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	6a 83       	std	Y+2, r22	; 0x02
    2810:	5c 83       	std	Y+4, r21	; 0x04
    2812:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	6a 81       	ldd	r22, Y+2	; 0x02
    2818:	0e 94 be 13 	call	0x277c	; 0x277c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	62 97       	sbiw	r28, 0x12	; 18
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	9a 8b       	std	Y+18, r25	; 0x12
    2848:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    284a:	89 89       	ldd	r24, Y+17	; 0x11
    284c:	9a 89       	ldd	r25, Y+18	; 0x12
    284e:	9e 01       	movw	r18, r28
    2850:	2f 5f       	subi	r18, 0xFF	; 255
    2852:	3f 4f       	sbci	r19, 0xFF	; 255
    2854:	b9 01       	movw	r22, r18
    2856:	4a e0       	ldi	r20, 0x0A	; 10
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <itoa>
   LCD_displayString(buff); /* Display the string */
    285e:	ce 01       	movw	r24, r28
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_displayString>
}
    2866:	62 96       	adiw	r28, 0x12	; 18
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <LCD_sendCommand>
}
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <__vector_11>:
 *
 ***************************************************************************/

/*******************************TIMER0************************************/
ISR(TIMER0_OVF_vect)
{
    288c:	1f 92       	push	r1
    288e:	0f 92       	push	r0
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	0f 92       	push	r0
    2894:	11 24       	eor	r1, r1
    2896:	2f 93       	push	r18
    2898:	3f 93       	push	r19
    289a:	4f 93       	push	r20
    289c:	5f 93       	push	r21
    289e:	6f 93       	push	r22
    28a0:	7f 93       	push	r23
    28a2:	8f 93       	push	r24
    28a4:	9f 93       	push	r25
    28a6:	af 93       	push	r26
    28a8:	bf 93       	push	r27
    28aa:	ef 93       	push	r30
    28ac:	ff 93       	push	r31
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    28b6:	80 91 53 01 	lds	r24, 0x0153
    28ba:	90 91 54 01 	lds	r25, 0x0154
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	29 f0       	breq	.+10     	; 0x28cc <__vector_11+0x40>
	{
		(*g_Timer0_callBackPtr)();
    28c2:	e0 91 53 01 	lds	r30, 0x0153
    28c6:	f0 91 54 01 	lds	r31, 0x0154
    28ca:	09 95       	icall
	}
}
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	7f 91       	pop	r23
    28de:	6f 91       	pop	r22
    28e0:	5f 91       	pop	r21
    28e2:	4f 91       	pop	r20
    28e4:	3f 91       	pop	r19
    28e6:	2f 91       	pop	r18
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	0f 90       	pop	r0
    28ee:	1f 90       	pop	r1
    28f0:	18 95       	reti

000028f2 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    28f2:	1f 92       	push	r1
    28f4:	0f 92       	push	r0
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	0f 92       	push	r0
    28fa:	11 24       	eor	r1, r1
    28fc:	2f 93       	push	r18
    28fe:	3f 93       	push	r19
    2900:	4f 93       	push	r20
    2902:	5f 93       	push	r21
    2904:	6f 93       	push	r22
    2906:	7f 93       	push	r23
    2908:	8f 93       	push	r24
    290a:	9f 93       	push	r25
    290c:	af 93       	push	r26
    290e:	bf 93       	push	r27
    2910:	ef 93       	push	r30
    2912:	ff 93       	push	r31
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    291c:	80 91 53 01 	lds	r24, 0x0153
    2920:	90 91 54 01 	lds	r25, 0x0154
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	29 f0       	breq	.+10     	; 0x2932 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2928:	e0 91 53 01 	lds	r30, 0x0153
    292c:	f0 91 54 01 	lds	r31, 0x0154
    2930:	09 95       	icall
	}
}
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	ff 91       	pop	r31
    2938:	ef 91       	pop	r30
    293a:	bf 91       	pop	r27
    293c:	af 91       	pop	r26
    293e:	9f 91       	pop	r25
    2940:	8f 91       	pop	r24
    2942:	7f 91       	pop	r23
    2944:	6f 91       	pop	r22
    2946:	5f 91       	pop	r21
    2948:	4f 91       	pop	r20
    294a:	3f 91       	pop	r19
    294c:	2f 91       	pop	r18
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <__vector_9>:

/********************************TIMER1********************************/
ISR(TIMER1_OVF_vect)
{
    2958:	1f 92       	push	r1
    295a:	0f 92       	push	r0
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	0f 92       	push	r0
    2960:	11 24       	eor	r1, r1
    2962:	2f 93       	push	r18
    2964:	3f 93       	push	r19
    2966:	4f 93       	push	r20
    2968:	5f 93       	push	r21
    296a:	6f 93       	push	r22
    296c:	7f 93       	push	r23
    296e:	8f 93       	push	r24
    2970:	9f 93       	push	r25
    2972:	af 93       	push	r26
    2974:	bf 93       	push	r27
    2976:	ef 93       	push	r30
    2978:	ff 93       	push	r31
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    2982:	80 91 55 01 	lds	r24, 0x0155
    2986:	90 91 56 01 	lds	r25, 0x0156
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	29 f0       	breq	.+10     	; 0x2998 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    298e:	e0 91 55 01 	lds	r30, 0x0155
    2992:	f0 91 56 01 	lds	r31, 0x0156
    2996:	09 95       	icall
	}
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	ff 91       	pop	r31
    299e:	ef 91       	pop	r30
    29a0:	bf 91       	pop	r27
    29a2:	af 91       	pop	r26
    29a4:	9f 91       	pop	r25
    29a6:	8f 91       	pop	r24
    29a8:	7f 91       	pop	r23
    29aa:	6f 91       	pop	r22
    29ac:	5f 91       	pop	r21
    29ae:	4f 91       	pop	r20
    29b0:	3f 91       	pop	r19
    29b2:	2f 91       	pop	r18
    29b4:	0f 90       	pop	r0
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	0f 90       	pop	r0
    29ba:	1f 90       	pop	r1
    29bc:	18 95       	reti

000029be <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    29be:	1f 92       	push	r1
    29c0:	0f 92       	push	r0
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	0f 92       	push	r0
    29c6:	11 24       	eor	r1, r1
    29c8:	2f 93       	push	r18
    29ca:	3f 93       	push	r19
    29cc:	4f 93       	push	r20
    29ce:	5f 93       	push	r21
    29d0:	6f 93       	push	r22
    29d2:	7f 93       	push	r23
    29d4:	8f 93       	push	r24
    29d6:	9f 93       	push	r25
    29d8:	af 93       	push	r26
    29da:	bf 93       	push	r27
    29dc:	ef 93       	push	r30
    29de:	ff 93       	push	r31
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    29e8:	80 91 55 01 	lds	r24, 0x0155
    29ec:	90 91 56 01 	lds	r25, 0x0156
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	29 f0       	breq	.+10     	; 0x29fe <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    29f4:	e0 91 55 01 	lds	r30, 0x0155
    29f8:	f0 91 56 01 	lds	r31, 0x0156
    29fc:	09 95       	icall
	}
}
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	ff 91       	pop	r31
    2a04:	ef 91       	pop	r30
    2a06:	bf 91       	pop	r27
    2a08:	af 91       	pop	r26
    2a0a:	9f 91       	pop	r25
    2a0c:	8f 91       	pop	r24
    2a0e:	7f 91       	pop	r23
    2a10:	6f 91       	pop	r22
    2a12:	5f 91       	pop	r21
    2a14:	4f 91       	pop	r20
    2a16:	3f 91       	pop	r19
    2a18:	2f 91       	pop	r18
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

00002a24 <__vector_5>:

/********************************TIMER2***********************************/
ISR(TIMER2_OVF_vect)
{
    2a24:	1f 92       	push	r1
    2a26:	0f 92       	push	r0
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	0f 92       	push	r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	2f 93       	push	r18
    2a30:	3f 93       	push	r19
    2a32:	4f 93       	push	r20
    2a34:	5f 93       	push	r21
    2a36:	6f 93       	push	r22
    2a38:	7f 93       	push	r23
    2a3a:	8f 93       	push	r24
    2a3c:	9f 93       	push	r25
    2a3e:	af 93       	push	r26
    2a40:	bf 93       	push	r27
    2a42:	ef 93       	push	r30
    2a44:	ff 93       	push	r31
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    2a4e:	80 91 57 01 	lds	r24, 0x0157
    2a52:	90 91 58 01 	lds	r25, 0x0158
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	29 f0       	breq	.+10     	; 0x2a64 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a5a:	e0 91 57 01 	lds	r30, 0x0157
    2a5e:	f0 91 58 01 	lds	r31, 0x0158
    2a62:	09 95       	icall
	}
}
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	ff 91       	pop	r31
    2a6a:	ef 91       	pop	r30
    2a6c:	bf 91       	pop	r27
    2a6e:	af 91       	pop	r26
    2a70:	9f 91       	pop	r25
    2a72:	8f 91       	pop	r24
    2a74:	7f 91       	pop	r23
    2a76:	6f 91       	pop	r22
    2a78:	5f 91       	pop	r21
    2a7a:	4f 91       	pop	r20
    2a7c:	3f 91       	pop	r19
    2a7e:	2f 91       	pop	r18
    2a80:	0f 90       	pop	r0
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	0f 90       	pop	r0
    2a86:	1f 90       	pop	r1
    2a88:	18 95       	reti

00002a8a <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    2a8a:	1f 92       	push	r1
    2a8c:	0f 92       	push	r0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	0f 92       	push	r0
    2a92:	11 24       	eor	r1, r1
    2a94:	2f 93       	push	r18
    2a96:	3f 93       	push	r19
    2a98:	4f 93       	push	r20
    2a9a:	5f 93       	push	r21
    2a9c:	6f 93       	push	r22
    2a9e:	7f 93       	push	r23
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	af 93       	push	r26
    2aa6:	bf 93       	push	r27
    2aa8:	ef 93       	push	r30
    2aaa:	ff 93       	push	r31
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    2ab4:	80 91 57 01 	lds	r24, 0x0157
    2ab8:	90 91 58 01 	lds	r25, 0x0158
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	29 f0       	breq	.+10     	; 0x2aca <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2ac0:	e0 91 57 01 	lds	r30, 0x0157
    2ac4:	f0 91 58 01 	lds	r31, 0x0158
    2ac8:	09 95       	icall
	}
}
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	ff 91       	pop	r31
    2ad0:	ef 91       	pop	r30
    2ad2:	bf 91       	pop	r27
    2ad4:	af 91       	pop	r26
    2ad6:	9f 91       	pop	r25
    2ad8:	8f 91       	pop	r24
    2ada:	7f 91       	pop	r23
    2adc:	6f 91       	pop	r22
    2ade:	5f 91       	pop	r21
    2ae0:	4f 91       	pop	r20
    2ae2:	3f 91       	pop	r19
    2ae4:	2f 91       	pop	r18
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <Timer_init>:
 *
 ****************************************************************************/


void Timer_init(const TIMER_ConfigType * Config_Ptr)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <Timer_init+0x6>
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <Timer_init+0x8>
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_id)
    2b00:	e9 81       	ldd	r30, Y+1	; 0x01
    2b02:	fa 81       	ldd	r31, Y+2	; 0x02
    2b04:	80 81       	ld	r24, Z
    2b06:	28 2f       	mov	r18, r24
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	3c 83       	std	Y+4, r19	; 0x04
    2b0c:	2b 83       	std	Y+3, r18	; 0x03
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	91 05       	cpc	r25, r1
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <Timer_init+0x2a>
    2b18:	63 c0       	rjmp	.+198    	; 0x2be0 <Timer_init+0xf0>
    2b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b1e:	22 30       	cpi	r18, 0x02	; 2
    2b20:	31 05       	cpc	r19, r1
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <Timer_init+0x36>
    2b24:	ae c0       	rjmp	.+348    	; 0x2c82 <Timer_init+0x192>
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <Timer_init+0x40>
    2b2e:	f7 c0       	rjmp	.+494    	; 0x2d1e <Timer_init+0x22e>
	{
	/**********************************TIMER0*******************************/
	case TIMER0_ID:

		//non PWM MODE
		TCCR0 |=(1<<FOC0);
    2b30:	a3 e5       	ldi	r26, 0x53	; 83
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e3 e5       	ldi	r30, 0x53	; 83
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	80 68       	ori	r24, 0x80	; 128
    2b3c:	8c 93       	st	X, r24


		/*
		 * configure timer wave generation
		 */
		TCCR0 = (TCCR0 &0XF7)|((Config_Ptr->timer_mode)<<3 );
    2b3e:	a3 e5       	ldi	r26, 0x53	; 83
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e3 e5       	ldi	r30, 0x53	; 83
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	28 2f       	mov	r18, r24
    2b4a:	27 7f       	andi	r18, 0xF7	; 247
    2b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b50:	81 81       	ldd	r24, Z+1	; 0x01
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	82 2b       	or	r24, r18
    2b64:	8c 93       	st	X, r24

		/*
		 *  CLOCK SELCET
		 */

		TCCR0=(TCCR0 &0XF8) |(Config_Ptr->timer_clock);
    2b66:	a3 e5       	ldi	r26, 0x53	; 83
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e3 e5       	ldi	r30, 0x53	; 83
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	98 2f       	mov	r25, r24
    2b72:	98 7f       	andi	r25, 0xF8	; 248
    2b74:	e9 81       	ldd	r30, Y+1	; 0x01
    2b76:	fa 81       	ldd	r31, Y+2	; 0x02
    2b78:	84 81       	ldd	r24, Z+4	; 0x04
    2b7a:	89 2b       	or	r24, r25
    2b7c:	8c 93       	st	X, r24

		/*
		 *  overflow or compare
		 */

		TIMSK |=(1<<Config_Ptr->timer_mode);
    2b7e:	a9 e5       	ldi	r26, 0x59	; 89
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e9 e5       	ldi	r30, 0x59	; 89
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	48 2f       	mov	r20, r24
    2b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8e:	81 81       	ldd	r24, Z+1	; 0x01
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 2e       	mov	r0, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <Timer_init+0xb0>
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	0a 94       	dec	r0
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <Timer_init+0xac>
    2ba4:	84 2b       	or	r24, r20
    2ba6:	8c 93       	st	X, r24

		/*
		 * load TCNT0 with intial value
		 */
		TCNT0=(Config_Ptr->intial_value);
    2ba8:	a2 e5       	ldi	r26, 0x52	; 82
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e9 81       	ldd	r30, Y+1	; 0x01
    2bae:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	8c 93       	st	X, r24
		/*
		 *LOAD OCR0 with compare value
		 */


		if ( Config_Ptr->timer_mode == COMPARE )
    2bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bba:	81 81       	ldd	r24, Z+1	; 0x01
    2bbc:	81 30       	cpi	r24, 0x01	; 1
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <Timer_init+0xd2>
    2bc0:	ae c0       	rjmp	.+348    	; 0x2d1e <Timer_init+0x22e>
				{
					/* Insert the required compare value in OCR0 register */
			OCR0=(Config_Ptr->compare_value);
    2bc2:	ac e5       	ldi	r26, 0x5C	; 92
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bca:	85 81       	ldd	r24, Z+5	; 0x05
    2bcc:	96 81       	ldd	r25, Z+6	; 0x06
    2bce:	8c 93       	st	X, r24
					/* Enable Compare Mode flag */
					TIMSK |= (1<<OCIE0);
    2bd0:	a9 e5       	ldi	r26, 0x59	; 89
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e9 e5       	ldi	r30, 0x59	; 89
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	82 60       	ori	r24, 0x02	; 2
    2bdc:	8c 93       	st	X, r24
    2bde:	9f c0       	rjmp	.+318    	; 0x2d1e <Timer_init+0x22e>
		/**************************TIMER1*************************************/

	case TIMER1_ID:

		//non pwm
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2be0:	ef e4       	ldi	r30, 0x4F	; 79
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	8c e0       	ldi	r24, 0x0C	; 12
    2be6:	80 83       	st	Z, r24

		/*
		 * clock selcet
		 *
		 */
		TCCR1B =(TCCR1B &0XF8) |(Config_Ptr->timer_clock);
    2be8:	ae e4       	ldi	r26, 0x4E	; 78
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	ee e4       	ldi	r30, 0x4E	; 78
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	98 2f       	mov	r25, r24
    2bf4:	98 7f       	andi	r25, 0xF8	; 248
    2bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfa:	84 81       	ldd	r24, Z+4	; 0x04
    2bfc:	89 2b       	or	r24, r25
    2bfe:	8c 93       	st	X, r24

		/*
		 * timer mode
		 *
		 */
		TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->timer_mode)<<3);
    2c00:	ae e4       	ldi	r26, 0x4E	; 78
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	ee e4       	ldi	r30, 0x4E	; 78
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	27 7f       	andi	r18, 0xF7	; 247
    2c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c10:	fa 81       	ldd	r31, Y+2	; 0x02
    2c12:	81 81       	ldd	r24, Z+1	; 0x01
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	82 2b       	or	r24, r18
    2c26:	8c 93       	st	X, r24


		TCNT1=Config_Ptr->intial_value;
    2c28:	ac e4       	ldi	r26, 0x4C	; 76
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	11 96       	adiw	r26, 0x01	; 1
    2c36:	9c 93       	st	X, r25
    2c38:	8e 93       	st	-X, r24


		if ( Config_Ptr->timer_mode == COMPARE )
    2c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3e:	81 81       	ldd	r24, Z+1	; 0x01
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	89 f4       	brne	.+34     	; 0x2c66 <Timer_init+0x176>
			{
			/* Insert the required compare value in OCR1A register */
				OCR1A = Config_Ptr->compare_value;
    2c44:	aa e4       	ldi	r26, 0x4A	; 74
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4c:	85 81       	ldd	r24, Z+5	; 0x05
    2c4e:	96 81       	ldd	r25, Z+6	; 0x06
    2c50:	11 96       	adiw	r26, 0x01	; 1
    2c52:	9c 93       	st	X, r25
    2c54:	8e 93       	st	-X, r24
					/* Enable Compare Mode flag */
				TIMSK |= (1<<OCIE1A);
    2c56:	a9 e5       	ldi	r26, 0x59	; 89
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e9 e5       	ldi	r30, 0x59	; 89
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	80 61       	ori	r24, 0x10	; 16
    2c62:	8c 93       	st	X, r24
    2c64:	5c c0       	rjmp	.+184    	; 0x2d1e <Timer_init+0x22e>
			}
		 else if ( Config_Ptr->timer_mode == OVERFLOW )
    2c66:	e9 81       	ldd	r30, Y+1	; 0x01
    2c68:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6a:	81 81       	ldd	r24, Z+1	; 0x01
    2c6c:	88 23       	and	r24, r24
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <Timer_init+0x182>
    2c70:	56 c0       	rjmp	.+172    	; 0x2d1e <Timer_init+0x22e>
			{
					/* Enable overflow Mode flag */
				TIMSK |= (1<<TOIE1);
    2c72:	a9 e5       	ldi	r26, 0x59	; 89
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e9 e5       	ldi	r30, 0x59	; 89
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	84 60       	ori	r24, 0x04	; 4
    2c7e:	8c 93       	st	X, r24
    2c80:	4e c0       	rjmp	.+156    	; 0x2d1e <Timer_init+0x22e>
		break; /* End Timer1 */

		/***********************TIMER2****************************************/
	case TIMER2_ID:

		TCCR0 |= ( 1 << FOC2 );
    2c82:	a3 e5       	ldi	r26, 0x53	; 83
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e3 e5       	ldi	r30, 0x53	; 83
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 68       	ori	r24, 0x80	; 128
    2c8e:	8c 93       	st	X, r24

		TCCR2 = ( TCCR2 & 0xF7 ) | ( ( Config_Ptr->timer_mode ) << 3 );
    2c90:	a5 e4       	ldi	r26, 0x45	; 69
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e5 e4       	ldi	r30, 0x45	; 69
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	27 7f       	andi	r18, 0xF7	; 247
    2c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca2:	81 81       	ldd	r24, Z+1	; 0x01
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	82 2b       	or	r24, r18
    2cb6:	8c 93       	st	X, r24

		TCCR2 = ( TCCR2 & 0xF8 ) | ( Config_Ptr->timer_clock );
    2cb8:	a5 e4       	ldi	r26, 0x45	; 69
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e5 e4       	ldi	r30, 0x45	; 69
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	98 2f       	mov	r25, r24
    2cc4:	98 7f       	andi	r25, 0xF8	; 248
    2cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cca:	84 81       	ldd	r24, Z+4	; 0x04
    2ccc:	89 2b       	or	r24, r25
    2cce:	8c 93       	st	X, r24

		TCNT2 = (Config_Ptr->intial_value);
    2cd0:	a4 e4       	ldi	r26, 0x44	; 68
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd8:	82 81       	ldd	r24, Z+2	; 0x02
    2cda:	93 81       	ldd	r25, Z+3	; 0x03
    2cdc:	8c 93       	st	X, r24

		if ( Config_Ptr->timer_mode == COMPARE )
    2cde:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce2:	81 81       	ldd	r24, Z+1	; 0x01
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	79 f4       	brne	.+30     	; 0x2d06 <Timer_init+0x216>

		{
					/* Insert the required compare value in OCR0 register */
				OCR0 = Config_Ptr->compare_value;
    2ce8:	ac e5       	ldi	r26, 0x5C	; 92
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e9 81       	ldd	r30, Y+1	; 0x01
    2cee:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf0:	85 81       	ldd	r24, Z+5	; 0x05
    2cf2:	96 81       	ldd	r25, Z+6	; 0x06
    2cf4:	8c 93       	st	X, r24
					/* Enable Compare Mode flag */
				TIMSK |= (1<<OCIE2);
    2cf6:	a9 e5       	ldi	r26, 0x59	; 89
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e9 e5       	ldi	r30, 0x59	; 89
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 68       	ori	r24, 0x80	; 128
    2d02:	8c 93       	st	X, r24
    2d04:	0c c0       	rjmp	.+24     	; 0x2d1e <Timer_init+0x22e>
		}
		else if ( Config_Ptr->timer_mode == OVERFLOW )
    2d06:	e9 81       	ldd	r30, Y+1	; 0x01
    2d08:	fa 81       	ldd	r31, Y+2	; 0x02
    2d0a:	81 81       	ldd	r24, Z+1	; 0x01
    2d0c:	88 23       	and	r24, r24
    2d0e:	39 f4       	brne	.+14     	; 0x2d1e <Timer_init+0x22e>

		{
					/* Enable overflow Mode flag */
				TIMSK |= (1<<TOIE2);
    2d10:	a9 e5       	ldi	r26, 0x59	; 89
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e9 e5       	ldi	r30, 0x59	; 89
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	80 64       	ori	r24, 0x40	; 64
    2d1c:	8c 93       	st	X, r24

		break; /* End Timer2 */

	}

}
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void),TIMER_ID timer_number)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <Timer_setCallBack+0x6>
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <Timer_setCallBack+0x8>
    2d34:	0f 92       	push	r0
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	9a 83       	std	Y+2, r25	; 0x02
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_number)
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	3d 83       	std	Y+5, r19	; 0x05
    2d48:	2c 83       	std	Y+4, r18	; 0x04
    2d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	91 05       	cpc	r25, r1
    2d52:	81 f0       	breq	.+32     	; 0x2d74 <Timer_setCallBack+0x48>
    2d54:	2c 81       	ldd	r18, Y+4	; 0x04
    2d56:	3d 81       	ldd	r19, Y+5	; 0x05
    2d58:	22 30       	cpi	r18, 0x02	; 2
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	91 f0       	breq	.+36     	; 0x2d82 <Timer_setCallBack+0x56>
    2d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d60:	9d 81       	ldd	r25, Y+5	; 0x05
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	a1 f4       	brne	.+40     	; 0x2d8e <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:

		g_Timer0_callBackPtr=a_ptr;
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6a:	90 93 54 01 	sts	0x0154, r25
    2d6e:	80 93 53 01 	sts	0x0153, r24
    2d72:	0d c0       	rjmp	.+26     	; 0x2d8e <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_Timer1_callBackPtr=a_ptr;
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	90 93 56 01 	sts	0x0156, r25
    2d7c:	80 93 55 01 	sts	0x0155, r24
    2d80:	06 c0       	rjmp	.+12     	; 0x2d8e <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_Timer1_callBackPtr=a_ptr;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	90 93 56 01 	sts	0x0156, r25
    2d8a:	80 93 55 01 	sts	0x0155, r24
		break;

	}
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <Timer_DeInit>:


void Timer_DeInit(TIMER_ID timer_number)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	2f 97       	sbiw	r28, 0x0f	; 15
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_number)
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3f 87       	std	Y+15, r19	; 0x0f
    2dbc:	2e 87       	std	Y+14, r18	; 0x0e
    2dbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	61 f1       	breq	.+88     	; 0x2e20 <Timer_DeInit+0x82>
    2dc8:	2e 85       	ldd	r18, Y+14	; 0x0e
    2dca:	3f 85       	ldd	r19, Y+15	; 0x0f
    2dcc:	22 30       	cpi	r18, 0x02	; 2
    2dce:	31 05       	cpc	r19, r1
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <Timer_DeInit+0x36>
    2dd2:	58 c0       	rjmp	.+176    	; 0x2e84 <Timer_DeInit+0xe6>
    2dd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	09 f0       	breq	.+2      	; 0x2dde <Timer_DeInit+0x40>
    2ddc:	73 c0       	rjmp	.+230    	; 0x2ec4 <Timer_DeInit+0x126>
	{
	case TIMER0_ID:
		TCCR0 &= 0x00;
    2dde:	e3 e5       	ldi	r30, 0x53	; 83
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	90 81       	ld	r25, Z
    2de4:	e3 e5       	ldi	r30, 0x53	; 83
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	10 82       	st	Z, r1
		TCNT0 &= 0x00;
    2dea:	e2 e5       	ldi	r30, 0x52	; 82
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	20 81       	ld	r18, Z
    2df0:	e2 e5       	ldi	r30, 0x52	; 82
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	10 82       	st	Z, r1
		OCR0 &= 0x00;
    2df6:	ec e5       	ldi	r30, 0x5C	; 92
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	30 81       	ld	r19, Z
    2dfc:	ec e5       	ldi	r30, 0x5C	; 92
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	10 82       	st	Z, r1
		TIMSK &= ( 1 << OCIE0 ); /* Disable Output Compare Match Interrupt */
    2e02:	a9 e5       	ldi	r26, 0x59	; 89
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e9 e5       	ldi	r30, 0x59	; 89
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	82 70       	andi	r24, 0x02	; 2
    2e0e:	8c 93       	st	X, r24
		TIMSK &= ( 1 << TOIE0 ); /* Disable Overflow Interrupt */
    2e10:	a9 e5       	ldi	r26, 0x59	; 89
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e9 e5       	ldi	r30, 0x59	; 89
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	81 70       	andi	r24, 0x01	; 1
    2e1c:	8c 93       	st	X, r24
    2e1e:	52 c0       	rjmp	.+164    	; 0x2ec4 <Timer_DeInit+0x126>
		break;

	case TIMER1_ID:
		TCCR1A &= 0x00;
    2e20:	ef e4       	ldi	r30, 0x4F	; 79
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	ef e4       	ldi	r30, 0x4F	; 79
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	10 82       	st	Z, r1
		TCCR1B &= 0x00;
    2e2c:	ee e4       	ldi	r30, 0x4E	; 78
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	90 81       	ld	r25, Z
    2e32:	ee e4       	ldi	r30, 0x4E	; 78
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	10 82       	st	Z, r1
		TCNT1 &= 0x0000;
    2e38:	ec e4       	ldi	r30, 0x4C	; 76
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	20 81       	ld	r18, Z
    2e3e:	31 81       	ldd	r19, Z+1	; 0x01
    2e40:	ec e4       	ldi	r30, 0x4C	; 76
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	11 82       	std	Z+1, r1	; 0x01
    2e46:	10 82       	st	Z, r1
		OCR1A &= 0x0000;
    2e48:	ea e4       	ldi	r30, 0x4A	; 74
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	ea e4       	ldi	r30, 0x4A	; 74
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	11 82       	std	Z+1, r1	; 0x01
    2e56:	10 82       	st	Z, r1
		TIMSK &= ( 1 << OCIE1A ); /* Disable Output Compare Match Interrupt --> Channel A */
    2e58:	a9 e5       	ldi	r26, 0x59	; 89
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e9 e5       	ldi	r30, 0x59	; 89
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	80 71       	andi	r24, 0x10	; 16
    2e64:	8c 93       	st	X, r24
		TIMSK &= ( 1 << OCIE1B ); /* Disable Output Compare Match Interrupt --> Channel B */
    2e66:	a9 e5       	ldi	r26, 0x59	; 89
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e9 e5       	ldi	r30, 0x59	; 89
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	88 70       	andi	r24, 0x08	; 8
    2e72:	8c 93       	st	X, r24
		TIMSK &= ( 1 << TOIE1 ); /* Disable Overflow Interrupt */
    2e74:	a9 e5       	ldi	r26, 0x59	; 89
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e9 e5       	ldi	r30, 0x59	; 89
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	84 70       	andi	r24, 0x04	; 4
    2e80:	8c 93       	st	X, r24
    2e82:	20 c0       	rjmp	.+64     	; 0x2ec4 <Timer_DeInit+0x126>
		break;
	case TIMER2_ID:
		TCCR2 &= 0x00;
    2e84:	e5 e4       	ldi	r30, 0x45	; 69
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	90 81       	ld	r25, Z
    2e8a:	e5 e4       	ldi	r30, 0x45	; 69
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	10 82       	st	Z, r1
		TCNT2 &= 0x00;
    2e90:	e4 e4       	ldi	r30, 0x44	; 68
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	20 81       	ld	r18, Z
    2e96:	e4 e4       	ldi	r30, 0x44	; 68
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	10 82       	st	Z, r1
		OCR2 &= 0x00;
    2e9c:	e3 e4       	ldi	r30, 0x43	; 67
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	30 81       	ld	r19, Z
    2ea2:	e3 e4       	ldi	r30, 0x43	; 67
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	10 82       	st	Z, r1
		TIMSK &= ( 1 << OCIE2 ); /* Disable Output Compare Match Interrupt */
    2ea8:	a9 e5       	ldi	r26, 0x59	; 89
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e9 e5       	ldi	r30, 0x59	; 89
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	80 78       	andi	r24, 0x80	; 128
    2eb4:	8c 93       	st	X, r24
		TIMSK &= ( 1 << TOIE2 ); /* Disable Overflow Interrupt */
    2eb6:	a9 e5       	ldi	r26, 0x59	; 89
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e9 e5       	ldi	r30, 0x59	; 89
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	80 74       	andi	r24, 0x40	; 64
    2ec2:	8c 93       	st	X, r24
		break;
	}

}
    2ec4:	2f 96       	adiw	r28, 0x0f	; 15
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <UART_init+0x6>
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <UART_init+0x8>
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	9c 83       	std	Y+4, r25	; 0x04
    2ee4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2ee6:	1a 82       	std	Y+2, r1	; 0x02
    2ee8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2eea:	eb e2       	ldi	r30, 0x2B	; 43
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2ef2:	ea e2       	ldi	r30, 0x2A	; 42
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	88 e1       	ldi	r24, 0x18	; 24
    2ef8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0);
    2efa:	e0 e4       	ldi	r30, 0x40	; 64
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	82 e8       	ldi	r24, 0x82	; 130
    2f00:	80 83       	st	Z, r24
		 * Insert Required Parity Mode
		 * in (UCSRC) Register
		 * in the bits ( UPM0, UPM1 )
		 */

	UCSRC=(UCSRC &0XCF) |((Config_Ptr->parity)<<4);
    2f02:	a0 e4       	ldi	r26, 0x40	; 64
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e0 e4       	ldi	r30, 0x40	; 64
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	2f 7c       	andi	r18, 0xCF	; 207
    2f10:	eb 81       	ldd	r30, Y+3	; 0x03
    2f12:	fc 81       	ldd	r31, Y+4	; 0x04
    2f14:	86 81       	ldd	r24, Z+6	; 0x06
    2f16:	88 2f       	mov	r24, r24
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	82 95       	swap	r24
    2f1c:	92 95       	swap	r25
    2f1e:	90 7f       	andi	r25, 0xF0	; 240
    2f20:	98 27       	eor	r25, r24
    2f22:	80 7f       	andi	r24, 0xF0	; 240
    2f24:	98 27       	eor	r25, r24
    2f26:	82 2b       	or	r24, r18
    2f28:	8c 93       	st	X, r24
	/*
	 *
	 * insert required stop bit
	 * in the bit (USBS
	 */
	UCSRC=(UCSRC &0XF7)|((Config_Ptr->stop_bit)<<3);
    2f2a:	a0 e4       	ldi	r26, 0x40	; 64
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e0 e4       	ldi	r30, 0x40	; 64
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	28 2f       	mov	r18, r24
    2f36:	27 7f       	andi	r18, 0xF7	; 247
    2f38:	eb 81       	ldd	r30, Y+3	; 0x03
    2f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3c:	85 81       	ldd	r24, Z+5	; 0x05
    2f3e:	88 2f       	mov	r24, r24
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	88 0f       	add	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	82 2b       	or	r24, r18
    2f50:	8c 93       	st	X, r24

	/*
	 *
	 *  inser bit_data
	 */
	if (Config_Ptr->bit_data == 9)
    2f52:	eb 81       	ldd	r30, Y+3	; 0x03
    2f54:	fc 81       	ldd	r31, Y+4	; 0x04
    2f56:	84 81       	ldd	r24, Z+4	; 0x04
    2f58:	89 30       	cpi	r24, 0x09	; 9
    2f5a:	79 f4       	brne	.+30     	; 0x2f7a <UART_init+0xa4>
		{
			UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2f5c:	a0 e4       	ldi	r26, 0x40	; 64
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e0 e4       	ldi	r30, 0x40	; 64
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	86 60       	ori	r24, 0x06	; 6
    2f68:	8c 93       	st	X, r24
			UCSRB |= (1<<UCSZ2);
    2f6a:	aa e2       	ldi	r26, 0x2A	; 42
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	ea e2       	ldi	r30, 0x2A	; 42
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	84 60       	ori	r24, 0x04	; 4
    2f76:	8c 93       	st	X, r24
    2f78:	0f c0       	rjmp	.+30     	; 0x2f98 <UART_init+0xc2>
		}
		else
		{
			UCSRC |= ( ( Config_Ptr->bit_data ) << 1 );
    2f7a:	a0 e4       	ldi	r26, 0x40	; 64
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e0 e4       	ldi	r30, 0x40	; 64
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	28 2f       	mov	r18, r24
    2f86:	eb 81       	ldd	r30, Y+3	; 0x03
    2f88:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8a:	84 81       	ldd	r24, Z+4	; 0x04
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	82 2b       	or	r24, r18
    2f96:	8c 93       	st	X, r24
		}


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2f98:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	a2 81       	ldd	r26, Z+2	; 0x02
    2fa2:	b3 81       	ldd	r27, Z+3	; 0x03
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	aa 1f       	adc	r26, r26
    2faa:	bb 1f       	adc	r27, r27
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	aa 1f       	adc	r26, r26
    2fb2:	bb 1f       	adc	r27, r27
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	aa 1f       	adc	r26, r26
    2fba:	bb 1f       	adc	r27, r27
    2fbc:	9c 01       	movw	r18, r24
    2fbe:	ad 01       	movw	r20, r26
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	92 e1       	ldi	r25, 0x12	; 18
    2fc4:	aa e7       	ldi	r26, 0x7A	; 122
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 91 18 	call	0x3122	; 0x3122 <__udivmodsi4>
    2fd0:	da 01       	movw	r26, r20
    2fd2:	c9 01       	movw	r24, r18
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	9a 83       	std	Y+2, r25	; 0x02
    2fd8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2fda:	e0 e4       	ldi	r30, 0x40	; 64
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	89 2f       	mov	r24, r25
    2fe4:	99 27       	eor	r25, r25
    2fe6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2fe8:	e9 e2       	ldi	r30, 0x29	; 41
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	80 83       	st	Z, r24
}
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	08 95       	ret

00002ffe <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ffe:	df 93       	push	r29
    3000:	cf 93       	push	r28
    3002:	0f 92       	push	r0
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    300a:	eb e2       	ldi	r30, 0x2B	; 43
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	80 72       	andi	r24, 0x20	; 32
    3016:	90 70       	andi	r25, 0x00	; 0
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	b9 f3       	breq	.-18     	; 0x300a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    301c:	ec e2       	ldi	r30, 0x2C	; 44
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3024:	0f 90       	pop	r0
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3034:	eb e2       	ldi	r30, 0x2B	; 43
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	88 23       	and	r24, r24
    303c:	dc f7       	brge	.-10     	; 0x3034 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    303e:	ec e2       	ldi	r30, 0x2C	; 44
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
}
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    304a:	df 93       	push	r29
    304c:	cf 93       	push	r28
    304e:	00 d0       	rcall	.+0      	; 0x3050 <UART_sendString+0x6>
    3050:	0f 92       	push	r0
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	9b 83       	std	Y+3, r25	; 0x03
    3058:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    305a:	19 82       	std	Y+1, r1	; 0x01
    305c:	0e c0       	rjmp	.+28     	; 0x307a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	fc 01       	movw	r30, r24
    306a:	e2 0f       	add	r30, r18
    306c:	f3 1f       	adc	r31, r19
    306e:	80 81       	ld	r24, Z
    3070:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <UART_sendByte>
		i++;
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	8f 5f       	subi	r24, 0xFF	; 255
    3078:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	9b 81       	ldd	r25, Y+3	; 0x03
    3084:	fc 01       	movw	r30, r24
    3086:	e2 0f       	add	r30, r18
    3088:	f3 1f       	adc	r31, r19
    308a:	80 81       	ld	r24, Z
    308c:	88 23       	and	r24, r24
    308e:	39 f7       	brne	.-50     	; 0x305e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    309c:	0f 93       	push	r16
    309e:	1f 93       	push	r17
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	00 d0       	rcall	.+0      	; 0x30a6 <UART_receiveString+0xa>
    30a6:	0f 92       	push	r0
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	9b 83       	std	Y+3, r25	; 0x03
    30ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30b0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	9b 81       	ldd	r25, Y+3	; 0x03
    30bc:	8c 01       	movw	r16, r24
    30be:	02 0f       	add	r16, r18
    30c0:	13 1f       	adc	r17, r19
    30c2:	0e 94 16 18 	call	0x302c	; 0x302c <UART_recieveByte>
    30c6:	f8 01       	movw	r30, r16
    30c8:	80 83       	st	Z, r24
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	8f 5f       	subi	r24, 0xFF	; 255
    30d0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	9b 81       	ldd	r25, Y+3	; 0x03
    30dc:	8c 01       	movw	r16, r24
    30de:	02 0f       	add	r16, r18
    30e0:	13 1f       	adc	r17, r19
    30e2:	0e 94 16 18 	call	0x302c	; 0x302c <UART_recieveByte>
    30e6:	f8 01       	movw	r30, r16
    30e8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	28 2f       	mov	r18, r24
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	9b 81       	ldd	r25, Y+3	; 0x03
    30f4:	fc 01       	movw	r30, r24
    30f6:	e2 0f       	add	r30, r18
    30f8:	f3 1f       	adc	r31, r19
    30fa:	80 81       	ld	r24, Z
    30fc:	83 32       	cpi	r24, 0x23	; 35
    30fe:	31 f7       	brne	.-52     	; 0x30cc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	9b 81       	ldd	r25, Y+3	; 0x03
    310a:	fc 01       	movw	r30, r24
    310c:	e2 0f       	add	r30, r18
    310e:	f3 1f       	adc	r31, r19
    3110:	10 82       	st	Z, r1
}
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	1f 91       	pop	r17
    311e:	0f 91       	pop	r16
    3120:	08 95       	ret

00003122 <__udivmodsi4>:
    3122:	a1 e2       	ldi	r26, 0x21	; 33
    3124:	1a 2e       	mov	r1, r26
    3126:	aa 1b       	sub	r26, r26
    3128:	bb 1b       	sub	r27, r27
    312a:	fd 01       	movw	r30, r26
    312c:	0d c0       	rjmp	.+26     	; 0x3148 <__udivmodsi4_ep>

0000312e <__udivmodsi4_loop>:
    312e:	aa 1f       	adc	r26, r26
    3130:	bb 1f       	adc	r27, r27
    3132:	ee 1f       	adc	r30, r30
    3134:	ff 1f       	adc	r31, r31
    3136:	a2 17       	cp	r26, r18
    3138:	b3 07       	cpc	r27, r19
    313a:	e4 07       	cpc	r30, r20
    313c:	f5 07       	cpc	r31, r21
    313e:	20 f0       	brcs	.+8      	; 0x3148 <__udivmodsi4_ep>
    3140:	a2 1b       	sub	r26, r18
    3142:	b3 0b       	sbc	r27, r19
    3144:	e4 0b       	sbc	r30, r20
    3146:	f5 0b       	sbc	r31, r21

00003148 <__udivmodsi4_ep>:
    3148:	66 1f       	adc	r22, r22
    314a:	77 1f       	adc	r23, r23
    314c:	88 1f       	adc	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	1a 94       	dec	r1
    3152:	69 f7       	brne	.-38     	; 0x312e <__udivmodsi4_loop>
    3154:	60 95       	com	r22
    3156:	70 95       	com	r23
    3158:	80 95       	com	r24
    315a:	90 95       	com	r25
    315c:	9b 01       	movw	r18, r22
    315e:	ac 01       	movw	r20, r24
    3160:	bd 01       	movw	r22, r26
    3162:	cf 01       	movw	r24, r30
    3164:	08 95       	ret

00003166 <__prologue_saves__>:
    3166:	2f 92       	push	r2
    3168:	3f 92       	push	r3
    316a:	4f 92       	push	r4
    316c:	5f 92       	push	r5
    316e:	6f 92       	push	r6
    3170:	7f 92       	push	r7
    3172:	8f 92       	push	r8
    3174:	9f 92       	push	r9
    3176:	af 92       	push	r10
    3178:	bf 92       	push	r11
    317a:	cf 92       	push	r12
    317c:	df 92       	push	r13
    317e:	ef 92       	push	r14
    3180:	ff 92       	push	r15
    3182:	0f 93       	push	r16
    3184:	1f 93       	push	r17
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	ca 1b       	sub	r28, r26
    3190:	db 0b       	sbc	r29, r27
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	09 94       	ijmp

0000319e <__epilogue_restores__>:
    319e:	2a 88       	ldd	r2, Y+18	; 0x12
    31a0:	39 88       	ldd	r3, Y+17	; 0x11
    31a2:	48 88       	ldd	r4, Y+16	; 0x10
    31a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    31ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    31b0:	b9 84       	ldd	r11, Y+9	; 0x09
    31b2:	c8 84       	ldd	r12, Y+8	; 0x08
    31b4:	df 80       	ldd	r13, Y+7	; 0x07
    31b6:	ee 80       	ldd	r14, Y+6	; 0x06
    31b8:	fd 80       	ldd	r15, Y+5	; 0x05
    31ba:	0c 81       	ldd	r16, Y+4	; 0x04
    31bc:	1b 81       	ldd	r17, Y+3	; 0x03
    31be:	aa 81       	ldd	r26, Y+2	; 0x02
    31c0:	b9 81       	ldd	r27, Y+1	; 0x01
    31c2:	ce 0f       	add	r28, r30
    31c4:	d1 1d       	adc	r29, r1
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	ed 01       	movw	r28, r26
    31d2:	08 95       	ret

000031d4 <itoa>:
    31d4:	fb 01       	movw	r30, r22
    31d6:	9f 01       	movw	r18, r30
    31d8:	e8 94       	clt
    31da:	42 30       	cpi	r20, 0x02	; 2
    31dc:	c4 f0       	brlt	.+48     	; 0x320e <itoa+0x3a>
    31de:	45 32       	cpi	r20, 0x25	; 37
    31e0:	b4 f4       	brge	.+44     	; 0x320e <itoa+0x3a>
    31e2:	4a 30       	cpi	r20, 0x0A	; 10
    31e4:	29 f4       	brne	.+10     	; 0x31f0 <itoa+0x1c>
    31e6:	97 fb       	bst	r25, 7
    31e8:	1e f4       	brtc	.+6      	; 0x31f0 <itoa+0x1c>
    31ea:	90 95       	com	r25
    31ec:	81 95       	neg	r24
    31ee:	9f 4f       	sbci	r25, 0xFF	; 255
    31f0:	64 2f       	mov	r22, r20
    31f2:	77 27       	eor	r23, r23
    31f4:	0e 94 1b 19 	call	0x3236	; 0x3236 <__udivmodhi4>
    31f8:	80 5d       	subi	r24, 0xD0	; 208
    31fa:	8a 33       	cpi	r24, 0x3A	; 58
    31fc:	0c f0       	brlt	.+2      	; 0x3200 <itoa+0x2c>
    31fe:	89 5d       	subi	r24, 0xD9	; 217
    3200:	81 93       	st	Z+, r24
    3202:	cb 01       	movw	r24, r22
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	a1 f7       	brne	.-24     	; 0x31f0 <itoa+0x1c>
    3208:	16 f4       	brtc	.+4      	; 0x320e <itoa+0x3a>
    320a:	5d e2       	ldi	r21, 0x2D	; 45
    320c:	51 93       	st	Z+, r21
    320e:	10 82       	st	Z, r1
    3210:	c9 01       	movw	r24, r18
    3212:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <strrev>

00003216 <strrev>:
    3216:	dc 01       	movw	r26, r24
    3218:	fc 01       	movw	r30, r24
    321a:	67 2f       	mov	r22, r23
    321c:	71 91       	ld	r23, Z+
    321e:	77 23       	and	r23, r23
    3220:	e1 f7       	brne	.-8      	; 0x321a <strrev+0x4>
    3222:	32 97       	sbiw	r30, 0x02	; 2
    3224:	04 c0       	rjmp	.+8      	; 0x322e <strrev+0x18>
    3226:	7c 91       	ld	r23, X
    3228:	6d 93       	st	X+, r22
    322a:	70 83       	st	Z, r23
    322c:	62 91       	ld	r22, -Z
    322e:	ae 17       	cp	r26, r30
    3230:	bf 07       	cpc	r27, r31
    3232:	c8 f3       	brcs	.-14     	; 0x3226 <strrev+0x10>
    3234:	08 95       	ret

00003236 <__udivmodhi4>:
    3236:	aa 1b       	sub	r26, r26
    3238:	bb 1b       	sub	r27, r27
    323a:	51 e1       	ldi	r21, 0x11	; 17
    323c:	07 c0       	rjmp	.+14     	; 0x324c <__udivmodhi4_ep>

0000323e <__udivmodhi4_loop>:
    323e:	aa 1f       	adc	r26, r26
    3240:	bb 1f       	adc	r27, r27
    3242:	a6 17       	cp	r26, r22
    3244:	b7 07       	cpc	r27, r23
    3246:	10 f0       	brcs	.+4      	; 0x324c <__udivmodhi4_ep>
    3248:	a6 1b       	sub	r26, r22
    324a:	b7 0b       	sbc	r27, r23

0000324c <__udivmodhi4_ep>:
    324c:	88 1f       	adc	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	5a 95       	dec	r21
    3252:	a9 f7       	brne	.-22     	; 0x323e <__udivmodhi4_loop>
    3254:	80 95       	com	r24
    3256:	90 95       	com	r25
    3258:	bc 01       	movw	r22, r24
    325a:	cd 01       	movw	r24, r26
    325c:	08 95       	ret

0000325e <_exit>:
    325e:	f8 94       	cli

00003260 <__stop_program>:
    3260:	ff cf       	rjmp	.-2      	; 0x3260 <__stop_program>
