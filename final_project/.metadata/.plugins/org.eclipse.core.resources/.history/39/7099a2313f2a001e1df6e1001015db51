/*
 * HMI_mcu.c
 *
 *  Created on: ٣٠‏/١٠‏/٢٠٢٢
 *      Author:
 */
/**************************************************************************
 *                           Modules
 **************************************************************************/
#include "micro_config.h"
#include <avr/io.h>
#include <util/delay.h>

#include "HMI_mcu.h"
#include "uart.h"
#include "lcd.h"
#include "keypad.h"
#include "timer.h"



/***************************************************************************
 *                          Global Variables
 **************************************************************************/
uint8 g_inputPassword[PASSWORD_LENGTH]; /* global array to store password*/
uint8 g_match=PASS_MIS_MATCHED;

uint8 g_command;
uint8 g_tick=0;
uint8 g_passwordMistakes = 0;



int main(void)
{
	uint8 key;

	SREG  |= ( 1 << 7 );

   UART_ConfigType UART_Config={9600,USART_8_BIT,ONE_BIT,DISABLED};
   UART_init(&UART_Config);

   LCD_init();


   HMI_newPassword();

   while(1)
   {
	   HMI_mainOptions();

	   key=KEYPAD_getPressedKey();

	   switch(key)
	   {
	   case '+':  //open door
		   //ask user to enter password
		   HMI_promptPassword();

		   //ask mcu to check the password
		   HMI_sendCommand(SEND_CHECK_PASSWORD);
		   //send password
		   HMI_sendPassword(g_inputPassword);

			HMI_sendCommand(OPEN_DOOR);

			g_match = HMI_receiveCommand();

			if(g_match==OPENING_DOOR)
			{
				HMI_openingDoor();

			}
			else if(g_match == WRONG_PASSWORD)
			{
				HMI_wrongPassword();

			}

			break;

	   case '-':
		    /* Ask the user to input a password */
			HMI_promptPassword();
			/* Ask CONTROL MCU to check the Password */
			HMI_sendCommand(SEND_CHECK_PASSWORD);
			/* Send the inputed password to the CONTROL MCU */
			HMI_sendPassword(g_inputPassword);
			/* Inform CONTROL MCU what the user has chosen */
			HMI_sendCommand(CHANGE_PASSWORD);

			/* Receive the order command from CONTROL MCU */
			g_match = HMI_receiveCommand();

			/* In case the two passwords matches */
			if(g_match ==  CHANGING_PASSWORD)
			{
				/* Set new password for MCU */
				HMI_newPassword();
		   	}
			/* In case the two passwords did not match */
			else if(g_match == WRONG_PASSWORD)
			{
				/* Begin wrong operation protocol */
		   		HMI_wrongPassword();
			}

			break; /* End of change password case */

	   }
   }




} /*end main*/


void HMI_TimerCallBackProcessing(void)
{
	g_tick++;
}




void HMI_startTimer(void)
{
	TIMER_ConfigType Timer_config={TIMER1_ID,COMPARE,0,F_CPU_1024,7813};
	Timer_init(&Timer_config);
	Timer_setCallBack(HMI_TimerCallBackProcessing,TIMER1_ID);

}

void HMI_sendCommand(uint8 g_command)
{
	UART_sendByte(READY_TO_SEND);

	while(UART_recieveByte() != READY_TO_RECEIVE);
	UART_sendByte(g_command);

	while(UART_recieveByte() != RECEIVE_DONE);
}

uint8 HMI_receiveCommand(void)
 {
	/* until mcu control to be ready*/
	while(UART_recieveByte() !=READY_TO_SEND);

	UART_sendByte(READY_TO_RECEIVE);

	g_command=UART_recieveByte();

	UART_sendByte(RECEIVE_DONE);


	return g_command;
 }




void HMI_newPassword(void)
{
	/* Set its status at first as mis-matched */
		g_match = PASS_MIS_MATCHED;

		/* Loop until the HMI MCU get the same password */
		while(g_match == PASS_MIS_MATCHED)
		{


			LCD_clearScreen(); /* Clear Screen */
			LCD_displayString("Enter Password"); /* Prompt the user to input the password for the first time */
			LCD_moveCursor(1,0); /* Move Cursor to the second line */
			HMI_getPassword(g_inputPassword); /* Get the password from the user */

			HMI_sendCommand(SEND_FIRST_PASSWORD); /* Inform the CONTROL MCU that you will send the first password */
			HMI_sendPassword(g_inputPassword); /* Send the password to the CONTROL MCU */


			LCD_clearScreen(); /* Clear Screen */
			LCD_displayString("ReEnter Password"); /* Prompt the user to input the password for the second time */
			LCD_moveCursor(1,0); /* Move Cursor to the second line */
			HMI_getPassword(g_inputPassword); /* Get the password from the user */

			HMI_sendCommand(SEND_SECOND_PASSWORD); /* Inform the CONTROL MCU that you will send the second password */
			HMI_sendPassword(g_inputPassword); /* Send the password to the CONTROL MCU */

			/* Wait until the is able to send the confirmation of the second password */
			g_match = HMI_receiveCommand();
		}

			/* In case the Two Passwords did not match */


}





void HMI_sendPassword(uint8 a_inputPassword[])
{
	uint8 counter=0;
	while (counter!=PASSWORD_LENGTH)
		{
		UART_sendByte(a_inputPassword[counter]); /*send element by element by USART*/
		_delay_ms(SEND_RECEIVE_TIME); /*delay time until send password*/

		}
}



void HMI_getPassword(uint8 a_inputPassword[])
{
	LCD_moveCursor(1, 0);

		uint8 counter = 0; /* Variable to be used as a counter */
		uint8 password_key = 0; /* Variable to store the pressed key */

		/* Stop getting number after you get 5 characters */
		while( counter != PASSWORD_LENGTH )
		{
			password_key = KEYPAD_getPressedKey(); /* Get the get the key pressed and store it in the password array */

			if ( (password_key >= 0) && (password_key <= 9) )
			{
				LCD_displayCharacter('*'); /* Display asterisk for privacy */
				a_inputPassword[counter] = password_key;
				counter++;
			}
			_delay_ms(KEYPAD_CLICK_TIME); /* Delay time for keypad press */
		} /* End while loop */

		/* Don't leave until the user press (=) symbol */
		while ( KEYPAD_getPressedKey() != '=' );


}


void HMI_mainOptions(void)
{
	 LCD_clearScreen();
	 LCD_displayString("(+): Open Door"); /* Display the first option */
	 LCD_moveCursor(1,0); /* Move to the next line */
   	LCD_displayString("(-): Change Pass"); /* Display the second option */


}


void HMI_promptPassword(void)
{
	 LCD_clearScreen();
	 LCD_displayString("enter password");
	 HMI_getPassword(g_inputPassword);

}


void HMI_openingDoor(void)
{
	HMI_startTimer();
	LCD_clearScreen(); /* Clear Screen */
	LCD_displayString("Door is Opening"); /* Display explanation message on LCD */
	while(g_tick<OPEN_DOOR_TIME);
	g_tick=0;

	LCD_clearScreen();
	for(g_tick=0;g_tick<3;g_tick++)
	{
	LCD_displayString("Door is on hold");
	/* Display explanation message on LCD */
	}

	g_tick=0;

	LCD_clearScreen();
	LCD_displayString("Door is Closing"); /* Display explanation message on LCD */
	while(g_tick<15);
	g_tick=0;


	 Timer_DeInit(TIMER1_ID); /* Stop the timer */
	  LCD_clearScreen(); /* Clear Screen */

}




void HMI_wrongPassword(void)
{
	g_passwordMistakes++; /* Increment the wrong counter */

	LCD_clearScreen(); /* Clear Screen */

	LCD_displayString(" Wrong Password "); /* Display explanation message on LCD */

	_delay_ms(STAND_PRESENTATION_TIME); /* Hold for Presentation Time */


	/* If the user entered the password 3 times wrong */
	if(g_passwordMistakes == MAX_NUM_OF_MISTAKES)
	{
		HMI_startTimer(); /* Start the timer to measure time period */

		LCD_clearScreen(); /* Clear Screen */
		LCD_displayString("!!! WARNING !!!"); /* Display warning message on LCD */

		while(g_tick != WARNING_TIME); /* Display the message for one minute */

		/* Reset the counters */
		g_passwordMistakes = 0;
		g_tick = 0;

	    Timer_DeInit(TIMER1_ID); /* Stop the timer */
	} /* End if */

    LCD_clearScreen(); /* Clear Screen */
} /* End HMI_wrongPassword Function */













